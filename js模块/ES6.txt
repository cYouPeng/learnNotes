5，6，7，AMD
	AMD
		规范：
			说明：
				Asynchronous Modules Definition(异步模块定义)
				https://github.com/amdjs/amdjs-api/wiki/AMD
				专门用于浏览器端，模块的加载是异步的
				(一开始commonjs只针对服务器端，然后amd出现针对浏览器端，再然后commonjs又同时针对了浏览器端)
			基本语法：
				定义暴露模块
					//定义没有依赖的模块
					define(function(){
						return 模块
					})
					//定义有依赖的模块
					define(['module1','module2'], function(m1, m2){  //显式声明依赖注入
						return 模块
					})
				
				引入使用模块
					require(['module1','module2'], function(m1, m2){
						使用 m1/m2
					})
					
8，CMD

9，ES6
	规范：
		说明：
			http://es6.ruanyifeng.com/#docs/module
			依赖模块需要编译打包处理
		语法：
			导出模块：export
			引入模块：import
	实现(浏览器端)
		使用Babel将ES6编译成ES6代码
		使用Browserify编译打包js
		项目结构：
			/-js(文件夹)
				/-src(文件夹)
					/-main.js  //主模块
						//引入其他的模块
						//语法：import xxx from '路径'
						
						import $ from 'jquery' //使用第三方库和默认暴露用法一样，得放上边
						
						import {foo, bar} from './module1'
						import {fun, fun2} from './module1'												
						//在ES6中引入分别暴露或统一暴露，必须得用对象解构赋值的方式，不然拿到的是undefined
						
						import module3 from './module3'
						module3.foo()
						
						foo()
						fun()  //修改了之后得重新执行命令转换打包
					/-module1.js
						//暴露模块，分别暴露
						export function foo(){
							console.log('foo() module1');
						}
						export function bar(){
							console.log('bar() module1');
						}
						export let arr = [1,2,3]
					/-module2.js
						//统一暴露      分别暴露和统一暴露 ==> 常规暴露
						export function fun(){
							console.log('fun() module1');
						}
						export function fun2(){
							console.log('fun2() module1');
						}
						export {fun, fun2}
					/-module3.js
						//默认暴露，可以暴露任意数据类型，暴露什么数据接收到的就是什么数据
						//语法：export default value
						//export default () => {
							//console.log('我是默认暴露的箭头函数');
						//}
						export default {
							msg: '默认暴露',
							foo(){
								console.log(this.msg)
							}
						}
				/-dist
					bundle.js
				/-build
					/-main.js
					/-module1.js
					/-module2.js
					/-module3.js
			/-.babelrc(它是一个json文件，单不需要你手写.json后缀名) //babel干活之前先来读取.babelrc，来知道自己要干什么活
				{
					"presets": ["es2015", "react"]
				}
			/-index.html
				<script src="js/dist/bundle.js"><script>
			/-package.json
				{
					"name": "es6-babel-browserify",  //不要和下载包名重复
					"version": "1.0.0",
					"devDependencies":{
						"babel-preset-es2015": "^6.24.1"
					},
					"dependencies":{
						"jquery": "^1.12.4"
					}
				}
			/-package-lock.json
				从npm下载包以后会多出来这个文件
		
	ES6-Babel-Browserify使用教程
	1，定义package.json文件
		{
			"name": "es6-babel-browserify",
			"version": "1.0.0",
			"devDependencies": {  
				"babel-preset-es2015": "^6.24.1"
			},
		}
		...
			//cli:command line interface 命令行接口
	2，安装babel-cli(babel本身没有命令，得通过它来调)，babel-preset-es2015(将6转5需要的所有的插件打包下载下来)和browserify(帮助我们编译打包，处理require语法的)  
			
		npm install babel-cli browserify -g
		npm install babel-preset-es2015 --save-dev
		preset 预设(将es6转换成es5的所有插件打包)
	3，定义 .babelrc(就叫这个名，.前边没有东西。rc:run control 运行时控制文件，就是运行时需要读的文件) 文件
		...
		{
			"presets": ["es2015"]
		}
		...
	4，编码
		...
	5，编译
		使用Babel将ES6编译为ES5代码(但包含CommonJS语法) : babel js/src -d js/build   //把src下所有js转成es5文件并存到lib下，没有build文件夹自动创建build文件夹
		使用Browserify编译js : browserify js/build/main.js -o js/dist/bundle.js  //没有dist文件夹，不会自动创建，会报错
	6，页面中引入测试
		<script src="js/lib/bundle.js"></script>
	7，引入第三方模块(jQuery)
		1,下载jQuery模块：
			npm install jquery@1 --save   //不指定版本默认下载最新，写个1，会下载1版本里最新的(1.11，就会下1.11版本里最新的,1.11.3就指定死了)。。2，3版本不搭理IE6，5，用1就行。。
		2,在app.js中引入并使用
			...
			import $ from 'jquery'
			$('body').css('background','red');
	