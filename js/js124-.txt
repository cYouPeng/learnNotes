一百二十四，Navigator
	/*
	 *	BOM
			-浏览器对象模型
			-BOM可以使我们通过js来操作浏览器
			-在BOM中为我们提供了一组对象，用来完成对浏览器的操作
			-在BOM对象中
				Window
					-代表的是整个浏览器的窗口
					 同时window也是网页中的全局对象
				Navigator
					-代表的是当前浏览器的信息
					 通过该对象可以识别不同的浏览器
				Location
					-代表当前浏览器的地址栏信息
					 通过该对象可以获取地址栏信息，或者操作浏览器跳转页面
				History
					-代表浏览器的历史记录，可以通过该对象来操作浏览器的历史记录
						由于隐私原因，该对象不能获取到具体的历史记录，只能操作浏览器向前或向后翻页
						而且该操作只在当次访问时有效
				Screen	
					-代表用户的屏幕的信息
					 通过该对象可以获取到用户的显示器的相关信息
					 
			这些BOM对象在浏览器中都是作为window对象的属性保存的(使用时注意都是小写的)
				可以通过window对象来使用，也可以直接使用
					console.log(window.navigator);
					console.log(navigator);  //二者输出一样
					
		/*
		 *	Navigator
				-代表当前浏览器的信息，通过该对象可以来识别不同的浏览器
				-由于历史原因，Navigator对象中的大部分属性都已经不能帮助我们识别浏览器了
				-一般我们只会使用userAgent来判断浏览器的信息，userAgent的值是一个字符串，这个字符串中包含有用来
					描述浏览器信息的内容。不同的浏览器会有不同的userAgent
						火狐的userAgent
							Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:68.0) Gecko/20100101 Firefox/68.0
						chrome的userAgent
							Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.100 Safari/537.36
						IE8,9,10的userAgent
							Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; WOW64; Trident/7.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; .NET4.0C; .NET4.0E)
						IE11的userAgent
							Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; .NET4.0C; .NET4.0E; rv:11.0) like Gecko
								在IE11中已经将微软和IE相关的标识都去除了，所以我们基本已经不能通过userAgent来识别一个浏览器
								是否是IE了
								
								如果通过userAgent不能判断，还可以通过一些浏览器中特有的对象，来判断浏览器的信息
								比如：ActiveXObject
									if("ActiveXObject" in window){
										alert("我是IE");
									}else{
										alert("我不是IE);
									}
									注：不能写if(window.ActiveXObject) IE会把它转成false
									
									
							var ua = navigator.userAgent;
							if(/firefox/i.test(ua)){
								alert("火狐");
							}else if(/chrome/i.test(ua)){
								alert("chrome");
							}else if(/msie/i.test(ua)){
								alert("IE");
							}else if("ActiveXObject" in window){
								alert("IE11");
							}
							
一百二十五，History
	/*
	 *	History
			-该对象可以用来操作浏览器向前或向后翻页
			
		/*
		 *	length	
				-属性，可以获取到当次访问的链接数量
				 console.log(history.length);
				 
		/*
		 *	back()
				-可以用来回退到上一个页面，作用和浏览器的回退按钮一样
					history.back();
				
		/*
		 *	forward()
				-可以跳转到下一个页面，作用和浏览器的前进按钮一样
					history.forward();
					
		/*
		 *	go()
				-可以用来跳转到指定的页面
				-它需要一个整数作为参数
					1：表示向前跳转一个页面	相当于forward()
					2：表示向前跳转两个页面
					-1：表示向后跳转一个页面	相当于back()
					-2：表示向后跳转两个页面
						history.go(-2);
						
一百二十六，Location
	/*
	 * 该对象中封装了浏览器的地址栏的信息
	 *	如果直接打印Location，则可以获取到地址栏的信息(当前页面的完整路径)
			alert(location);
			
		如果直接将location属性修改为一个完整的路径，或相对路径
		则页面会自动跳转到该路径，并且会生成相应的历史记录
			location = "http://www.baidu.com";
			location = "test.html";
			
		/*
		 *	assign()
				-用来跳转到其它页面，作用和直接修改location一样
					location.assign("http://www.baidu.com");
				也会生成历史记录(可以回退前进)
				
		/*
		 *	reload()
				-用于重新加载当前页面，作用和刷新按钮一样
				-如果在方法中传递一个true作为参数，则会强制清空缓存刷新页面
				-ctrl+f5 强制清空缓存刷新页面快捷键
					location.reload();
					location.reload(true);
					
		/*
		 *	replace()
				-可以使用一个新的页面替换当前页面，调用完毕也会跳转页面
					不会生成历史记录，不能使用回退按钮回退
					
		assign()和replace()都用来跳转页面，只不过一个能生成历史记录，一个不能生成
		
一百二十七，定时器简介
	<h1 id="count"></h1>
	<script>
		var count = document.getElementById("count");
		//使count的内容自动切换
		/*
		 *	js的程序的执行速度是非常快的
			如果希望一段程序，可以每隔一段时间执行一次，可以使用定时调用
			
			for(var i=0; i<10000; i++){
				count.innerHTML = i;
			}
			
		/*
		 *	setInterval()
				-定时调用
				-可以将一个函数，每隔一段时间执行一次
				-参数：
					1，回调函数，该函数会每隔一段时间被调用一次
					2，每次调用间隔的时间，单位毫秒
				-返回值：
					返回一个Number类型的数据，这个数字用来作为定时器的唯一标识
				
						var num = 1;
						var timer = setInterval(function(){
							count.innerHTML = num++;
							if(num == 10){
								clearInterval(timer);
							}
						},1000);
						/*
						 *	clearInterval()可以用来关闭一个定时器
							方法中需要一个定时器的标识作为参数，这样将关闭标识对应的定时器
						
	</script>
					
一百二十八，切换图片练习
	<img src="" />
	<button id="btn01">开始</button>
	<button id="btn02">暂停</button>
	<script>
		var img = document.getElementsByTagName("img")[0];
		var btn01 = document.getElementById("btn01");
		var btn02 = document.getElementById("btn02");
		//创建一个数组，保存图片的路径
		var imgArr = ["1.jpg","2,jpg","3.jpg","4.jpg","5.jpg"];
		//创建一个变量，保存当前图片的索引
		var index = 0;
		//定义一个变量，来保存定时器的标识
		var time;
		//开启一个定时器，来自动切换图片
		btn01.onclick = function(){
			clearInterval(timer);
			var timer = setInterval(function(){
				//使索引自增
				index++;
				//判断索引是否超过最大索引
				if(index >= imgArr.length){
					index = 0;
				}
				或
				index = index % imgArr.length; (有点难) index %= imgArr.length
				
			},1000)
		}
		//点击按钮以后，停止图片的自动切换，关闭定时器
		btn02.onclick = function(){			
			//clearInterval()可以接收任意参数，如果参数是一个有效的定时器的标识，则停止对应的定时器
			//如果参数不是一个有效的标识，则什么也不做
			clearInterval(timer);
		}
		
		/*
		 *	目前我们每点击一次按钮，就会开启一个定时器
			点击多次就会开启多个定时器，这就导致图片的切换速度过快
			并且我们只能关闭最后一次开启的定时器
			
			可以在开启定时器之前，将当前元素上的其它定时器关闭，所以多了182行代码
	</script>
	
一百二十九，修改div移动
	请看123章
	
一百三十，延时调用
	/*
	 *	延时调用
			一个函数不马上执行，而是隔一段时间以后再执行，而且只会执行一次
			延时调用和定时调用的区别
				定时调用会执行多次
				而延时调用只会执行一次
			延时调用和定时调用实际上是可以互相代替的，在开发中可以根据自己需要去选择
			
			var timer = setTimeout(function(){
				console.log("hello");
			},1000);
			//使用clearTimeout()来关闭一个延时调用
			clearTimeout(timer);
			
一百三十一，二，三，定时器的应用
	<button id="btn01">点击按钮以后box1向右移动</button>
	<button id="btn02">点击按钮以后box2向右移动</button>
	
	<div id="box1"></div>
	<div id="box2"></div>
	<div style="width:0;height:1000px;border-left:1px solid black;position:absolute;left:800px"></div>
	
	#box1{
		width: 100px;
		height: 100px;
		background-color: red;
		position: absolute;
		left: 0; /* 防止IE的auto */
	}
	#box2{
		width: 100px;
		height: 100px;
		background-color: red;
		position: absolute;
		left: 0; /* 防止IE的auto */
		top: 200px;
	}
	<script>
		var bton01 = document.getElementById("btn01");
		var bton02 = document.getElementById("btn02");
		var box1 = document.getElementById("box1");
		var box2 = document.getElementById("box2");
		var timer;
		btn01.onclick = function(){
			//关闭上一个定时器
			clearInterval(timer);
			timer = setInterval(){
				//获取box1原来的left值
				var oldValue = parseInt(getStyle(box1, "left"));
				//在旧值的基础上增加
				var newValue = oldValue + 19;
				//判断newValue是否大于800
				if(newValue > 800){
					newValue = 800;
				}
				//将新值赋给box1
				box1.style.left = newValue + "px";
				//当元素移动到800px时，停止执行动画
				if(newValue == 800){
					clearInterval(timer);
				}
			}
		}
		
	<script>
		
	tool.js
		/*
		 *	尝试创建一个可以执行简单动画的函数
			参数：
				obj：要执行动画的对象
				attr: 要执行动画的样式，比如：left top width height
				target：执行动画的目标位置
				speed：移动的速度
				callback: 回调函数，将会在动画执行完毕以后执行
				
			function move(obj, attr, speed, target, callback){
				//关闭上一个计时器
				clearInterval(obj.timer);
				//获取元素目前的位置
				var current = parseInt(getStyle(obj, attr));				
				//判断速度的正负值
				//如果从0向800移动，则speed为正
				//如果从800向0移动，则speed为负
				if(current > target){
					//此时速度应为负值
					speed = -speed;
				}				
				//开启一个定时器，用来执行动画效果
				//向执行动画的对象中添加一个timer属性，用来保存它自己的定时器标识
				obj.timer = setInterval(function(){
					//获取box1原来的left值
					var oldValue = parseInt(getStyle(obj, attr));
					//在旧值的基础上增加
					var newValue = oldValue + speed;
					
					//判断newValue是否大于800
					//从800向0移动
					//向左移动时，需要判断newValue是否小于target
					//向右移动时，需要判断newValue是否大于target
					if(speed < 0 && newValue < target || speed >0 && newValue > target){
						newValue = target;
					}					
					//将新值赋给box1
					obj.style[attr] = newValue + "px";
					
					//当元素移动到0px时，使其停止执行动画
					if(newValue == target){
						//达到目标，关闭定时器
						clearInterval(obj.timer);
						//动画执行完毕，调用回调函数
						callback && callback();
					}
					
				},30)
			}
			function getStyle()...
			
			
		在其它页面引用tool.js
			<script src="tool.js"></script>
			
			<script>
				move(box2, "width", 800, 10, function(){
					move(box2, "height", 400, 10, function(){
						move(box2, "top", 0, 10, function(){
							...
						})
					})
				});
			</script>
	

一百三十四，135,136,完成轮播图界面
	<!-- 创建一个大的div，来作为大的容器 -->
	<div id="outer">
		<!-- 创建一个ul，用于放置图片 -->
		<ul id="imgList">
			<li><img src="1.jpg" alt="xx"/></li>
			<li><img src="2.jpg" alt="xx"/></li>
			<li><img src="3.jpg" alt="xx"/></li>
			<li><img src="4.jpg" alt="xx"/></li>
			<li><img src="5.jpg" alt="xx"/></li>
			<li><img src="1.jpg" alt="xx"/></li>
			
		</ul>
		<!-- 创建导航按钮-->
		<div id="navDiv">
			<a href="javascript:;"></a>
			<a href="javascript:;"></a>
			<a href="javascript:;"></a>
			<a href="javascript:;"></a>
			<a href="javascript:;"></a>
		</div>
	</div>
	
	*{
		margin: 0;
		padding: 0;
	}
	#outer{
		width: 520px;
		height: 333px;
		margin: 50px atuo;
		background-color: greenyellow;
		padding: 10px 0;
		position: relative;
		overflow: hidden;
	}
	#imgList{
		list-style: none;
		/* width: 2600px; */
		position: absolute;
		/*
		 *每向左移动520px，就会显示下一张图片
		 */
		left: -520px;
	}
	#imgList li{
		float: left;
		margin: 0 10px;
	}
	#navDiv{
		position: absolute;
		bottom: 15px;
		/* 设置left值
		 * outer宽度520
		 * navDiv宽度 25*5 = 125
		 *  520 - 125 = 395
		 *  395/2 = 197.5
		 *
		 * left: 197px;
		 * 但是增加或减少a标签就不灵了，还是通过js来设置
		 */
	}
	#navDiv a{
		float: left;
		width: 15px;
		height: 15px;
		margin: 0 5px;
		background-color: red;
		opacity: 0.5;
		/*兼容IE8透明*/
		filter: alpha(opacity=50);
	}
	#navDiv a:hover{
		background-color: #000;
	}
	<script>
		//设置imgList的宽度，增加图片的话，会自动设置宽度
		var imgList = document.getElementById("imgList");
		var imgArr = document.getElementsByTagName("img");
		imgList.style.width = 520 * imgArr.length + "px";
		
		//设置导航按钮居中
		var navDiv = document.getElementById("navDiv");
		var outer = document.getElementById("outer");
		nav.style.left = (outer.offsetWidth - navDiv.offsetWidth)/2 + "px";
		
		//默认显示图片的索引
		var index = 0;
		var allA = document.getElementsByTagName("a");
		//设置默认选中的效果
		allA[index].style.backgroundColor = "black";
		
		/*
		 * 点击超链接切换到指定的图片
		 *  点击第一个超链接，显示第一个图片
		 */
		//为所有的超链接都绑定单击响应函数
		for(var i=0; i<allA.length; i++){
			//为每一个超链接都添加一个num属性
			allA[i].num = i;
			allA[i].onclick = function(){
				clearInterval(timer);
				//获取点击超链接的索引，并将其设置为index
				index = this.num;
				//切换图片
				/*
				 * 第一张索引为0，left为0
				 * 第二张索引为1，left为-520
				 * 第三张索引为2，left为-1040
				 */
				//imgList.style.left = -520*index + "px";
				
				//设置选中的a
				setA();
				
				//使用move函数来切换图片
				move(imgList, "left", -520*index, 20, function(){
					autoChange();
				});
			}
		}
		
		//开启自动切换图片
		autoChange()
		
		
		//创建一个方法用来设置选中的a
		function setA(){
			//判断当前索引是否是最后一张图片
			if(index >= imgArr.length-1){
				index = 0;
				//此时显示的是最后一张图片，而最后一张图片和第一张是一模一样
				//通过css将最后一张切换成第一张
				imgList.style.left = 0;
			}
			//遍历所有的a，并将它们的背景色设置为红色
			for(var i=0; i<allA.length; i++){
				//为什么给个""呢？因为给具体值得话，hover就不管用了，因为内联样式优先级比hover高
				//给""的话，就会应用样式表里的样式，这样hover就管用了
				allA[i].style.backgroundColor = "";
			}
			//将选中的a设置为黑色
			allA[index].style.backgroundColor = "black";
		}
		
		var timer;
		//创建一个函数，用来开启自动切换图片
		function autoChange(){
			timer = setInterval(function(){
				index++;
				index %= imgArr.length;
				move(imgList, "left", -520*index, 20, function(){
					//修改导航按钮
					setA();
				});
			},3000)
		}
		
	</script>
	
一百三十七，类的操作
	<button id="btn01">点击按钮以后修改box的样式</button>
	<div id="box" class="b1"></div>
	
	.b1{
		width: 100px;
		height: 100px;
		background-color: red;
	}
	.b2{
		width: 200px;
		height: 200px;
		background-color: blue;
	}
	<script>
		var btn01 = document.getElementById("btn01");
		var box = document.getElementById("box");
		btn01.onclick = function(){
			//修改box的样式
			/*
			 * 通过style属性来修改元素的样式，每修改一个样式，浏览器就需要重新渲染一次页面
			 *  这样执行的性能是比较差的，而且这种形式当我们要修改多个样式时，也不太方便
			 *  而且行为和表现耦合，也不推荐使用这种方式
			//box.style.width = "200px";
			//box.style.backgroundColor = "blue";
			
			/*
			 * 我希望一行代码，可以同时修改多个样式
			 * 我们可以通过修改元素的className的属性来间接的修改样式
			 *  这样一来，我们只需要修改一次，即可同时修改多个样式
			 *  此时浏览器只需要重新渲染页面一次，性能比较好
			 *  并且这种方式，可以使表现和行为进一步的分离
			 */
			//修改box的class属性
			//box.className += " b2";
			addClass(box, "b2");
			
			//removeClass(box, "b2");
			
			//toggleClass(box, "b2");
		}
		
		/*
		 * 定义一个函数，用来向一个元素中添加指定的class属性值
		 * 	参数：
		 *	  obj 要添加class属性的元素
		 *	  cn  要添加的class值
		function addClass(obj, cn){
			//检查obj中是否含有cn
			if(!hasClass(obj, cn)){
				obj.className += " "+cn;
			}
			
		}
		
		/*
		 * 判断一个元素中是否含有指定的class属性值
		 *  如果有该class，则返回true，没有返回false
		 */
		function hasClass(obj, cn){
			//var reg = /\bb2\b/;
			var reg = new RegExp("\\b"+cn+"\\b");
			return reg.test(obj.className);
		}
		
		/*
		 * 删除一个元素中指定的class属性
		 */
		function removeClass(obj, cn){
			var reg = new RegExp("\\b"+cn+"\\b");
			obj.className = obj.className.replace(reg, "");
		}	
		
		/*
		 * toggleClass可以用来切换一个类
		 *  如果元素中具有该类，则删除
		 *  如果元素中没有该类，则添加
		
		function toggleClass(obj, cn){
			//判断obj中是否含有cn
			if(hasClass(obj, cn)){
				//有，则删除
				removeClass(obj, cn);
			}else{
				//没有，则添加
				addClass(obj, cn);
			}
		}
		//可以把上面这些函数加入到tool.js中
	</script>
	
一百三十八，139,二级菜单-完成基础功能
	<div id="my_menu" class="sdmenu">
		<div>
			<span class="menuSpan">在线工具</span>
			<a href="#">图像优化</a>
			<a href="#">收藏夹图标生成器</a>
			<a href="#">邮件</a>
			<a href="#">htaccess密码</a>
			<a href="#">梯度图像</a>
			<a href="#">按钮生成器</a>
		</div>
		<div class="collapsed">
			<span class="menuSpan">支持我们</span>
			<a href="#">图像优化</a>
			<a href="#">收藏夹图标生成器</a>
			<a href="#">邮件</a>
			<a href="#">htaccess密码</a>
			<a href="#">梯度图像</a>
			<a href="#">按钮生成器</a>
		</div>
		<div class="collapsed">
			<span class="menuSpan">合作伙伴</span>
			<a href="#">图像优化</a>
			<a href="#">收藏夹图标生成器</a>
			<a href="#">邮件</a>
			<a href="#">htaccess密码</a>
			<a href="#">梯度图像</a>
			<a href="#">按钮生成器</a>
		</div>
		<div class="collapsed">
			<span class="menuSpan">调试电流</span>
			<a href="#">图像优化</a>
			<a href="#">收藏夹图标生成器</a>
			<a href="#">邮件</a>
			<a href="#">htaccess密码</a>
			<a href="#">梯度图像</a>
			<a href="#">按钮生成器</a>
		</div>
	</div>
	
	*{
		margin: 0;
		padding: 0;
		list-style-type: none;
	}
	a, img{
		border: 0;
		text-decoration: none;
	}
	body{
		font: 12px/100% Arial, Helvetica, sans-serif, "新宋体";
	}

	.collapsed{
		height: 25px
	}
	
	<script src="tool.js"></script>
	<script>
		/*
		 *	我们的每一个菜单都是一个div
		 *   当div具有collapsed这个类时，div就是折叠的状态
		 *   当div没有这个类时，div就是展开的状态
		 */
		 
		//点击菜单，切换菜单的显示状态
		//获取所有class为menuSpan的元素
		var menuSpan = document.querySelectorAll(".menuSpan");
		
		//定义一个变量，来保存当前打开的菜单
		var openDiv = menuSpan[0].parentNode;
		
		//为span绑定单击响应函数
		for(var i=0; i<menuSpan.length; i++){
			//this代表当前点击的span
			//获取当前span的父元素
			var parentDiv = this.parentNode;
			
			//切换菜单的显示状态
			toggleMenu(parentDiv);
			
			
			//判断openDiv和parentDiv是否相同
			if(openDiv != parentDiv && !hasClass(openDiv, "collapsed")){
				//打开菜单以后，应该关闭之前打开的菜单
				//为了可以统一处理动画过渡效果，我们希望在这将addClass改为toggleClass
				//addClass(openDiv, "collapsed");
				//此处toggleClass不需要有移除的功能
				toggleClass(openDiv, "collapsed");
				
				//切换菜单的显示状态
				toggleMenu(openDiv);
				
			}
			
			//修改openDiv为当前打开的菜单
			openDiv = parentDiv;
		}
		
		
		/*
		 *	用来切换菜单和折叠显示状态
		 *
		function toggleMenu(obj){
			//在切换类之前，获取元素的高度
			var begin = obj.offsetHeight;
			
			//切换parentDiv的显示
			toggleClass(obj, "collapsed");
			
			//在切换类之后获取一个高度
			var end = obj.offsetHeight;
			
			//console.log("begin = "+begin+" , end = "+end);
			//动画效果就是将高度从begin向end过渡
			//将元素的高度重置为begin
			obj.style.height = begin + "px";
			
			//执行动画，从begin向end过渡
			move(obj, "height", end, 10, function(){
				//动画执行完毕，内联样式已经没有存在的意义了，删除之
				obj.style.height = "";
			});
		}
	</script>
	
一百四十，JSON
	/*
	 *	JSON
			-JS中的对象只有JS自己认识，其它的语言都不认识
			-JSON就是一个特殊格式的字符串，这个字符串可以被任意的语言所识别
				并且可以转换为任意语言中的对象，JSON在开发中主要用来数据的交互
			-JSON
				- JavaScript Object Notation  JS对象表示法
				- JSON和js对象的格式一样，只不过JSON字符串中的属性名必须加双引号
					其它的和js语法一致
				JSON分类：
					1，对象 {}
					2，数组 []
				JSON中允许的值：
					1，字符串
					2，数值
					3，布尔值
					4，null
					5，对象  (普通对象，不能是函数对象)
					6，数组
					
					
					
				var json = '{"name":"孙悟空", "age":18, "gender":"男"}';   //JSON对象
				var arr = '[1,2,3,"hello",true]';  //JSON数组
				
				var obj2 = '{"arr": [1,2,3]}';
				var arr2 = '[{"name":"孙悟空", "age":18, "gender":"男"},{"name":"孙悟空", "age":18, "gender":"男"}]';
				
				/*
				 *	将JSON字符串转换为JS中的对象
					在js中为我们提供了一个工具类就叫JSON
						这个工具类可以帮助我们将一个JSON转换为JS对象，也可以将一个js对象转换为JSON
						
						/*
						 * 	json --> js对象
								JSON.parse()
									-可以将JSON字符串转换为js对象
									-他需要一个JSON字符串作为参数，会将该字符串转换为js对象并返回
									
						var o = JSON.parse(json);
						var o2 = JSON.parse(arr);
						
						console.log(o.name); //孙悟空
						console.log(o2[1]); // 2
						
						//创建一个js对象
						var obj3 = {name:"猪八戒", age:18, gender:"男"};
						/*
						 * js对象 -- JSON
						 *  JSON.stringify()
								-可以将一个js对象转换为JSON字符串
								-需要一个js对象作为参数，会返回一个json字符串
						
						var str = JSON.stringify(obj3);
						console.log(str); //{"name":"猪八戒", "age":18, "gender":"男"}
						
						
						/*
						 *	JSON对象在IE7及以下的浏览器中不支持，所以在这些浏览器中调用时会报错
						 *		eval()
									-这个函数可以用来执行一段字符串形式的js代码，并将执行结果返回
									-如果使用eval()执行的字符串中含有{}，他会将{}当成是代码块
										如果不希望将其当成代码块解析，则需要在字符串前后各加一个()
										
								    -eval()这个函数的功能很强大，可以直接执行一个字符串中的js代码
										但是在开发中尽量不要使用，首先他的执行性能比较差，然后他还具有安全隐患
									
									-如果需要兼容IE7及以下的JSON操作，则可以通过引入一个外部的js文件来处理
										<script src="xx.js"></script>
										既然IE7中不支持，那么就自己写一个呗
									
									
						var str2 = "alert('hello')";
						eval(str2);
						
									
									
						 
						var str3 = '{"name":"孙悟空", "age":18, "gender":"男"}';   
						var obj = eval("("+str3+")");
						console.log(obj); //{name:"孙悟空", age:18, gender:"男"}
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						