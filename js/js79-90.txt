七十九，call和apply
	/*
	 *	call()和apply()
	 *		-这两个方法都是函数对象的方法，需要通过函数对象来调用
			-当对函数对象调用call()和apply()时，都会调用函数执行
			-在调用call()和apply()时，可以将一个对象指定为第一个参数
				此时这个对象将会成为函数执行时的this
			-call()方法可以将实参在对象之后依次传递
			-apply()方法需要将实参封装到一个数组中统一传递
			-this的情况：
				1，以函数形式调用时，this永远都是window
				2，以方法的形式调用时，this是调用方法的对象
				3，以构造函数形式调用时，this是新创建的那个对象
				4，使用call()和apply()调用时，this是指定的那个对象
				
					function fun(){						
						alert(this.name);
					}
					
					fun();
					fun.call();
					fun.apply();   //这三者结果是一样的
					
					var obj = {name: "obj"};
					
					fun(); //window
					fun.call(obj); //obj
					fun.apply(obj); //obj    call和apply都是用来指定函数中this的
					
					obj = {
						name: "obj",
						sayName: function(){
							alert(this.name);
						}
					}
					var obj2 = {name: "obj2"};	
					obj.sayName(); //obj
					obj.sayName.apply(obj2); //obj2
					
			二者区别：
			修改    function fun(a,b){
						console.log(a);
						console.log(b);
						alert(this.name);
					}
					fun.call(obj,2,3); //2 3 obj
					fun.apply(obj,[2,3]); //2 3 obj
					
八十，arguments
	/*
	 *	在调用函数时，浏览器每次都会传递进两个隐含的参数
	 *		1，函数的上下文对象this
	 *		2，封装实参的对象arguments
	 *			-arguments是一个类数组对象，它也可以通过索引来操作数据，也可以获取长度 (类数组：和数组很像，但不是数组)
				-在调用函数时，我们所传递的实参都会在arguments中保存
				-arguments.length可以用来获取实参的个数
				-即使不定义形参，也可以通过arguments来使用实参，只不过比较麻烦
					arguments[0] 表示第一个实参
					arguments[1] 表示第二个实参
				-它里边也有一个属性叫做callee，这个属性对应一个函数对象，就是当前正在执行的函数对象
					function fun(){
						console.log(arguments instanceof Array); //false
						console.log(Array.isArray(arguments)); //false
						//以上两种方法都可以用来检查一个对象是否是数组
						console.log(arguments.length);
						console.log(arguments[0]);
						console.log(arguments.callee); //当前函数对象
						console.log(arguments.callee == fun); //true
					}
					
八十一，Date对象
	在js中使用Date对象来表示一个时间
	//创建一个Date对象
	//如果直接使用构造函数创建一个Date对象，则会封装为当前代码执行的时间
	var d = new Date();
	console.log(d);
	
	//创建一个指定的时间对象
	//需要在构造函数中传递一个表示时间的字符串作为参数
	//日期格式：月/日/年 时:分:秒
	var d2 = new Date("12/03/2019 11:10:30");  //注意年份不要用两位数，以免有歧义
	console.log(d2);  
	
	/*
	 *	getDate()
	 *		-获取当前日期对象是几日
	 */
	var date = d2.getDate();
	console.log(date); //3
	
	/*
	 *	getDay()
	 *		-获取当前日期对象是周几
	 *		-会返回一个0-6的值
				0表示周日
				1表示周一
				 ...
				6表示周六
				var day = d2.getDay();
				console.log(day); 
				
	/*
	 *	getMonth()
	 *		-获取当前时间对象的月份
			-会返回一个0-11的值
				0表示一月
				1表示二月
				11表示十二月
				var day = d2.getMonth();
				console.log(day); 
	/*
	 *	getFullYear()
	 *		-获取当前日期对象的年份
	 *			var year = d2.getFullYear();
	 *			console.log(year);
	 */
	 
	/*
	 *	getTime()
	 *		-获取当前日期对象的时间戳
	 *		-时间戳，指的是从格林威治标准时间的1970年1月1日 0时0分0秒 到当前日期所花费的毫秒数(1秒 = 1000毫秒)
			-计算机底层在保存时间时使用的都是时间戳
				var d3 = new Date("1/1/1970 0:0:0");
				console.log(d3.getTime()); //-28800000 因为采用的是东八区时区，与格林威治标准差了8个小时
				
				//利用时间戳来测试代码执行的性能
				//获取当前的时间戳
				var time = Date.now();
				console.log(time);
				
				var start = Date.now();
				for(var i=0; i<100; i++){
					console.log(i);
				}
				var end = Date.now();
				console.log(end-start); //不如time timeEnd方便
				
八十二，Math
	-Math和其它的对象不同，它不是一个构造函数
		它属于一个工具类，不用创建对象，它里边封装了数学运算相关的属性和方法
	-比如
		Math.PI 表示圆周率
	
	/*
	 *	Math.abs(a) 可以用来计算一个数的绝对值
	 *		console.log(Math.abs(-15)); //15
	 
	/*
	 *	Math.ceil(a) 可以对一个数进行向上取整，小数位只要有值就自动进1
	 *		console.log(Math.ceil(1.1)); //2
			console.log(Math.ceil(1.0)); //1  注意
			
	/*
	 *	Math.floor(a) 可以对一个数进行向下取整，小数部分会被舍掉
	 *		它比parseInt()效率要高，但只能处理数值，无法处理诸如 "120px" 之类的字符串
			console.log(Math.floor(1.99)); //1
			
	/*
	 *	Math.round(a) 可以对一个数进行四舍五入取整
	 *		console.log(Math.round(1.5)); //2
	 
	/*
	 *	Math.random()
	 *		-可以用来生成一个0-1之间的随机数(不包括0和1)
			-生成一个0-10的随机数			
				Math.random()*10  //生成0-10之间的随机数，不包括0和10
				Math.round(Math.random()*10) //包括0和10
			-生成一个0-x之间的随机数
				Math.round(Math.random()*x)
				
			-生成一个1-10的随机数
				Math.round(Math.random()*y-x) + x
				
	/*
	 *	Math.max(a,b,...) 可以获取多个数中的最大值
	 *	Math.min(a,b,...) 可以获取多个数中的最小值
			var max = Math.max(10,45,32,100); //100
			var min = Math.min(10,45,32,100); //10
	
	/*	
	 *	Math.pow(x,y) 返回x的y次幂
			console.log(Math.pow(2,3)); //8
			
	/*
	 *	Math.sqrt(x) 对一个数进行开房运算
			console.log(Math.sqrt(9));
			
八十三，包装类
	在js中为我们提供了三个包装类，通过这三个包装类可以将基本数据类型的数据转换为对象
		String()
			-可以将基本数据类型字符串转换为String对象
		Number()
			-可以将基本数据类型的数值转换为Number对象
		Boolean()
			-可以将基本数据类型的布尔值转换为Boolean对象
		但是注意我们在实际应用中不会使用基本数据类型的对象
			如果使用基本数据类型的对象，在做一些比较时可能会带来一些不可预期的结果
			
				//创建一个Number,String,Boolean类型的对象
				var num = new Number(3);
				var str = new String("hello");
				var bool = new Boolean(false);
				
				console.log(num); //3 
				console.log(typeof num); //object
				
				//向str中添加一个属性
				str.name = "Jack";
				console.log(str.name); //Jack
				
				//两个相同类型、值的对象进行判断
				var bool2 = new Boolean(false);
				console.log(bool == bool2); //false
				或
				if(bool2){
					alert();   //不管bool2的值的true还是false，都会执行，因为对象转布尔永远都是true
				}
				
		/*
		 *	方法和属性只能添加给对象，不能添加给基本数据类型，当我们对一些基本数据类型的值去调用属性和方法时
		 *		浏览器会临时使用包装类将其转换为对象，然后再调用对象的属性和方法
		 *		调用完以后，再将其转换为基本数据类型
		 */
					var s = "hello";
					s.name = "test";
					console.log(s.name); //undefined
					先将s临时转换为对象，向该对象添加name属性并赋值，之后销毁该对象
					在读取name属性的时候，又一次将s临时转换为对象，但前后两次转换的不是同一个对象，这次的对象里没有name属性
					所以返回undefined
					
八十四，字符串的方法
	var str = "hello";
	/*
	 *	在底层字符串是以字符数组的形式保存的
	 *	["h","e","l","l","o"]
			console.log(str[0]); //h
	 
	/*
	 *	length 属性
			-可以用来获取字符串的长度
				console.log(str.length); //5
	
	/*
	 *	charAt()
			-可以返回字符串中指定位置的字符
			-根据索引获取指定的字符
				console.log(str.charAt(0)); //h
				//如果给定的索引大于字符串最大索引，则返回一个空串
				console.log(str.charAt(5)); //
	/*
	 *	charCodeAt()
			-获取指定位置字符的字符编码(Unicode编码)
				console.log(str.charCodeAt(0)); //104
				
	/*
	 *	String.fromCharCode()
			-可以根据字符编码去获取字符
				console.log(String.fromCharCode(104)); //h  如果要表示十六进制，则加上ox
				
	/*
	 *	concat()
			-可以用来连接两个或多个字符串
			-作用和 + 一样
			-不会影响原字符串
				var result = str.concat("Tom","Jack");
				console.log(result); //helloTomJack
				
	/*
	 *	indexOf()
			-该方法可以检索一个字符串中是否含有指定内容
			-如果字符串中含有该内容，则会返回其第一次出现的索引
				如果没有找到指定的内容，则返回-1
			-可以指定第二个参数，表示开始查找的位置
				console.log(str.indexOf("h",1)); //-1
				
	/*
	 *	lastIndexOf()
			-该方法的用法和indexOf()一样
				不同的是indexOf()是从前往后找，而lastIndexOf()是从后往前找
			-也可以指定开始查找的位置
				//表示从索引为2的位置开始，从后往前找字母l，因为2的位置正好就是l，所以返回2
				console.log(str.lastIndexOf("l",2)); //2
				
	/*
	 *	slice()
			-可以从字符串中截取指定的内容
			-不会影响原字符串
			-参数
				第一个，开始位置的索引(包括开始位置)
				第二个，结束位置的索引(不包括结束位置)
					如果省略第二个参数，则会截取到后边所有的
				也可以传递一个负数作为参数，负数的话将会从后边计算
					console.log(str.slice(0,2)); //he
					console.log(str.slice(1,-1)); //ell
					
	/*
	 *	substring()
			-可以用来截取一个字符串，和slice()类似
			-参数
				第一个，开始位置的索引(包括开始位置)
				第二个，结束位置的索引(不包括结束位置)
					如果省略第二个参数，则会截取到后边所有的
				不同的是这个方法不能接收负值作为参数
					如果传递了一个负值，则默认使用0
					而且他会自动调整参数的位置，如果第二个参数小于第一个，则自动交换位置
						console.log(str.substring(0,2)); //he
						str.substring(1,-1) == (1,0) == (0,1)  //h   此时第一个参数反而变成了结束位置
						
	/*
	 *	substr()
			-用来截取字符串
			-参数
				1，开始位置的索引
				2，截取的长度
					console.log(str.substr(0,2)); //he
					
	/*
	 *	split()
			-可以将一个字符串拆分为一个数组
			-不会影响原字符串
			-参数
				-需要一个字符串作为参数，将会根据该字符串去拆分数组
				-如果传递一个空串作为参数，则会将每个字符都拆分为数组中的一个元素
					console.log(str.split("")); //["h","e","l","l","o"]
					str = "abc,edf,bcd";
					console.log(str.split(",")); //["abc","edf","bcd"]
					str = "abcdefg";
					console.log(str.split("d")); //["abc","efg"] 根据d拆分，数组里就不会包含d
					
	/*
	 *	toUpperCase() 将一个字符串转为大写  
	 *		console.log(str.toUpperCase()); //HELLO
	 *
	 *	toLowerCase() 讲一个字符串转为小写
	 *		console.log(str.toLowerCase()); //hello
	 *
	 *	以上两种方法都不会影响原字符串
	 

八十五，正则表达式的简介
	-正则表达式用于定义一些字符串的规则
		计算机可以根据正则表达式来检查一个字符串是否符合规则
		将字符串中符合规则的内容提取出来
		
	/*
	 *	创建正则表达式的对象
	 *	语法：
	 *		var 变量 = new RegExp("正则表达式","匹配模式");
		使用typeof检查正则对象，会返回object		
		在构造函数中可以传递一个匹配模式作为第二个参数
			可以是：
				i 忽略大小写
				g 全局匹配模式
					//这个正则表达式可以来检查一个字符串中是否含有a
						var reg = new RegExp("a");
						var str = "abcA";
						console.log(reg.test(str)); //true 如果你没有写^$，只要字符串中含有a，都会返回true
						
八十六，正则语法
	/*
	 *	使用字面量来创建正则表达式
	 *		语法：
				var 变量 = /正则表达式/匹配模式
		使用字面量的方式创建更加简单
			使用构造函数创建更加灵活
				//var reg = new RegExp("a","i");
				var reg = /a/i;
				console.log(reg.test("abc")); //true
				
		//创建一个正则表达式，检查一个字符串是否含有a或b
		//使用 | 表示或者的意思
		reg = /a|b|c/;
		console.log(reg.test("aefg")); //true
		
		/*
		 *	创建一个正则表达式检查一个字符串中是否含有字母
		 *	[]里的内容也是或的关系
		 *	[ab] == a|b
		 *	[a-z] 任意小写字母
		 *	[A-Z] 任意大写字母
		 *	[A-z] 任意字母
		 *	[0-9] 任意数字
		 */
		reg = /[A-z]/;
		console.log(reg.test("c")); //含有任意字母即返回true
		
		//检查一个字符串中是否含有abc或adc或aec
		//reg = /abc|adc|aec/;
		reg = /a[bde]c/;
		console.log(reg.test("ssabcss")); //true
		
		/*
		 *	[^] 除了
		 */
		reg = /[^ab]/;
		console.log(reg.test("a")); //false
		console.log(reg.test("abc")); //true 只要含有非a或b的，就会返回true
		
八十七，字符串和正则相关的方法
	var str = "1a2b3c4d5e6d7A8B9C";
	/*
	 *	split()
	 *		-可以将一个字符串拆分为一个数组
			-方法中可以传递一个正则表达式作为参数
				这样方法将会根据正则表达式去拆分字符串
			-这个方法即使不指定全局匹配，也会全都拆分
		
		//根据任意字母来将字符串拆分
		console.log(str.split(/[A-z]/)); //["1","2","3","4","5",...]
		
	/*
	 *	search()
	 *		-可以搜索字符串中是否含有指定内容	
			-如果搜索到指定内容，则会返回其第一次出现的索引
				如果没有搜索到，返回-1
			-它可以接收一个正则表达式作为参数
				然后会根据正则表达式去检索字符串
			-search()只会查找第一个，即使设置了全局匹配也没用
				
				//搜索字符串中是否含有abc或aec或afc
				str = "hello abc edf";
				console.log(str.search(/a[bef]c/)); //6
				
	/*
	 *	match()
	 *		-可以根据正则表达式，从一个字符串中将符合条件的内容提取出来
	 *		-默认情况下我们的match()只会找到第一个符合要求的内容，找到以后就停止检索
				我们可以设置正则表达式为全局匹配模式，这样就会匹配到所有的内容
				可以为一个正则表达式设置多个匹配模式，且顺序无所谓
			-match()会将匹配到的内容封装到一个数组中返回，即使只查询到一个结果
					console.log(str.match(/[a-z]/ig)); //["a","b","c",...]
					
	/*
	 *	replace()
			-可以将字符串中指定内容替换为新的内容
			-参数
				第一个参数，被替换的内容。可以接收一个正则表达式作为参数
				第二个参数，新的内容
			-默认只会替换第一个
				console.log(str.replace(/[a-z]/ig,"@")); //1@2@3@....
				console.log(str.replace(/[a-z]/ig,"")); //123456... 将所有字母替换为空串
				
八十八，正则表达式语法
	/*
	 *	创建一个正则表达式检查一个字符串中是否含有aaa
	 *
	 *	量词
	 *		-通过量词可以设置一个内容出现的次数
	 *		-量词只对他前边出现的一个内容起作用
	 *		-{n} 正好出现n次
			-{m,n} 出现m-n次
			-{m,} m次以上
			- + 至少一个，相当于{1,}
			- * 0个或多个，相当于{0,}
			- ? 0个或1个，相当于{0,1}
				var reg = /a{3}/;
				reg = /(ab){3}/;
				reg = /ab{1,3}c/;
				
	/*
	 *	检查一个字符串是否以a开头
	 *	^ 表示开头
	 *  $ 表示结尾
			reg = /^a/; //匹配开头的a
			reg = /a$/; //匹配结尾的a
			console.log(reg.test("bca")); //true
			
	/*
	 *	如果在正则表达式中同时使用^$，则要求字符串必须完全符合正则表达式
	 */
	reg = /^a$/; //以a开头，并且以a结尾，符合规则的只有一个字符串 "a"
	reg = /^a|a$/; //以a开头或者以a结尾，abc或bca等等都可以
	
	
	/*
	 *	创建一个正则表达式，用来检查一个字符串是否是一个合法手机号
	 *	手机号的规则
	 *			11位
			1，以1开头
			2，第二位3-9任意数字
			3，三位以后任意数字9个
			^1	[3-9]	[0-9]{9}$
			
			var phoneStr = "13912345678";
			var phoneReg = /^1[3-9][0-9]{9}$/;
			console.log(phoneReg.test(phoneStr));
			
八十九，正则表达式语法(二)
	/*
	 *	检查一个字符串是否含有 .
	 *	. 表示任意字符
	 *	在正则表达式中使用 \ 作为转义字符
		\. 表示 .
		\\ 表示 \
		注意：使用构造函数时，由于它的参数是一个字符串，如果你要匹配字符串中的一个\，则需要在字符串中对它进行转义 \\
				reg = /\./;
				reg = /\\/;
				console.log(reg.test("b.\\")); //字符串中含有\，所以返回true
				
	/*
	 *	\w 任意字母、数字、下划线_   [A-z0-9_]
	 *	\W 除了字母、数字、下划线_   [^A-z0-9_]
	 *	\d 任意的数字 [0-9]
	 *	\D 除了数字 [^0-9]
	 *	\s 空格 
	 *	\s 除了空格
	 *	\b 单词边界
	 *	\B 除了单词边界
	 */
	//创建一个正则表达式检查一个字符串中是否含有单词child
	reg = /\bchild\b/;
	console.log(reg.test("hello child")); //true
	console.log(reg.test("hellochild")); //false
	
	/*
	 *	去掉字符串前后的空格
	 *	去除空格就是用""来替换空格
	 *	/^\s*|\s*$/g 匹配开头和结尾的空格
	 */
	var str = "    he  llo     ";
	console.log(str.replace(/\s/g,""));  //hello
	
	console.log(str.replace(/^\s*|\s*$/g,"")); //he  llo
	
九十，邮件的正则
	/*
	 *	电子邮件
	 *	hello .nihao  @abc  .com  .cn
	 *	任意字母数字下划线  .任意字母数字下划线  @ 任意字母数字 .任意字母数字(2-5位) .任意字母数字(2-5位)
	 *	\w{3,} (\.\w+)* @ [A-z0-9]+ (\.[A-z]{2,5}){1,2}
	 *
	 *	var emailReg = /\w{3,}(\.\w+)*@[A-z0-9]+(\.[A-z]{2,5}){1,2}/;
	 *	var str = "abc@abc.com.cn";
	 *	console.log(emailReg.test(str)); //true
	 */
	 

		
		
	