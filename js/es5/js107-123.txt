一百零七，操作内联样式
	/*
	 *	通过js修改元素的样式
		语法：元素.style.样式名 = 样式值
		注意：如果css样式名中含有 - 这种名称，在js中是不合法的
			比如background-color，需要将这种样式名修改为驼峰命名法。去掉-，将-后的字母大写
				div.style.width = "120px";
				div.style.backgroundColor = "blue";
				div.style.borderTopWidth = "10px";
		我们通过style属性设置的样式都是内联样式，而内联样式有较高的优先级，所以通过js修改的样式往往会立即显示
		但是如果在样式中写了!important，则此时样式会有最高的优先级
			即使通过js也不能覆盖该样式，此时会导致js修改样式失效。所以尽量不要为样式添加!important
			
		/*
		 *	通过js读取元素的样式
			语法：元素.style.样式名
			通过style属性设置和读取的都是内联样式(如果没有设置内联样式，读取到的为空串)，是无法读取样式表中的样式的
				console.log(div.style.left); //100px
			
一百零八，获取元素的样式
	/*
	 *	获取元素当前显示的样式
	 *	语法：元素.currentStyle.样式名
			它可以用来读取当前元素正在显示的样式
			如果当前元素没有设置样式，则获取到的是默认值
			
		currentStyle只有IE浏览器支持，其它浏览器都不支持
		
			alert(div.currentStyle.backgroundColor); //yellow
			alert(div.currentStyle.width); //auto  没有设置width的情况下返回其默认值auto
			
	/*
	 *	在其它浏览器中可以使用 getComputedStyle() 这个方法来获取元素当前的样式
			这个方法是window的方法，可以直接使用
		需要两个参数：
			第一个，要获取样式的元素
			第二个，可以传递一个伪元素，一般都传null
		该方法会返回一个对象，对象中封装了当前元素对应的样式
			可以通过 对象.样式名 来读取样式
			如果获取的样式没有设置，则会获取到真实的值，而不是默认值
				比如：没有设置width，它不会获取到auto，而是一个长度值
		但是该方法不支持IE8及以下的浏览器												
		通过currentStyle和getComputedStyle()读取到的样式都是只读的，不能修改。如果要修改必须通过style属性
				alert(getComputedStyle(div, null).backgroundColor); //rgb(0,0,0) 会返回一个rgb值
				alert(getComputedStyle(div, null).width); //1200px  没有设置width情况下
					
			
			
			
			
			
一百零九，自定义的getStyle()
	/*
	 *	参数：
			obj 要获取样式的元素
			name 要获取的样式名
		function getStyle(obj, name){
			if(window.getComputedStyle){    //此处必须要加window
				//谷歌、火狐等浏览器的方式
				return getComputedStyle(obj, null)[name];
			}else{
				//IE8及以下的方式
				return obj.currentStyle[name];
			}
		}
		或
		if(obj.currentStyle){   //这种方式对于IE9来说是优先使用currentStyle，最好还是优先使用getComputedStyle，所以不推荐
		
		}else{
		
		}
		或 
		return window.getComputedStyle ? getComputedStyle(div, null)[name] : div.currentStyle[name];
		
一百一，其它样式相关的属性
	/*
	 *	clientWidth
		clientHeight      													content + padding
			-这两个属性可以获取元素的可见宽度和高度
			-这些属性都是不带px的，返回的都是一个数字，可以直接进行计算
			-会获取元素高度和宽度，包括内容区和内边距，不包括边框
			-这些属性都是只读的，不能修改
				alert(div.clientWidth); //120
				
	/*
	 *	offsetWidth
		offsetHeight														content+padding+border
			-获取元素整个的宽度和高度，包括内容区、内边距和边框
			-就是多了一个边框，其它和上边没有区别
				alert(div.offsetWidth); //140
				
	/*
	 *	offsetParent
			-可以用来获取当前元素的定位父元素
			-会获取到离当前元素最近的开启了定位的祖先元素
				如果所有的祖先元素都没有开启定位，则返回body
					var op = div.offsetParent;
					alert(op.id);
					
	/*
	 *	offsetLeft			
		offsetTop
			-当前元素相对于其定位父元素的水平/垂直偏移量
				alert(div.offsetLeft); //120
				
	/*
	 *	scrollWidth
		scrollHeight
			-可以获取元素整个滚动区域的宽度/高度
				假设div4的width为300px，它的子元素div5的width为600px，div4设置overflow:scroll
					那么此时div4的scrollWidth为600px，高度亦如此
					
	/*
	 *	scrollLeft
		scrollTop
			-可以获取水平/垂直滚动条滚动的距离
				//因为div5溢出其父元素，导致父元素出现滚动条，所以滚动条应该是相对于div4的
				alert(div4.scrollLeft); 
		
		//当满足 scrollHeight - scrollTop == clientHeight 
		//说明垂直滚动条滚动到底了   宽度亦如此
		
		
	<p id="info">协议...</p>
	<input type="checkBox" disabled="disabled" />我已仔细阅读协议
	<input type="button" value="注册" disabled="disabled" />
	
	#info{
		width: 300px;
		height: 500px;
		background-color: #bfa;
		overflow: auto;
	}
	
	<script>
		window.onload = function(){
			/*
			 *	当垂直滚动条滚动到底时表单项可用
			 *	onscroll
			 *		-该事件会在元素的滚动条滚动时触发
			 */
			 
			//获取id为info的p元素
			var info = document.getElementById("info");
			//获取两个表单项
			var inputs = document.getElementsByTagName("input");
			
			//为info绑定一个滚动条滚动的事件
			info.onscroll = function(){
				//检查垂直滚动条是否滚动到底
				if(info.scrollHeight - info.scrollTop == info.clientHeight){
					/*
					 *	滚动条滚动到底，使表单项可用
					 *	disabled属性可以设置一个元素是否禁用
					 *		如果设置为true，则元素禁用
					 *		如果设置为false，则元素可用
					 */
					inputs[0].disabled = false;
					inputs[1].disabled = false;
				}
			}
		}
	</script>
	

一百一十一，事件对象
	<div id="areaDiv"></div>
	<div id="showMsg"></div>
	
	<script>
		/*
		 *	当鼠标在areaDiv中移动时，在showMsg中显示鼠标的坐标
		 *	onmousemove
		 *		-鼠标在元素中移动时会触发该事件
		 */
		//获取两个div
		var areaDiv = document.getElementById("areaDiv");
		var showMsg = document.getElementById("showMsg");
		areaDiv.onmousemove = function(event){
			/*
			 *	事件对象
					-当事件的响应函数被触发时，浏览器每次都会将一个事件对象作为实参传递进响应函数
						在事件对象中封装了与当前事件相关的一切信息
						比如：鼠标的坐标、键盘按键被按下、鼠标滚轮滚动...
					但是在IE8中，响应函数被触发时，浏览器不会传递事件对象
						在IE8及以下的浏览器中，是将事件对象作为window对象的属性保存的
							window.event 兼容IE和谷歌 不兼容火狐
							event 兼容谷歌和火狐 不兼容IE8
							
			//解决事件对象的兼容性问题
			//if(!event){
				//event = window.event;
			//}
			//或
			event = event || window.event;
			
			/*
			 *	clientX 
			 *	clientY
			 *		-可以获取鼠标指针的水平/垂直坐标
			 */		
			var x = event.clientX;
			var y = event.clientY;
			showMsg.innerHTML = "x: "+x+"      y: "+y;						 
		}
	</script>
	
一百一十二，div跟随鼠标移动
	<div id="box4"></div>
	
	#box4{
		width: 100px;
		height: 100px;
		background-color: red;
		position: absolute;  /* 如果不写position的话，那么js中设置left和top都是无效的 */
	}
	
	<script>
		window.onload = function(){
			var box4 = document.getElementById("box4");
			//绑定鼠标移动事件
			document.onmousemove = function(event){
				//解决事件对象的兼容性问题
				event = event || window.event;
				//获取鼠标的坐标
				var left = event.clientX;
				var top = event.clientY;
				//设置div的偏移量
				box4.style.left = left + "px";
				box4.style.top = top + "px";
			}
		}
		/*
		 *	此时执行代码看起来一切正常，但是当我把box4的body的高度改为1000px时，会出现鼠标与div分离的情况
		 *  
		 *	clientX和clientY
		 *		用于获取鼠标在当前的可见窗口的坐标
		 *	而div的偏移量是相对于整个页面的
		 *	
		 *	pageX和pageY可以获取鼠标相对于当前页面的坐标
		 *		var left = event.pageX;
		 *		var top = event.pageY;
		 *	但是这两个属性在IE8中不支持，所以如果需要兼容IE8，则不要使用
		 */
		
		/*
		 *	经过验证，chrome,firefox,IE滚动条都是相对于其父元素的，如果高度超过了当前页面，则滚动条都是相对于html的
		 *		var st = document.documentElement.scrollTop;
		 *		box4.style.left = left + "px";
		 *		box4.style.top = top + st + "px";
		 */
		
	</script>
	
	
	
	
	
	
	
	
		/*  (前提是我给body加了1000px的height)                                  (这段文字先持保留意见)
		 *	chrome认为浏览器的滚动条是body的，可以通过body.scrollTop来获取
		 *		var st = document.body.scrollTop;  在谷歌好使，IE8、火狐都是0
		 *		body的高度是1000px，是它的父元素容不下它，才出现的滚动条。所以道理来讲，滚动条不应该是body的，
		 *		而应该是body的父元素html的
		 *	火狐、IE浏览器认为浏览器的滚动条是html的
		 *		var st = document.documentElement.scrollTop;
		 *	可以这样改
		 *		把上边
		 *			box4.style.left = left + "px";
		 *			box4.style.top = top + "px";
		 *		改为
		 *			var st = document.body.scrollTop || document.documentElement.scrollTop;  //做兼容性处理
		 *			var sl = document.body.scrollLeft || document.documentElement.scrollLeft;  //做兼容性处理
		 *			box4.style.left = left + sl + "px";
		 *			box4.style.top = top + st + "px";
		 */
	
	
	
	
	
一百一十三，事件的冒泡
	/*
	 *	事件的冒泡(Bubble)
			-所谓的冒泡指的就是事件的向上传导
				当后代元素上的事件被触发时，其祖先元素的相同事件也会被触发
			-在开发中大部分情况冒泡都是有用的
				如果不希望发生事件冒泡，可以通过事件对象来取消冒泡
				
	<div id="box1">
		我是box1
		<span id="s1">我是span</span>
	</div>
	
	#box1{
		width: 200px;
		height: 200px;
		background-color: red;
	}
	#s1{
		background-color: yellow;
	}
	
	<script>
		window.onload = function(){
			var s1 = document.getElementById("s1");
			s1.onclick = function(event){
				event = event || window.event;
				alert("我是span的单击响应函数");
				/*
				 *	取消冒泡
				 *	可以将事件对象的cancelBubble设置为true，即可取消冒泡 
				 */
				event.cancelBubble = true;
			};
			
			var box1 = document.getElementById("box1");
			box1.onclick = function(event){
				event = event || window.event;
				alert("我是div的单击响应函数");
				event.cancelBubble = true;
			};
			
			document.body.onclick = function(){
				alert("我是body的单击响应函数");
			}
			
		}
	</script>
	
一百一十四，事件的委派
	<button id="btn01">添加超链接</button>
	<ul id="ul">
		<li><a href="javascript:;">超链接一</a></li>
		<li><a href="javascript:;">超链接二</a></li>
		<li><a href="javascript:;">超链接三</a></li>
	</ul>

	<script>
		window.onload = function(){
			var ul = document.getElementById("ul");
			//点击按钮以后添加超链接
			var btn01 = document.getElementById("btn01");
			btn01.onclick = function(){
				var li = document.createElement("li");
				li.innerHTML = "<a href='javascript:;'>新的超链接</a>";
				ul.appendChild(li);
			}
			
			/*	这里我们为每一个超链接都绑定了一个单击响应函数，这种操作比较麻烦
			 *		而且这些操作只能为已有的超链接设置事件，而新添加的超链接必须重新绑定
			 */
			var allA = document.getElementsByTagName("a");
			//for(var i=0; i<allA.length; i++){
				//allA[i].onclick = function(){
					//alert("我是a的单击响应函数");
				//}
			//}
			
			/*
			 *	我们希望只绑定一次，即可应用到多个元素上，即使元素是后添加的
			 *	我们可以尝试将其绑定给元素的共同的祖先元素
			 *	
			 *	事件委派
			 *		-指将事件统一绑定给元素的共同的祖先元素
			 *			这样当后代元素上的事件被触发时，会一直冒泡到祖先元素
			 *			从而通过祖先元素的响应函数来处理事件
			 *		-事件委派是利用了冒泡，通过委派可以减少事件绑定的次数，提高程序的性能
			 */
			//为ul绑定一个单击响应函数
			ul.onclick = function(event){
				event = event || window.event;
				/*
				 *	target
				 *		-event中的target表示的是触发事件的对象
				 *		-不支持IE8及以下浏览器
				 *			在IE8中可以使用event.srcElement来获取触发事件的对象
				 *
				 *	这里的this指的是，给谁绑定的函数，this就是谁。。而不是谁触发this就是谁
				 */
				//做event.target的兼容性处理
				event.target = event.target || event.srcElement;
				 
				//如果触发事件的对象是我们期望的元素则执行，否则不执行
				if(event.target.className == "link"){  
					alert("我是a的单击响应函数");
				}
				//此处有点问题，如果 class="link link2" 的话，是不会返回true的
			}
			
		}
	</script>
	
一百一十五，六，事件的绑定
	<button id="btn01">点我一下</button>
	<script>
		window.onload = function(){
		    /*
			 *	使用对象.事件 = 函数 的形式绑定响应函数
			 *	它只能同时为一个元素的一个事件绑定一个响应函数
			 *	不能绑定多个，如果绑定了多个，则后边会覆盖掉前边的
			 */
			//btn01.onclick = function(){
				//alert(1);
			//}
			//btn01.onclick = function(){
				//alert(1);
			//}
			
			/*
			 *	addEventListener()
			 *		-通过这个方法也可以为元素绑定响应函数
			 *		-参数：
			 *			1，事件的字符串，不要on
			 *			2，回调函数，当事件触发时，该函数会被调用
			 *			3，是否在捕获阶段触发事件，需要一个布尔值，一般都传false
			 *			
			 *		-使用addEventListener()可以同时为一个元素的相同事件同时绑定多个响应函数
		 	 *			这样当事件被触发时，响应函数将会按照函数的绑定顺序执行
			 *		-这个方法不支持IE8及以下的浏览器
			 */
			
			/*
			 *	attachEvent()
			 *		-在IE8中可以使用attachEvent()来绑定响应函数
			 *		-参数：
			 *			1，事件的字符串，要on
			 *			2，回调函数
			 *		-该方法也可以同时为一个事件绑定多个响应函数
			 *			不同的是它是后绑定先执行，执行顺序和addEventListener()正好相反
			 *		-从IE11开始就不再支持attachEvent()了
			 */
			 
						//兼容谷歌和火狐，不兼容IE8
						btn01.addEventListener("click", function(){
							alert(this); 								//btn01
						}, false);
						btn01.addEventListener("click", function(){
							alert(2);
						}, false);
						...
						
						//支持IE8及以下
						btn01.attachEvent("onclick", function(){
							alert(this);								//window
						});
						btn01.attachEvent("onclick", function(){
							alert(2);
						});
						...
						
						//addEventListener()中的this，是绑定事件的对象
						//attachEvent()中的this，是window
						 
						 
			/*
			 *	做兼容性处理，定义一个函数，用来为指定元素绑定响应函数
			 *	参数：
			 *		obj 要绑定事件的对象
			 *		eventStr 事件的字符串(不要on)
			 *		callback 回调函数
			 */
			function bind(obj, eventStr, callback){
				if(obj.addEventListener){
					//大部分浏览器兼容的方式
					obj.addEventListener(eventStr, callback, false);
				}else{
					//IE8及以下
					//obj.attachEvent("on"+eventStr, callback);
					
					/*
					 *	把this统一为obj
					 *		this是谁由调用方式决定
					 *		callback.call(obj); 如果你直接传callback.call(obj),那你传的就不是函数对象，而是函数返回值了
					 
					 
					 *	但此时，callback是由浏览器调用，所以我们无法改变其this指向
					 *	可以改为
					 */
					obj.attachEvent("on"+eventStr, function(){
						//在匿名函数中调用回调函数
						//此时浏览器调用的是匿名函数，而callback由我们来调用
						callback.call(obj);
					})
					 
				}
			}
			//调用
			bind(btn01, "click", function(){alert(this);});																
		}
	</script>
				
	
一百一十七，事件的传播
	<div id="box1">
		<div id="box2">
			<div id="box3"></div>			
		</div>
	</div>
	
	#box1{
		width: 300px;
		height: 300px;
		background-color: yellowgreen;
	}
	#box2{
		width: 200px;
		height: 200px;
		background-color: yellow;
	}
	#box3{
		width: 150px;
		height: 150px;
		background-color: skyblue;
	}
	
	<script>
		//分别为三个div绑定单击响应函数
		var box1 = document.getElementById("box1");
		var box2 = document.getElementById("box2");
		var box3 = document.getElementById("box3");
		function bind(obj, eventStr, callback){
			if(obj.addEventListener){
				obj.addEventListener(eventStr, callback, true);
			}else{
				obj.attachEvent("on"+eventStr, function(){callback.call(obj)});
			}
		}
		bind(obj, "click", function(){alert("1"+this)});
		bind(obj, "click", function(){alert("2"+this)});
		
		/*
		 *	事件的传播
		 *		-关于事件的传播网景公司和微软公司有不同的理解
		 *		-微软公司认为事件应该是由内向外传播，也就是当事件触发时，应该先触发当前元素上的响应函数
		 *			然后再向当前元素的祖先元素上传播，也就是说事件应该在冒泡阶段执行
		 *		-网景公司认为事件应该是由外向内传播的，也就是当事件触发时，应该先触发当前元素最外层的祖先元素的事件
		 *			然后再向内传播给后代元素
		 *		-W3C综合了两个公司的方案，将事件传播分成了三个阶段
		 * 			1，捕获阶段
		 *				-在捕获阶段时从最外层的祖先元素，向目标元素进行事件的捕获，但是默认此时不会触发事件
		 *			2，目标阶段
		 *				-事件捕获到目标元素，捕获结束后开始在目标元素上触发事件
		 *			3，冒泡阶段
		 *				-事件从目标元素向他的祖先元素传递，依次触发祖先元素上的事件
		 *		-如果希望在捕获阶段就触发事件，可以将addEventListener()的第三个参数设置为true
		 *			一般情况下我们不会希望在捕获阶段触发事件，所以这个参数一般都是false
		 *		-IE8及以下的浏览器没有捕获阶段
		 *					
	</script>
	
一百一十八，九，十，拖拽
	<div id="box1"></div>
	<div id="box2"></div>
	#box1{
		width: 100px;
		height: 100px;
		background-color: red;
		position: absolute;
	}
	#box2{
		width: 200px;
		height: 200px;
		background-color: blue;
		position: absolute;
		top: 200px;
		left: 200px;
	}
	<script>
		/*
		 *	拖拽元素
		 *		-拖拽的流程
		 *			1，当鼠标在被拖拽元素上按下时，开始拖拽 onmousedown
					2，当鼠标移动时被拖拽元素跟随鼠标移动 onmousemove
					3，当鼠标松开时，被拖拽元素固定在当前位置 onmouseup
					
			var box1 = document.getElementById("box1");
			box1.onmousedown = function(event){
				//设置box1捕获所有鼠标按下的事件
				box1.setCapture();
				event = event || window.event;
				//box1的水平偏移量
				var ol = event.clientX - box1.offsetLeft;
				//box1的垂直偏移量
				var ot = event.clientY - box1.offsetTop;
				document.onmousemove = function(event){
					event = event || window.event;
					//获取鼠标的坐标
					var left = event.clientX - ol;
					var top = event.clientY - ot;
					//修改box1的位置
					box1.style.left = left + "px";
					box1.style.top = left + "px";
				}
				document.onmouseup = function(){
					//取消document的onmousemove事件
					document.onmousemove = null;
					//取消document的onmouseup事件，不取消的话在其它处松开鼠标依然会弹出123
					//alert(123);
					document.onmouseup = null;
				}
				/*
				 *	当我们拖拽一个网页中的内容时，浏览器会默认去搜索引擎中搜索内容
						此时会导致拖拽功能的异常，这个是浏览器提供的默认行为
						如果不希望发生这个行为，则可以通过return false来取消默认行为
						但是这招对IE8不起作用
			}
	</script>
	
	
	<button id="btn01"></button>
	<button id="btn02"></button>
	<script>
		var btn01 = document.getElementById("btn01");
		var btn02 = document.getElementById("btn02");
		btn01.onclick = function(){
			alert(1);
		}
		btn02.onclick = function(){
			alert(2);
		}
		/*
		 *	设置btn01对鼠标按下相关的事件进行捕获
		 *	当调用一个元素的setCapture()方法以后，这个元素会把下一次所有的鼠标按下相关的事件捕获到自身上
		btn01.setCapture();
	</script>
	
一百二十一，滚轮的事件
	<div id="box1"></div>
	#box1{
		width: 200px;
		height: 200px;
		background-color: red;
	}
	<script>
		/*
		 *	当鼠标滚轮向下滚动时，box1变长
			当鼠标滚轮向上滚动时，box1变短
		var box1 = document.getElementById("box1");
		/*
		 *	为box1绑定一个鼠标滚轮滚动事件
			onmousewheel 鼠标滚轮滚动的事件，会在滚轮滚动时触发
			但是火狐不支持该属性
			
			在火狐中使用 DOMMouseScroll 来绑定滚动事件
				注意该事件需要通过addEventListener()函数来绑定
		
		box1.onmousewheel = function(event){
			event = event || window.event;
			//event.wheelDelta可以获取鼠标滚动的方向
			//向上滚 120  向下滚 -120
			//wheelDelta 这个值我们不看大小，只看正负
			//wheelDelta这个属性火狐中不支持
			//在火狐中使用event.detail来获取滚动的方向
			//向上滚 -3 向下滚 3
			if(event.wheelDelta > 0 || event.detail < 0){
				//向上滚，box1变短
				box1.style.height = box1.clientHeight - 10 + "px";
			}else{
				//向下滚，box1变长
				box1.style.height = box1.clientHeight + 10 + "px";
			}
			/*
			 *	当滚轮滚动时，如果浏览器有滚动条，滚动条会随之滚动
			 *	这是浏览器的默认行为，如果不希望发生，则可以通过 return false; 取消默认行为
			 */
			
			/*
			 *	使用addEventListener()方法绑定响应函数，取消默认行为时不能使用return false;
			 *	需要使用event来取消默认行为
			 *		event.preventDefault();
			 *	但是IE8不支持event.preventDefault()，如果直接调用会报错
			 */
					event.preventDefault && event.preventDefault();
					return false;		
		}
		bind(box1, "DOMMouseScroll", box1.onmousewheel);
		/*
		 *	box1.addEventListener("osdjifs",function(){},false);
		 *	box1.attachEvent("onlsjdife",function(){});
		 *	box1.onlcjis= function(){}
		 *	可以为元素胡乱绑定随便什么事件，浏览器是不会报错的(其实就是给对象赋值，属性名写什么都行)
		 *  所以这也是在IE8中为box1绑定了onDOMMouseScroll事件，浏览器不会报错的原因
        
	</script>
	
一百二十二，键盘事件
	/*
	 *	键盘事件
			onkeydown
				-按键被按下
				-对于onkeydown来说，如果一直按着某个按键不松手，则事件会一直触发
				-当onkeydown连续触发时，第一次和第二次的间隔会稍微长一点，其它会非常的快
					这种设计是为了防止误操作的发生
			onkeyup
				-按键被松开
				-不会连续触发
				
		/*
		 *	键盘事件一般都会绑定给一些可以获取到焦点的对象或者是document
		document.onkeydown = function(event){
			/*
			 *	可以通过keyCode来获取按键的编码
				通过它可以判断哪个按键被按下
				除了keyCode，事件对象中还提供了几个属性
					altKey
					ctrlKey
					shiftKey
					这三个用来判断alt,ctrl,和shift是否被按下
					如果按下则返回true，否则返回false
		     */
			
			//判断一个y是否被按下
			//判断y和ctrl是否同时被按下
			if(event.keyCode === 89 && event.ctrlKey){
				console.log("y和ctrl同时被按下");
			}
			
			<script>
				var input = document.getElementById("input")[0];
				input.onkeydown = function(event){
					event = event || window.event;
					//数字 48-57
					//文本框中不能输入数字
					if(event.keyCode >= 48 && event.keyCode <= 57){
						//在文本框中输入内容，属于onkeydown的默认行为
						//如果在onkeydown中取消了默认行为，则输入的内容不会出现在文本框中 
						return false;
					}
				}
			</script>
		}
		
一百二十三，键盘移动div
	<div id="box1"></div>
	#box1{
		width: 100px;
		height: 100px;
		background-color: red;
		position: absolute;
	}
	<script>                                               //修改后，没有卡顿
		//使div可以根据不同方向键向不同方向移动
		var box1 = document.getElementById("box1");
		//定义一个变量，来表示移动的速度
		var speed = 10;
		//创建一个变量，表示方向
		var dir = 0;
		setInterval(function(){
			/*
			 *	37 左
			 *	38 上
			 *	39 右
			 *	40 下
			 */
			switch(dir){
				case 37:
					box1.style.left = box1.offsetLeft - speed + "px";
					break;
				case 39:
					box1.style.left = box1.offsetLeft + speed + "px";
					break;
				case 38:
					box1.style.left = box1.offsetTop - speed + "px";
					break;
				case 40:
					box1.style.left = box1.offsetTop + speed + "px";
					break;
					
			}
		},30)
		document.onkeydown = function(event){
			event = event || window.event;
			
			//当用户按了ctrl以后，速度加快
			if(event.ctrlKey){
				speed = 100;
			}else{
				speed = 10;
			}
			dir = event.keyCode;
		}
		//当按键松开后，div不再移动
		document.onkeyup = function(){
			//设置方向为0
			dir = 0;
		}
	</script>
	
	
	
	<script>                                               //有卡顿
		//使div可以根据不同方向键向不同方向移动
		var box1 = document.getElementById("box1");
		document.onkeydown = function(event){
			event = event || window.event;
			//定义一个变量，来表示移动的速度
			var speed = 10;
			//当用户按了ctrl以后，速度加快
			if(event.ctrlKey){
				speed = 100;
			}
			/*
			 *	37 左
			 *	38 上
			 *	39 右
			 *	40 下
			 */
			switch(dir){
				case 37:
					box1.style.left = box1.offsetLeft - speed + "px";
					break;
				case 39:
					box1.style.left = box1.offsetLeft + speed + "px";
					break;
				case 38:
					box1.style.left = box1.offsetTop - speed + "px";
					break;
				case 40:
					box1.style.left = box1.offsetTop + speed + "px";
					break;
					
			}
		}
	</script>
	

		