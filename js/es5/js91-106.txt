九十一，DOM简介(凡是没有特别声明，均代表所有浏览器都支持)
	DOM 全称 Document Object Model 文档对象模型
	节点：Node  -构成HTML文档最基本的单元
	常用节点分为四类
		文档节点：整个HTML文档
		元素节点：HTML文档中的HTML标签
		属性节点：元素的属性
		文本节点：HTML标签中的文本内容
			<p id="pid">This is a paragraph</p>
			   属性节点     文本节点
					整个为元素节点
					
	节点的属性：
						nodeName		nodeType		nodeValue
		文档节点	    #document			9  			    null
		元素节点		标签名				1				null
		属性节点		属性名				2				属性值
		文本节点		#text				3				文本内容
		
	DOM就是用来操作网页的
	
	/*
	 *	浏览器已经为我们提供了文档节点对象，这个对象是window对象的属性	
	 *		可以在页面中直接使用，文档节点代表的是整个网页
	 */
	<button id="btn">我是一个按钮</button>
	<script>
		//获取到button对象
		var btn = document.getElementById("btn");
		//修改按钮的文字
		btn.innerHTML = "i'm a button";
		
九十二，事件的简介
	/*
	 *	事件，就是用户和浏览器之间的交互行为
	 *		比如点击按钮，鼠标移动，关闭窗口
	 */
	 
	<!-- 我们可以在事件对应的属性中设置一些js代码，这样当事件被触发时，这些代码将会执行
		 这种写法我们称为结构与行为耦合，不方便维护，不推荐使用 -->
	<button id="btn" onClick="alert(123);">按钮</button>
	
	/*
	 *	可以为按钮的对应事件绑定处理函数的形式来响应事件
	 *	这样当事件被触发时，其对应的函数将会被调用
	 */
	//获取按钮对象
	var btn = document.getElementById("btn");
	//绑定一个单击事件
	//像这种为单击事件绑定的函数，我们称为单击响应函数，双击事件就是双击响应函数，以此类推
	btn.onclick = function(){    //双击 ondblclick    鼠标进入  onmousemove
		alert();
	}
	
	
九十三，文档的加载
	/*
	 *	浏览器在加载一个页面时，是按照自上向下的顺序加载的
	 *		读取到一行就运行一行，如果将script标签写到页面的上边
				在代码执行时，页面还没有加载，页面没有加载，DOM对象也没有加载，会导致无法获取到DOM对象
		
		将js代码编写到页面的下部，就是为了可以在页面加载完毕以后再执行js代码
		
		/*
		 *	onload事件会在整个页面加载完成之后才触发
		 *	为window绑定一个onload事件
				该事件对应的响应函数将会在页面加载完成之后执行
				这样可以确保我们的代码执行时所有的DOM对象已经加载完毕了
					<head>
						<script>
							window.onload = function(){
								js代码...
							}
						</script>
					</head>
					
九十四，DOM查询
	获取元素节点
		通过document对象调用
	  1，getElementById()
			通过id属性获取一个元素节点对象
	  2，getElementsByTagName()
			通过标签名获取一组元素节点对象
	  3，getElementsByName()
			通过name属性获取一组元素节点对象
			
		2和3两个方法会给我们返回一个类数组对象，所有查询到的元素都会封装到对象中
		即使查询到的元素只有一个，也会封装到对象中返回
		
	/*
	 *如果需要读取元素节点属性，直接使用 元素.属性名 的方式
	 *	例子 元素.id   元素.name  元素.value  元素.style.xx
		注意：class属性不能采用这种方式，读取class属性时需要使用 元素.className
		
九十五，图片切换时的练习
	<div id="outer">
		<p id="info"></p>
		<img src="" alt="冰棍"/>
		<button id="prev">上一张</button>
        <button id="next">下一张</button>
	</div>
	<script>
		//获取img标签
		var img = document.getElementsByTagName("img")[0];
		//创建一个数组，用来保存图片的路径
		var arr = ["1.jpg", "2.jpg", "3.jpg", "4.jpg", "5.jpg"];
		//创建一个变量，来保存当前正在显示的图片的索引
		var index = 0;
		//获取id为info的元素
		var info = document.getElementById("info");
		//设置info的初始化信息
        info.innerHTML = "一共" + arr.length + "张图片，当前第" + (index+1) + "张";
		//分别为两个按钮绑定单击响应函数
		prev.onclick = function(){
			//切换图片就是修改img的src属性
			//要修改一个元素的属性，元素.属性名 = 属性值
			//切换到上一张，index自减
			index--;
			//判断index是否小于0
			if(index < 0){
				//index = 0;
				index = arr.length - 1;
			}
			img.src = arr[index];
			//点击按钮后，重新设置信息
			info.innerHTML = "一共" + arr.length + "张图片，当前第" + (index+1) + "张";
		}
		next.onclick = function(){
			index++;
			if(index > arr.length-1){
				index = 0;
			}	
			img.src = arr[index];
			info.innerHTML = "一共" + arr.length + "张图片，当前第" + (index+1) + "张";
		}
	</script>
	
九十六，DOM查询
	获取元素节点的子节点
		通过具体的元素节点调用
	  1，getElementsByTagName()
			-方法，返回当前节点的指定标签名后代节点
	  2，childNodes
			-属性，表示当前节点的所有子节点
	  3，firstChild
			-属性，表示当前节点的第一个子节点
	  4，lastChild
			-属性，表示当前节点的最后一个子节点
	  5，children
			-属性，表示当前节点下的所有子元素节点
	  6，firstElementChild							
			-属性，表示当前节点下的第一个子元素节点
	  7，lastElementChild							
			-属性，表示当前节点下的最后一个子元素节点
			
				<ul id="city">
					<li>北京</li>
					<li>上海</li>
					<li>沈阳</li>
					<li>深圳</li>
				</ul>
				
				/*
				 * 在谷歌、火狐、IE9及以上浏览器中会把空白也当成文本节点，但是在IE8及以下浏览器中，不会把空白当成文本节点
			     * 所以在使用childNodes,firstChild,lastChild时要注意IE8及以上可能会获得空白文本节点
				 *	IE8及以下不会获得空白文本节点
				 *
				 * getElementsByTagName()和children所有浏览器都兼容
				 *
				 * firstElementChild和lastElementChild,IE8及以下不支持
				 * 如果你要获取第一个子元素，可以使用
				 * 	console.log(ul.getElementsByTagName("li")[0]);
				 *	console.log(ul.children[0]);
				 */
				var ul = document.getElementById("city");
				IE9: console.log(ul.firstChild);	=>	EmptyTextNode
				IE8: console.log(ul.firstChild);	=>	[object Object]
				
				
九十七，DOM查询
	获取父节点和兄弟节点
		通过具体的节点调用
	  1，parentNode  (所有浏览器都支持，凡是所有浏览器字样均包括IE8及以下)
			-属性，表示当前节点的父节点
	  2，previousSibling
			-属性，表示当前节点的前一个兄弟节点(也可能获取到空白的文本节点)   IE8及以下不支持
	  3，nextSibling
			-属性，表示当前节点的后一个兄弟节点(也可能获取到空白的文本节点)
			2和3-所有浏览器都支持，但要注意IE8不认空白文本节点，所以和其它获取到的数据可能不一样
	  4，previousElementSibling
			-属性，表示当前节点的前一个兄弟元素节点
	  5，nextElementSibling
			-属性，表示当前节点的后一个兄弟元素节点
			
				/*
				 * parentNode所以浏览器都支持
				 *
				 * previousSibling和nextSibling在IE9及以上可能会获得空白文本节点，IE8及以下不会获得空白文本节点
				 *
				 * previousElementSibling和nextElementSibling，IE8及以下不支持
				 *   有一点需要说明：firstElementChild, lastElementChild, previousElementSibling, nextElementSibling
				 *	 虽然在IE8及以下浏览器中不支持，但是也不会报错，而是会返回undefined
				 */
				 
				<ul id="city">
					<li>北京</li>
					<li id="sh">上海</li>
					<li>沈阳</li>
					<li id="sz"><a>深圳<a/></li>
				</ul>
				
				var sh = document.getElementById("sh");
				IE9: console.log(sh.previousSibling);	=>	EmptyTextNode
				IE8: console.log(sh.previousSibling);	=>	[object Object]
				
				IE9: console.log(sh.previousElementSibling);	=>	[object Object]
				IE8: console.log(sh.previousElementSibling);	=>	undefined
				
				/*
				 *	innerText
				 *		-该属性可以获取到元素内部的文本内容
				 *		-和innerHTML类似，不同的是它会自动将html标签去除
				 */
				//获取sz中的文本节点
				var sz = document.getElementById("sz");
				console.log(sz.firstChild.firstChild.nodeValue);	
				console.log(sz.firstChild.innerHTML);      
				console.log(sz.innerText);      		//输出都为 深圳
			
				
		
九十八，九十九，一百，全选练习
	<form method="post" action="">
		你爱好的运动是？<input type="checkbox" id="checkedAllBox"/>全选/全不选
		<br/>
		<input type="checkbox" name="items" value="足球"/>足球
		<input type="checkbox" name="items" value="足球"/>篮球
		<input type="checkbox" name="items" value="足球"/>羽毛球
		<input type="checkbox" name="items" value="足球"/>足球
		<br/>
		<input type="button" id="checkedAllBtn" value="全选"/>
		<input type="button" id="checkedNoBtn" value="全不选"/>
		<input type="button" id="checkedRevBtn" value="反选"/>
		<input type="button" id="sendBtn" value="提交"/>
	</form>
	
	<script>
		/*
		 *	定义一个函数，专门用来为指定元素绑定单击响应函数
		 *	参数：
		 *		idStr：要绑定单击响应函数的对象的id属性值
		 *		fun：事件的回调函数，当单击元素时，该函数将会被触发
		 *			function myClick(idStr,fun){
		 *				var btn = document.getElementById(idStr);
		 *				btn.onclick = fun;
		 *			}
		 */
		 
		//获取四个多选框itmes
		var items = document.getElementsByName("itmes");
		//获取全选/全不选的多选框
		var checkedAllBox = document.getElementById("checkedAllBox");
		/*
		 *	全选按钮
		 *		-点击按钮以后，四个多选框全都被选中
		//为id为checkedAllBtn的按钮绑定一个单击响应函数
		var checkedAllBtn = document.getElementById("checkedAllBtn");
		checkedAllBtn.onclick = function(){
			//遍历items
			for(var i=0; i<items.length; i++){
				//通过多选框的checked属性可以获取或设置多选框的选中状态
				items[i].checked = true;
			}
			//将全选/全不选设置为选中
			checkedAllBox.checked = false;
		}
		
		/*
		 *	全不选就是上述代码中checked设置为false即可
		 *
		 
		/*
		 *	反选
		 *		-点击按钮以后，选中的变没选中，没选中变选中
		var checkedRevBtn = document.getElementById("checkedRevBtn");
		checkedRevBtn.onclick = function(){
			checkedAllBox.checked = true;
			for(var i=0; i<items.length; i++){
				//if(items[i].checked){
					//items[i].checked = false;
				//}else{
					//items[i].checked = true;
				//}
				items[i].checked = !items[i].checked;
				//判断四个多选框是否选中，只要有一个没选中就不是全选
				if(!items[i].checked){
					checkedAllBox.checked = false;
				}
			}
		}
		/*
		 *	提交
		 *		-点击按钮以后，将所有选中的多选框的value属性值弹出
					在循环中判断
						if(items[i].checked){
							alert(items[i].value);
						}
						
		/*
		 *	全选/全不选
		 *	当它选中时，其余的也选中；当它取消时，其余的也取消
			alert(this == checkedAllBox); //true
			for(var i=0; i<items.length; i++){
				items[i].checked = this.checked;  //给谁绑定的单击响应函数，这个this就是谁
			}
		
		//在事件的响应函数中，响应函数是给谁绑定的，this就是谁
		
		
		改bug
		/*
		 *	如果四个多选框全都被选中，则checkedAllBox也应该被选中
		 *	如果四个多选框中有一个没被选中，则checkedAllBox也不应该被选中
		 
		 //为四个多选框分别绑定单击响应函数
		 for(var i=0; i<items.length; i++){
			items[i].onclick = function(){
				//将checkedAllBox设置为选中状态
				checkedAllBox.checked = true;
				for(var j=0; j<items.length; j++){
					if(!items[i].checked){
						checkedAllBox.checked = false;
						//一旦进入判断，则已经得出结果，不用再继续执行循环
						break;
					}
				}
			}
		 }
	</script>
	
一百零一，DOM查询的剩余方法
	/*
	 *	在document中有一个属性body，它保存的是body的引用
			//var body = document.getElementById("body")[0];
			var body = document.body;
			
	/*
	 *	document.documentElement保存的是html根标签
			var html = document.documentElement;
			
	/*
	 *	document.all 代表页面中所有的元素，返回一个类数组对象
			var all = document.all;
			//all = document.getElementsByTagName("*");
			for(var i=0; i<all.length; i++){
				console.log(all[i]);
			}
		
	/*
	 *	getElementsByClassName()
	 *		根据元素的class属性查询一组元素节点对象
			但是该方法不支持IE8及以下的浏览器
				var div = document.getElementByClassName("box")[0]
				
	/*
	 *	document.querySelector()
			-需要一个选择器作为参数，可以根据一个css选择器来查询一个元素节点对象
			-虽然IE8中没有getElementsByClassName()，但是可以使用querySelector()代替
			-使用该方法总会返回唯一的一个元素，如果满足条件的元素有多个，那么它只会返回第一个
				var div = document.querySelector(".box div");
				
	/*
	 *	document.querySelectorAll()
			-该方法和querySelector()用法类似，不同的是它会将符合条件的元素封装到一个数组中返回
			-即使符合条件的元素只有一个，他也会返回数组
			
			
		querySelector()和querySelectorAll 在IE7及以下浏览器是不支持的，支持IE8及以上，还有谷歌和火狐
			
一百零二，DOM增删改
	/*
	 *	document.createElement()
			可以用于创建一个元素节点对象
			它需要一个标签名作为参数，将会根据该标签名创建元素节点对象
			并将创建好的对象作为返回值返回
				var li = document.createElement("li");
	
	/*
	 *	document.createTextNode()
			可以用来创建一个文本节点对象
			需要一个文本内容作为参数，将会根据该内容创建文本节点，并将新的节点返回
				var text = document.createTextNode();
				
	/*
	 *	appendChild()
			-向一个父节点中添加一个新的子节点
			-用法：父节点.appendChild(子节点);
				li.appendChild(text);
				
	/*
	 *	insertBefore()
			-可以在指定的子节点前插入新的子节点
			-语法：
				父节点.insertBefore(新节点，旧节点);
					ul.insertBefore(newLi,oldLi);
					
	/*
	 *	replaceChild()
			-可以使用指定的子节点替换已有的子节点
			-语法：父节点.replaceChild(新节点，旧节点);
				ul.replaceChild(newLi,oldLi);
				
	/*
	 *	removeChild()
			-可以删除一个子节点
			-语法：
				父节点.removeChild(子节点);
				子节点.parentNode.removeChild(子节点);
					//假设city为bj的父节点
					city.removeChild(bj);
					bj.parentNode.removeChild(bj);
					
	/*
	 *	使用innerHTML也可以完成DOM的增删改的相关操作
		一般我们会两种方式结合使用(而不是使用createElement等创建大量子节点，然后再挨个appendChild添加到父节点中)
			var li = document.createElement("li");
			li.innerHTML = "广州";
			ul.appendChild(li);
			
		其实还有一种写法：ul.innerHTML += "<li>广州</li>";  不推荐
			这种写法会改变整个ul里的内容，而上面那种只会改变新创建的这个li，可以在火狐查看黄色区域的范围
			
一百零三，一百零四，一百零五，一百零六，添加删除记录(练习)
	/*
	 *	点击超链接以后，超链接会跳转页面，这个是超链接的默认行为
	 *	但是此时我们不希望出现默认行为，可以通过在响应函数的最后，return false;来取消默认行为
	 */
	var tr = this.parentNode.parentNode;
	var flag = confirm("确认删除"+name+"吗?");
	if(flag){
		tr.parentNode.removeChild(tr);
	}
	
	
	/*
	 *	confirm()用于弹出一个带有确认和取消按钮的提示框
			需要一个字符串作为参数，该字符串将会作为提示文字显示出来
			如果用户点击确认则会返回true，如果点击取消则会返回false
			
	/*
	 *	var name = tr.getElementsByTagName("td")[0].innerHTML;
	 *  或者
	 *	name = tr.children[0].innerHTML;
	 *	不要用
	 *		firstElementChild 兼容性不好
	 */
	 
	 
	var a = document.createElement("a");
	a.href = "javascript:;";
	
	//获取tbody
	var tbody = table.getElementsByTagName("tbody")[0];
	
	//每次添加一个tr，还需要给里边的超链接绑定一个单击响应函数，可以利用事件委托统一给其父元素的事件添加响应函数
		a.onclick = delA;
		
	for(var i=0; i<arr.length; i++){
		/*	for循环会在页面加载完成之后立即执行
		 *	而响应函数会在超链接点击时才执行
		 *	当响应函数执行时，for循环早已执行完毕
		 arr[i].onclick = function(){
			alert(i);  //始终都为3
		 }
	}
	

	
	
		