二十七，代码块
	我们的程序是由一条一条语句构成的
		语句是按照自上向下的顺序一条一条执行的
		在js中可以使用{}来为语句进行分组
			同一个{}中的语句我们称为是一组语句
			它们要么都执行，要么都不执行
			一个{}中的语句我们也称为一个代码块
			在代码块的后边就不用再写 ";" 了
		js中的代码块，只具有分组的作用，没有其他的用途
			代码块内部的内容，在外部是完全可见的
				{
					var a = 10;
					console.log("hahahaa");
				}
				console.log(a); //10
				
二十八，if语句(一)
	-js中的程序是从上到下一行一行执行的
	-通过流程控制语句可以控制程序的执行流程，使程序可以根据一定条件来选择执行
	-语句的分类：
		1，条件判断语句
		2，条件分支语句
		3，循环语句
		
	条件判断语句
		-使用条件判断语句可以在执行某个语句之前进行判断，如果条件成立才会执行语句，条件不成立则语句不执行
		-if语句
			-语法1：
				if(条件表达式){
					语句...
				}
				if语句在执行时，会先对条件表达式进行求值判断
				如果条件表达式的值为true，则执行if后的语句
				如果条件表达式的值为false，则不会执行if后的语句
					if语句只能控制紧随其后的那个语句
						如果希望if语句可以控制多条语句，可以将这些语句统一放到代码块中
					if语句后的代码块不是必需的，但是在开发中尽量写上代码块，即使if后只有一条语句
	
二十九，if语句(二)
	语法2：
		if(条件表达式){
			语句...
		}else{
			语句...
		}
		if...else...语句
			当该语句执行时，会先对if后的条件表达式进行求值判断
				如果该值为true，则执行if后的语句
				如果该值为false，则执行else后的语句
				
	语法3：
		if(条件表达式){
			语句...
		}else if(条件表达式){
			语句...
		}else if(条件表达式){
			语句...
		}else {
			语句...
		}
		if...else if...else语句
			当该语句执行时，会从上到下依次对条件表达式进行求值判断
				如果该值为true，则执行当前语句
				如果该值为false，则继续向下判断
				如果所有条件都不满足，则执行最后一个else后的语句
				该语句中只会有一个代码块被执行，一旦代码块执行了，则直接结束语句
				
三十，三十一，三十二，练习
	prompt()可以弹出一个提示框，该提示框会带有一个文本框，用户可以在文本框中输入一段内容，该函数需要一个字符串作为参数
		该字符串将会作为提示框的提示文字
		用户输入的内容将会作为函数的返回值返回，可以定义一个变量来接收该内容
		该函数的返回值是String类型的
		
		var score = prompt("请输入");  //typeof score  => string
		var a = +prompt("请输入");  //直接把函数的返回值转成Number
		
		[注]var a = 20;
			if(a = 10){
				alert();  //依然执行，此时相当于if(10)
			}
			
三十三，条件分支语句
	条件分支语句也叫switch语句
	语法：
		switch(条件表达式){
			case 表达式:
				 语句...
				 break;
			case 表达式:
				 语句...
				 break;
			default:
				 语句...
				 break;
		}
	执行流程：
		switch...case...语句
		在执行时会依次将case后的表达式的值和switch后的条件表达式的值进行全等比较
			如果比较结果为true，则从当前case处开始执行代码
				当前case后的所有代码都会执行，我们可以在case的后边跟着一个break关键字
				这样可以确保只会执行当前case后的语句，而不会执行其它的case
			如果比较结果为false，则继续向下比较
			如果所有的比较结果都为false，则只执行default后的语句
	switch语句和if语句的功能实际上有重复的，使用switch可以实现if的功能
		同样使用if也可以实现switch的功能，所以我们使用时，可以根据自己的习惯选择
				var num = 1;
				switch(num){
					case 1:
						console.log("一");
						break;
					case 2:
						console.log("二");
						break;
					default:
						console.log("非数字");
						break;  //最好加上
				}
				
三十四：switch练习
	var score = 62;
	switch(score){
		case 62:
		case 61:
		case 60:     //满足三者任一条件都可触发
			console.log("及格了");
			break;
		case 59:
			console.log("没及格");
			break;
	}
	
	练习题
		对于成绩，大于60分为及格，小于60分为不及格
			switch(parseInt(score/10)){    //利用parseInt()对浮点数取整
				case 10:
				case 9:
				case 8:
				case 7:
				case 6:
					console.log("及格");
					break;
				default:
					console.log("不及格");
					break;
			}
		或：
			switch(true){           //js独有
				case score >= 60:
					console.log("及格");
					break;
				default:
					console.log("不及格");
					break;
			}
			
三十五，循环语句
	通过循环语句可以反复的执行一段代码多次
	while循环
		-语法
			while(条件表达式){
				语句...     //{}里的内容叫循环体
			}
		-while语句在执行时
			先对条件表达式进行求值判断
				如果值为true，则执行循环体
					循环体执行完毕以后，继续对表达式进行判断
					如果为true，则继续执行循环体，以此类推
				如果值为false，则终止循环
				
				/*
				 * 像这种将条件表达式写死为true的循环，叫做死循环
				 * 该循环不会停止，除非浏览器关闭，死循环在开发中要慎用
				 *
				while(true){
					alert();
				}
				//可以使用break，来终止循环
				while(true){
					if(n == 10){
						break;   //该break是针对while语句，而不是if语句
					}
				}				
		创建一个循环，往往需要三个步骤
		1，初始化一个变量
			var i = 0;
		2，在循环中设置一个条件表达式
			while(i < 10){
				//3，定义一个更新表达式，每次更新初始化变量
				i++;
			}
	
	do..while循环	
		-语法
			do{
				语句...
			}while(条件表达式)
		-执行流程：
			do...while语句在执行时，会先执行循环体
				循环体执行完毕以后，再对while后的条件表达式进行判断
				如果结果为true，则继续执行循环体，执行完毕继续判断，以此类推
				如果结果为false，则终止循环
		实际上这两个语句功能类似，不同的是while是先判断后执行，而do...while是先执行后判断
		do...while可以保证循环功能至少执行一次，而while不能
		
三十六，while练习
	假如投资年利率为5%，试求从1000块增长到5000块，需多少年
		var money = 1000;
		var count = 0;  //定义一个计数器
		while(money < 5000){
			count++;
			money *= 1.05;
		}
		console.log(count);
		
	while(true){
		var score = prompt("请输入有效成绩");
		if(score >= 0 && score <= 100){
			break;   //满足条件证明用户输入合法，退出循环
		}
		alert("请输入有效分数");
	}
	
三十七，for循环
	for语句，也是一个循环语句，也称为for循环
	在for循环中，为我们提供了专门的位置用来放三个表达式
		1，初始化表达式
		2，条件表达式
		3，更新表达式
	for循环的语法
		for(①初始化表达式 ; ②条件表达式 ; ④更新表达式){
			③语句...
		}
		for(var i=0; i<10; i++){}
		for循环的执行流程：
			①，执行初始化表达式，初始化变量(初始化表达式只会执行一次)
			②，执行条件表达式，判断是否执行循环
				如果为true，则执行循环③
				如果为false，终止循环
			④，执行更新表达式，更新表达式执行完毕，继续重复②
			
	//创建一个执行10次的while循环
	//初始化表达式	
		var i = 0;
	//创建一个循环，定义条件表达式
		while(i < 10){
			//设置更新表达式
			alert(i++);
		}
		
	for循环中的三个部分都可以省略，也可以写在外部
		var i =0;
		for(;i<10;){
			alert(i++); //和上面结果一样
		}
	如果for循环中不写任何的表达式，只写两个 ";" ，此时循环是一个死循环会一直执行下去，慎用
	for(;;){
		console.log("hello");
	}
	
	for(var i=0, sum=0; i<=100; i++){}  //可以同时声明多个变量
	
三十八，水仙花练习
	水仙花数是指一个3位数，它的每个位上的数字的3次幂之和等于它本身
		例如(1^3 + 5^3 + 3^3 = 153)，请打印所有的水仙花数
			//把大的问题拆成若干小问题
			//打印所有的三位数
			for(var i=100; i<1000; i++){
				//获取i的百，十，个位上的数字
				//获取百位数字
				var bai = parseInt(i/100);
				//获取十位数字
				var shi = parseInt((i-bai*100)/10);
				//获取个位数字
				var ge = i % 10;
				if(bai*bai*bai + shi*shi*shi + ge*ge*ge === i){
					console.log(i);
				}
			}
		
三十九，质数练习
	在页面中接收一个用户输入的数字，并判断该数字是否是质数
	质数，只能被1和它自身整除的数，1不是质数也不是合数，质数必须是大于1的自然数
		//判断这个数值是否合法
		if(num <= 1){
			alert("该值不合法!");
		}else{
			var flag = true;  //状态
			//判断num是否是质数
			//获取2-num之间的数
			for(var i=2; i<num; i++){
				//判断num是否能被i整除
				if(num%i == 0){
					//如果num能被i整除，则说明num一定不是质数
					flag = false;
				}
			}
			if(flag){
				alert(num+ "是质数");
			}else{
				alert(num+ "不是质数");
			}
		}
		
四十，四十一，四十二，四十三，嵌套的for循环	

	for(var i=0; i<5; i++){         //外层循环控制高度		
		for(var j=0; j<i+1; j++){   //内层循环控制宽度
			document.write("*");
		}
		document.write("<br/>");
	}
	*
	**
	***
	****
	*****
   
	for(var i=0; i<5; i++){		
		for(var j=0; j<5-i; j++){
			document.write("*");
		}
		document.write("<br/>");
	}
	*****
	****
	***
	**
	*			
	
	打印99乘法表
		//外层循环控制高度
		for(var i=1; i<=9; i++){
			//内层循环控制宽度
			for(var j=1; j<=i; j++){
				document.write("<span>" + i + "*" + i + "=" + i*j + "</span>");
			}
			document.write("<br/>");
		}
		<style>
			span{
				display: inline-block;
				width: 80px;
			}
		</style>
		
	打印出1-100之间所有的质数
		for(var i=2; i<=100; i++){
			var flag = true;
			for(var j=2; j<i; j++){
				if(i%j == 0){
					flag = false;
				}
			}
			if(flag){
				console.log(i);
			}
		}
		
四十四，break和continue
	break关键字可以用来退出switch和循环语句
	不能在if语句中使用break和continue
	break关键字，会立即终止离它最近的那个循环语句
		if(a > 10){
			break;   //报错，break不能针对if
		}
		
		for(var i=0; i<10; i++){
			if(i == 2){
				break;  //此处break是对for循环起作用的，所以写在if里也是可以的
			}
		}
		
		for(var i=0; i<10; i++){
			console.log(i);
			for(var j=0; j<5; j++){
				console.log(j);
				break;
			}
		}
	
	可以为循环语句创建一个label，来标识当前循环
	label:循环语句
	使用break语句时，可以在break后跟着一个label，这样break将会结束指定的循环，而不是最近的
		outer:
			for(var i=0; i<10; i++){
			console.log(i);
			for(var j=0; j<5; j++){
				console.log(j);
				break outer;  //结束外层循环(标识为label的那层)
			}
		}
	continue关键字可以用来跳过当次循环，同样continue也是默认只会对离他最近的循环起作用
	也可对continue应用label，只不过一个是终止整个循环，一个是终止当次循环
	
四十五，质数练习性能优化
	/*
	 *	测试如下程序性能
	 *  在程序执行前开启计时器
	 *	console.time(计时器的名字);可以用来开启一个计时器，单位为ms
	 *	他需要一个字符串作为参数，这个字符串将会作为计时器的标识
	 */
	
	console.time("test");
	for(var i=2; i<=10000; i++){
		var flag = true;
		for(var j<=Math.sqrt(i); j<i; j++){   //修改   Math.sqrt()对一个数进行开平方
			if(i%j == 0){
				flag = false;
				break;   //修改
			}
		}
		if(flag){
			console.log(i);
		}
	}
	console.timeEnd("test"); //用来终止一个计时器，需要一个计时器的名字作为参数
	
	//什么都没改  215ms
	//加了break   25ms
	//又修改条件  2.5ms   可以看出性能提升是很明显的
		
			
	
			
			
				