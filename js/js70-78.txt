七十，数组
	数组(Array)
		-数组也是一个对象
		-它和我们普通对象功能类似，也是用来存储一些值的
		-不同的是普通对象使用字符串作为属性名，而数组是使用数字来作为索引操作元素的
		-索引
			从0开始的整数就是索引
		-数组的存储性能比普通对象要好，在开发中我们经常使用数组来存储一些数据
		-使用typeof检查一个数组时，会返回object
		
		//创建数组对象
		var arr = new Array();
		
		/*
		 *	向数组中添加元素
		 *	语法：数组[索引] = 值
		 */
		arr[0] = 33;
		arr[1] = 24;
		arr[2] = 78;
		
		/*
		 *	读取数组中的元素
		 *	语法：数组[索引]
		 *		如果读取不存在的索引，不会报错而是返回undefined
		 */
		console.log(arr[0]); //33
		console.log(arr[10]); //undefined
		
		/*
		 *	获取数组的长度
		 *	可以使用length属性来获取数组的长度(元素的个数)
		 *	语法：数组.length
		 *
		 *  对于连续的数组，使用length可以获取到数组的长度(元素的个数)
		 *	对于非连续的数组，使用length会获取到数组最大的索引+1
		 *		尽量不要创建非连续的数组
		 */
		cosnole.log(arr.length); //3
		arr[10] = 55;
		console.log(arr.length); //11
		console.log(arr); //此时输出数组为："33,25,78,,,,,,55"
		
		/*
		 *	修改length
		 *	如果修改的length大于原长度，则多出的部分会空出来
		 *	如果修改的length小于原长度，则多出的元素会被删除
		 */
		//arr[10] == 55;
		arr.length = 10;
		console.log(arr.length); //10
		console.log(arr);  //"33,25,78,,,,,,,"
		
		arr.length = 2;
		console.log(arr.length); //2
		console.log(arr);  //"33,25"
		
		//向数组的最后一个位置添加元素
		//语法：数组[数组.length] = 值;
		arr[arr.length] = 70;
		console.log(arr); //"33,25,78,70"
		
七十一，数组字面量
	//创建一个数组
	var arr = new Array();
	arr[0] = 123;
	arr.hello = "abc";
	console.log(arr.hello); //abc 可以，但没有意义
	
	//使用字面量来创建数组
	//语法：[]
	var arr = [];
	
	//使用字面量创建数组时，可以在创建时就指定数组中的元素
	var arr = [1,2,3];
	//使用构造函数创建数组时，也可以同时添加元素，将要添加的元素，作为构造函数的参数传递
	//元素之间使用 , 隔开
	var arr2 = new Array(12,10,13);
	
	//使用字面量创建一个数组，数组中只有一个元素10
	var arr3 = [10];  
	console.log(arr3); // "10"
	console.log(arr.length); //1   这个10就是一个元素
	//使用构造函数创建一个长度为10的数组
	var arr4 = new Array(10);
	console.log(arr3); // ",,,,,,,,,,"
	console.log(arr.length); //10   这个10表示一个长度
	
	//数组中的元素可以是任意的数据类型
	var arr5 = [1,"hello",true,null,undefined];
	console.log(arr5); //[ 1, "hello", true, null, undefined ]
	
	//也可以是对象
	var obj = {name: "孙悟空"};
	arr[arr.length] = obj;
	也可以
	var arr6 = [1,"hello",{name: "猪八戒"}];
	console.log(arr6[2].name); //猪八戒
	
	//也可以是一个函数
	arr = [function(){alert(11)}, function(){alert(22)}];
	arr[0](); //11
	
	//数组中也可以放数组，如下这种数组我们称为二维数组
	arr = [[1,2,3],[4,5,6],[7,8,9]];
	console.log(arr[0]); //[1, 2, 3]
	
七十三，数组的四个方法
	//创建一个数组
	var arr = ["孙悟空","猪八戒","沙悟净"];
	
	/*
	 *	push()
	 *		-该方法可以向数组的末尾添加一个或多个元素，并返回数组新的长度
	 *		-可以将要添加的元素作为方法的参数传递
	 *			这些元素将会自动添加到数组的尾部
	 *		-该方法会将数组新的长度作为返回值返回
	 */
	var result = arr.push("唐僧","白骨精");
	console.log(result);
	
	/*
	 *	pop()
	 *		-该方法可以删除数组中最后一个元素，并将被删除的元素作为返回值返回
	 */
	var result = arr.pop();
	console.log(arr); // 孙悟空,猪八戒
	console..log(result); //沙悟净
	
	/*
	 *	unshift()
	 *		-该方法可以向数组的开头添加一个或多个元素，并返回数组新的长度
	 *		-向前边插入元素以后，其它元素的索引会依次调整
	 */
	 var result = arr.unshift("牛魔王","二郎神");
	 console.log(arr); //牛魔王,二郎神,孙悟空,猪八戒,沙悟净
	 console.log(result); //5
	 
	/*
	 *	shift()
	 *		-该方法可以删除数组中第一个元素，并将被删除的元素作为返回值返回
	 */
	var result = arr.shift();
	console.log(arr); //猪八戒,沙悟净
	console.log(result); //孙悟空
	
七十三，七十四，数组的遍历
	//创建一个数组
	var arr = ["孙悟空","猪八戒","沙悟净"];
	//所谓的遍历数组，就是将数组中所有的元素都取出来
	for(var i=0; i<arr.length; i++){
		console.log(arr[i]);
	}
	
	代码赏析：
		/*
		 *  arr
		 *  形参，要提取信息的数组
		 */
		function getAdult(arr){
			//创建一个新的数组
			var newArr = [];
			//遍历arr获取arr中Person对象
			for(var i=0; i<arr.length; i++){
				//判断Person对象的age是否大于或等于18
				var p = arr[i];
				if(p.age >= 18){
					//如果大于或等于18，则将这个对象添加到newArr中
					newArr.push(p);
				}
			}
			return newArr;
		}
		var result = getAdult(arr);
		console.log(result);
		
七十五，forEach
	/*
	 *	一般我们都是使用for循环去遍历数组，js中还为我们提供了一个方法，用来遍历数组
	 *	forEach()
	 *		-这个方法只支持IE8以上的浏览器
	 *			IE8及以下的浏览器不支持该方法，所以如果需要兼容IE8，则不要使用forEach，还是使用for循环来遍历
	 */
	 
	/*
	 *	forEach()方法需要一个函数作为参数
	 *		-像这种函数，由我们创建但是不由我们调用的，我们称为回调函数
	 *		-数组中有几个元素，函数就会执行几次，每次执行时，浏览器会将遍历到的元素，以实参的形式传递进来
	 *			我们可以定义形参，来读取这些内容
	 *		-浏览器会在回调函数中传递三个参数
	 *			第一个参数，就是当前正在遍历的元素
	 *			第二个参数，就是当前正在遍历的元素的索引
	 *			第三个参数，就是正在遍历的数组
	 */
	arr.forEach(function(value, index, obj){
		console.log(value);
		console.log(index);
		console.log(obj);
	});
	
七十六，slice和splice
	var arr = ["孙悟空","猪八戒","沙悟净"];
	
	/*
	 *	slice()
	 *		-可以用来从数组中提取指定元素
	 *		-该方法不会改变原数组，而是将截取到的元素封装到一个新数组中返回
			-参数：
				1，截取开始的位置的索引，包含开始索引
				2，截取结束的位置的索引，不包含结束索引
					-第二个参数可以省略不写，此时会截取从开始索引往后的所有元素
					-索引可以传递一个负值，如果传递一个负值，则从后往前计算
						-1 倒数第一个
						-2 倒数第二个 (如果结束位置在开始位置之前，则返回一个空数组)
						
	/*
	 *	splice()
	 *		-可以用于删除数组中的指定元素
	 *		-使用splice()会影响到原数组，会将指定元素从原数组中删除
	 *			并将被删除的元素封装到一个数组中作为返回值返回
	 *		-参数：
	 *			第一个，表示开始位置的索引
	 *			第二个，表示删除的数量
	 *			第三个及以后，可以传递一些新的元素，这些元素将会自动插入到开始位置索引的前边
	 */
	 
	删除 =>  arr.splice(0,1);
			 console.log(arr); //猪八戒,沙悟净
	
	添加 =>  arr.splice(1,0,"牛魔王","红孩儿");
			 console.log(arr); //孙悟空,牛魔王,红孩儿,猪八戒,沙悟净
		
	替换 =>  arr.splice(1,1,"太上老君","玉皇大帝");
			 console.log(arr); //孙悟空,太上老君,玉皇大帝,沙悟净
			 
七十七，数组去重练习
	//创建一个数组
	var arr = [1,2,3,4,4,1,1,8,8];
	//去除数组中重复的数字
	
	//获取数组中的每一个元素
	for(var i=0; i<arr.length; i++){
		//获取当前元素后的所有元素
		for(var j=i+1; j<arr.length; j++){
			//判断两个元素的值是否相等
			if(arr[i] == arr[j]){
				//如果相等则证明出现了重复的元素，则删除 j 对应的元素
				arr.splice(j,1);
				//当删除了当前 j 所在的元素以后，后边的元素会自动补位
				//此时将不会再比较这个元素，我需要再比较一次 j 所在位置的元素
				//使 j 自减
				j--; //注意这个 j 不能放在if外边，会变成死循环
			}
		}
	}
	
七十八，数组的剩余方法
	var arr = ["孙悟空","猪八戒","沙悟净"];
	var arr2 = ["白骨精","玉兔精","蜘蛛精"];
	var arr3 = ["二郎神","太上老君","玉皇大帝"];
	
	/*
	 *	concat()
	 *		-可以连接两个或多个数组，并将新的数组返回
	 *		-该方法不会对原数组产生影响
	 */
	var result = arr.concat(arr2,arr3,"牛魔王","铁扇公主"); //也可以传单个元素
	console.log(result); //孙,,白,,二,,牛,,
	
	/*
	 * join()
	 *	-该方法可以将一个数组转换为一个字符串
	 *  -该方法不会对原数组产生影响，而是将转换后的字符串作为结果返回
	 *  -在join()中可以指定一个字符串作为参数，这个字符串将会成为数组中元素的连接符
	 *		如果不指定连接符，则默认使用 , 作为连接符
	 */
	var result = arr.join("-");
	console.log(result);
	
	/*
	 *	reverse()
	 *		-该方法用来反转数组(前边的去后边，后边的去前边)
	 *		-该方法会直接修改原数组
	 */
	arr.reverse();
	console.log(arr); //沙悟净,猪八戒,孙悟空
	
	/*
	 *	sort()
	 *		-可以用来对数组中的元素进行排序
	 *		-也会影响原数组，默认会按照Unicode编码进行排序
	 */
	arr = ["b","d","e","a","c"];
	arr.sort();
	console.log(arr);  //a b c d e
	
	/*
	 *	即使对于纯数字的数组，使用sort()排序时
	 *		也会按照Unicode编码来排序，所以对数字进行排序时，可能会得到错误的结果
	 *	我们可以自己来指定排序的规则
	 *		我们可以在sort()中添加一个回调函数，来指定排序规则
				回调函数中需要定义两个形参
				浏览器将会分别使用数组中的元素作为实参去调用回调函数
				使用哪个元素调用不确定，但是肯定的是在数组中a一定在b前边
					arr = [5,4];
					arr.sort(function(a,b){
						console.log(a); //5
						console.log(b); //4
					})
					
			浏览器会根据回调函数的返回值来决定元素的顺序
				如果返回一个大于0的值，则元素会交换位置
				如果返回一个小于0的值，则元素位置不变
				如果返回一个0，则认为两个元素相等，也不交换位置
			如果需要升序排列，则返回a-b
			如果需要降序排列，则返回b-a
				arr = [5,4,2,1,3,8,7];
				arr.sort(function(a,b){
					if(a > b){
						return 1;
					}else if(a < b){
						return -1;
					}else{
						return 0;
					}
				});
				console.log(arr); //1,2,3,4,5,6,7,8
								
				arr.sort(function(a,b){
					if(a < b){
						return 1;
					}else if(a > b){
						return -1;
					}else{
						return 0;
					}
				});
				console.log(arr); //8,7,6,5,4,3,2,1
				
				或者：
					arr.sort(function(a,b){
						return a-b;   //升序排列
					});
					arr.sort(function(a,b){
						return b-a;   //降序排列
					});