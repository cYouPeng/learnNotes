二十一，赋值运算符
	=
		可以将右侧的值赋值给符号左侧的变量
	+=
		a += 5; 等价于 a = a+5;
	-=
		a -= 5; 等价于 a = a-5;
	*=
		a *= 5; 等价于 a = a*5;
	/=
		a /= 5; 等价于 a = a/5;
	%=
		a %= 5; 等价于 a = a%5;
	
二十二，关系运算符
	通过关系运算符可以比较两个值之间的大小关系
		如果关系成立会返回true，如果关系不成立则返回false
	> 大于号
		-判断符号左侧的值是否大于右侧的值
		-如果关系成立，返回true；如果关系不成立则返回false
	>= 大于等于
		-判断符号左侧的值是否大于或等于右侧的值
	< 小于号
	<= 小于等于
	
	非数值的情况
		-对于非数值进行比较时，会将其转换为数字然后再比较
			任何值和NaN做任何比较都是false
				console.log(10 > "hello");  //false
				console.log(10 > undefined);  //false
		-如果符号两侧的值都是字符串时，不会将其转换为数字进行比较，而会分别比较字符串中字符的Unicode编码
			// 比较字符编码时是一位一位进行比较，如果两位一样则比较下一位，所以可以借用它来对英文进行排序
			console.log("11" < "5");  //true
			console.log("abc" < "b"); //true   			
			//首先比较a和b的Unicode编码，因为97<98，所以第一位就已经出现了结果(相等不算结果)，就不再进行第二位的比较了
			//如果比较的是两个字符串型的数字，可能会得到不可预期的结果，所以注意在比较两个字符串型数字时，一定要转型
			console.log("戒" > "我"); //true 这么比较是可以的，但是没有意义
			
二十三，Unicode编码表
	在字符串中使用转义字符输入Unicode编码
		\u四位十六进制编码
			console.log("\u2620");
		<!--  在网页中使用Unicode编码 
			&#十进制编码
			<h1>&#9760</h1>       注意上下是两种不同的进制
		-->	
		
二十四，相等运算符
	用来比较两个值是否相等
		如果相等会返回true，否则返回false
	使用 == 来做相等运算
		-当使用==来比较两个值时，如果值的类型不同，则会自动进行类型转换，将其转换为相同的类型，然后再比较
			console.log("1" == 1); //true
			console.log(true == "1"); //
			console.log(true == "hello"); //false
			console.log(null == 0); //false      注意不一定都是转为Number
			
			undefined衍生自null
				所以这两个值在做相等判断时，会返回true
					console.log(undefined == null); //true
			NaN不和任何值相等，包括它本身
				console.log(NaN == NaN);  //false
			可以通过isNaN()函数来判断一个值是否是NaN，如果该值是NaN则返回true，否则返回false
				var a = NaN;
				console.log(isNaN(a));  //true
				
	不相等
		不相等用来判断两个值是否不相等，如果不相等返回true，否则返回false	
			-使用 != 做不相等运算
			-不相等也会对变量进行自动的类型转换，如果转换后不相等返回true，相等返回false
				console.log("abc" != "abc");  //false
				console.log("1" != 1);  //false
				
	===
		全等
		-用来判断两个值是否全等，他和相等类似
			不同的是他不会做自动的类型转换
			如果两个值的类型不同，直接返回false
				console.log("123" == 123); //true
				console.log("123" === 123); //false
				
				console.log(null == undefined); //true
				console.log(null === undefined); //false
	!==
		不全等
		用来判断两个值是否不全等，和不等类似
		不同的是它不会做自动的类型转换，如果两个值的类型不同，直接返回true
			console.log(1 != "1"); //false
			console.log(1 !== "1"); //true
			
二十五，条件运算符
	条件运算符也叫三元运算符
		-语法
			条件表达式 ? 语句1 : 语句2
		-执行的流程
			条件运算符在执行时，首先对条件表达式进行求值
				如果该值为true，则执行语句1，并返回执行结果
				如果该值为false，则执行语句2，并返回执行结果
			如果条件表达式的求值结果是一个非布尔值，会将其转换为布尔值，然后再运算
				
					var a = 30;
					var b =20;
					var c =50;
					
					a > b ? alert("语句1") : alert("语句2"); //语句1
					
					//获取a b c中的最大值
					var max = a > b ? a : b;  //30
					max = max > c ? max : c; //50   方式1
					
					max = a>b ? (a>c ? a : c) : (b>c ? b : c);  //50 方式2，这种写法不推荐使用，不方便阅读，推荐方式1
					
					"hello" ? alert("语句1") : alert("语句2");	//语句1
					
二十六，运算符的优先级
	,运算符
		使用 "," 可以分割多个语句，一般可以在声明多个变量时使用
			//var a,b,c;  //使用 , 运算符同时声明多个变量
			var a=1 , b=2 , c=3;  //可以同时声明多个变量并赋值
			
	就和数学中一样，js中运算符也有优先级
		比如先乘除，后加减
		在js中有一个运算符优先级的表
			在表中位置越靠上优先级越高，优先级越高越优先计算
			如果优先级一样，则从左往右计算
		但是这个表我们并不需要记忆，如果遇到优先级不清楚的，可以使用括号来改变优先级
			
				var result = 1 + 2 * 3;  //7
				result = 1 || 2 && 3;  //true  &&比||优先级高
				result = (1 || 2) && 3;  //true
					
		