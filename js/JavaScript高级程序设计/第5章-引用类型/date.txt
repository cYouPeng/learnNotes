Date类型使用自 UTC时间1970年1月1日午夜零时开始经过的毫秒数来保存日期
调用Date构造函数不传参时，新创建对象自动获得当前日期和时间
	console.log(new Date());  // Sat Jun 06 2020 09:46:31 GMT+0800 (中国标准时间)   这是一个对象不是字符串
如果想根据指定的日期和时间创建 Date 对象，需要传入表示该日期的时间戳(第一行所说毫秒数)
为了简化这一 计算过程，ECMAScript提供了两个方法：Date.parse() 和 Date.UTC()
	Date.parse() 接收一个表示日期的字符串参数，然后尝试根据这个字符串返回相应日期的毫秒数
	ECMA-262没有定义 Date.parse() 应该支持哪种日期格式
		以我在项目中用到的举几个例子：
			Date.parse(str)
			str可以是   '2020-05-12'    '2020-05-12 09:07:59' 
						'2020/5/12'     '2020/5/12 9:7:59' 
						'2020-05 08:12'
						其中表示日期的部分： 如果是 年月日，可以用 -或/ 分隔，如果是 年月 则只能以 - 分隔
						    表示时间的部分：只能以 : 分隔
							如果只有年月或时分，则 日 默认为 01；秒 默认为 00
								例如'2020-05 08:12'    转换成date对象就是 2020-05-01 08:12:00
						如果传入的字符串不能表示日期，那么它会返回NaN
							console.log(Date.parse('2020-05 24:12'))  //NaN
				实际上，如果直接将表示日期的*字符串*传递给Date构造函数，也会在后台调用 Date.parse()。也就说，下面这两行代码是等价的
					console.log(new Date(Date.parse('2020-05-12 23:12:59')))
					console.log(new Date('2020-05-12 23:12:59')) //悄悄地调用 Date.parse()
				时间是24小时计时(0-23)
	
	ECMAScript5 添加了 Date.now() 方法，返回表示调用这个方法时的日期和时间的毫秒数
		var start = Date.now();
		doSomething();
		var stop = Date.now();
		console.log(start - stop)
		
	继承的方法：Date 类型重写了 toLocalString(), toString(), valueOf()
		前两个返回表示日期的字符串，但在不同浏览器中，差异较大
		后一个返回日期的毫秒数(是number类型)，因此可以方便使用比较操作符来比较两个 Date 对象
			let a1 = new Date();
			let a2 = new Date();
			alert(a1 < a2);  //true   valueOf()和getTime()的返回值包括类型都是一样的
			
	日期格式化方法：
		Date 还有一些专门用于将日期格式化为字符串的方法
			toDateString()
			toTimeString()
			toLocalDateString()
			toLocalTimeString()
			... 
			但这些方法的输出因浏览器而异，不同浏览器可能会有不一样的值
	
	其它方法：
		getTime() 返回表示日期的毫秒数；与valueOf()方法返回值相同
		getFullYear() 取得4位数的年份（如2007而非07）
		getMonth() 返回日期中的月份，其中0表示一月，11表示十二月
		getDate() 返回日期月份中的天数（1到31）
		getDay() 返回日期中星期的星期几（其中0表示星期日，6表示星期六）
		getHours() 返回日期中的小时数（0到23）
		getMinutes() 返回日期中的分钟数（0到59）
		getSeconds() 返回日期中的秒数（0到59）
		
		
		
	
	
	
	
	
	
	
	