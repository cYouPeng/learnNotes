一，创建版本库
	$ mkdir learngit
	$ cd learngit
	$ pwd
	pwd命令用于显示当前目录

	通过git init命令把这个目录变成Git可以管理的仓库：
	如果你没有看到.git目录，那是因为这个目录默认是隐藏的，用ls -ah命令就可以看见。

	添加文件到Git仓库，分两步：
	使用命令git add <file>，注意，可反复多次使用，添加多个文件；  git add --all 全部添加
	使用命令git commit -m <message>，完成。
	$ git add file1.txt
	$ git add file2.txt file3.txt
	$ git commit -m "add 3 files."


二，时光穿梭机
	要随时掌握工作区的状态，使用git status命令。
	如果git status告诉你有文件被修改过，用git diff可以查看修改内容。
	$ git status
	$ git diff readme.txt
	
三，版本回退
	每当你觉得文件修改到一定程度的时候，就可以“保存一个快照”，这个快照在Git中被称为commit。一旦你把文件改乱了，或者误删了文件，还可以从最近的一个commit恢复，然后继续工作

	git log命令显示从最近到最远的提交日志
	如果嫌输出信息太多，看得眼花缭乱的，可以试试加上--pretty=oneline参数：
	$ git log
	commit 1094adb7b9b3807259d8cb349e7df1d4d6477073 (HEAD -> master)
	Author: Michael Liao <askxuefeng@gmail.com>
	Date:   Fri May 18 21:06:15 2018 +0800

		append GPL
		
	$ git log --pretty=oneline
	1094adb7b9b3807259d8cb349e7df1d4d6477073 (HEAD -> master) append GPL
	e475afc93c209a690c39c13a46716e8fa000c366 add distributed
	eaadf4e385e865d25c48e7ca9c8395c3f7dfaef0 wrote a readme file
	你看到的一大串类似1094adb...的是commit id（版本号）

	在Git中，用HEAD表示当前版本，也就是最新的提交1094adb...（注意我的提交ID和你的肯定不一样），上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。
	$ git reset --hard HEAD^       #head~99      #此时在git log显示提交日志就没有最新的这一条了
	HEAD is now at e475afc add distributed

	$ git reset --hard 1094a     #坐着时光机回到过去，当然也可以回来 只要在后面指定版本号
	HEAD is now at 83b0afe append GPL   
	版本号没必要写全，前几位就可以了，Git会自动去找。当然也不能只写前一两位，因为Git可能会找到多个版本号，就无法确定是哪一个了。

	找不到新版本的commit id怎么办？
	Git提供了一个命令git reflog用来记录你的每一次命令
	$ git reflog

	总结：
	HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。
	穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。
	要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。









