请求 -->(解析)  对象
对象 -->(@ResponseBody序列化) json    这两个并不是写在核心控制器里的，而是写在拦截器里

过滤器：访问权限/公共代码


request -> filter(跨域,字符集) ->DispatcherServlet -> interceptor(访问权限) -> controller

拦截器方法执行顺序：preHandler -> controller -> postHandler -> afterCompletion

拦截器在mvc中设置   其中的class=包名.类名
拦截器通过返回true或false来决定是否向下执行

如果你写拦截器的时候选择继承父类，那么只需要重写你想实现的方法，另外不要再拦截器里写转发/重定向



类型转换器：

需要实现接口Converter<源类型,目标类型>，并重写convert方法，它的参数类型为源类型，返回值类型为目标类型

要求客户端使用确定的日期格式，也就是分隔符要统一

mvc有内置的类型转换器，也可自定义，其中自定义的类型转换器会取代内置的

两种类型的类型转换器只能有一个，它在整个项目中有效   例：String -> Data 只能有一个

提交的数据为json，它是不走转换器的

移动端也可提交parameter，json，FormData

java和.net很像


异常处理：

全局异常处理类整个项目只能有一个

mav.setViewName(controller名字)
mav.addObject()往model里添加数据       model是一个map集合

不写这个自定义异常处理类，那么所有的异常都不会被处理

上传多个文件可以把MultipartFile[] myFile 改成数组

在大量并发下，时间戳也有可能重复

HttpMessageInterceptor -> converter  默认JackSon    用gson替换之后，可以不用引入JackSon  jar包了，jackSon不堪大用

日期：如果前端传json，需要走类似DateAdapter适配器
      如果传的是FormData/parameter，需要走类型转换器

MVC方法参数除了request等之外，其它多数参数的名字要和表单名一致

convert :parameter/FormData   HttpMessageInterceptor 检查MIME类型 解析出来Map
TypeAdapter: json   解析出来JSON字符串 
解析完以后，开始给方法注入参数