一、设置配置文件
1)配置web.xml
a)配置spring
<!-- spring容器监听器 -->
<listener>
	<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
</listener>
<!-- spring配置文件，若单个文件可以直接配置文件名，若多个文件可以使用*通配（推荐） -->
<context-param>
	<param-name>contextConfigLocation</param-name>
	<param-value>/WEB-INF/classes/applicationContext-*.xml</param-value>
</context-param>
b)配置mvc(DispatcherServlet,characterEncodingFilter等)
略...
2)配置mybatis配置文件
略...
3)配置spring配置文件
a)配置sql信息
		<!-- 加载db.properties文件中的内容,db.properties文件中的key要有一定的特殊规则 -->
		<context:property-placeholder location="classpath:db.properties"/>
		<!-- 配置数据源,使用dbcp连接池 -->
		<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
			<property name="driverClassName" value="${jdbc.driver}"/>
			<property name="url" value="${jdbc.url}"/>
			<property name="username" value="${jdbc.username}"/>
			<property name="password" value="${jdbc.password}"/>
			<property name="maxActive" value="30"/>
			<property name="maxIdle" value="5"/>
		</bean>
		<!-- 配置SqlSessionFactory -->
		<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
			<!-- 数据源 -->
			<property name="dataSource" ref="dataSource"/>
			<!-- 加载mybatis的全局配置文件 -->
			<property name="configLocation" value="classpath:sqlMapConfig.xml" />
			
		</bean>
		
		<!-- 配置Mapper扫描器 -->
		<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
			<!-- 扫描包路径,如果需要扫描多个包中间用半角逗号隔开 -->
			<property name="basePackage" value="com.zj.ws.dao"/>
			<!-- 这边不能使用ref="sqlSessionFactory"原因：引用类型使用ref，简单类型使用value -->
			<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
		</bean>
b)配置事物和切面
<!-- 事务管理器 对mybatis操作数据库事务控制，spring使用jdbc的事务控制类 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<!-- 数据源  -->
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- 通知 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- 传播行为 -->
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="insert*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="find*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="get*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="select*" propagation="SUPPORTS" read-only="true" />
		</tx:attributes>
	</tx:advice>
	<!-- aop 切面根据项目实际情况配置-->
	<aop:config>
		<aop:advisor advice-ref="txAdvice" pointcut="execution(* com.zj.ws.biz.*.*(..))" />
	</aop:config>
c)配置业务类扫描包
<context:component-scan base-package="com.zj.ws.biz"/>
二、编辑类
1.编辑Controller类
为所有控制器类添加私有的业务类(接口)类型的属性，该属性不需要实例化，并为该属性添加注解@Autowired，该属性会被spring自动注入;编写controller方法,略
2.编写Service类
为所有业务类添加注解@Service；添加私有的Mapper接口类型的属性，该属性不需要实例化，并为该属性添加注解@Autowired，该属性会被spring自动注入；编写业务方法
3.编写Mapper接口和mapper.xml文件
略...