File类  getParent()获取路径 不包含文件名
正则表达式的\和.都必须进行转义才能代表其本身内容
流都是针对内存操作
写入到内存 ->输入
从内存流出 ->输出

三种流的划分：1，方向：输入流   
		      输出流
	     2，数据：字节流  
	             字符流
    	     3，处理方式：高级流(处理流) 
		         低级流(节点流) 直接和节点进行连接

我们说接口对象一定是它的实现类对象
              输入流  

	        |
         Reader |InputStream
	        |
字符流a  _______|________字节流
	        |
	        |
	        |OutputStream
       Writer	|
              输出流

流是单向操作的，取出来的数据就不能再放回
输入流：从文件中读取数据放到内存中
输出流：把内存中数据放到某个文件中

int read(byte[] b) 把数据全部读取出来放到数组中  单位为byte

判断 available
读取 read
关闭 close

写入时如果要被写入的文件是打开状态，则不会成功写入

偏移量：
	输入： ________  把输入流中的数据放到数组中
	      |||||||||   开口处偏移量为0，如果偏移量为m，就从第m个位置开始存储
              
              ________
	输出：|||||||||   把数组中数据放到输出流中
			  偏移量为0，就堵头开始放，有偏移量m的话，第一次放从m位置放，之后再放，在当前数据的最后位置再加m开始放
这样，每次放的数据中间就会流出空白，这个长度就是m

两个字节可以合成一个汉字，但两个字符就不行了

File f = new File("D:/a/b/c.txt"); f.createNewFile(); 成功前提是路径必须存在

等nio普及传统io将被淘汰
只能整个文件去读取/写入
不能说把一个字拿出来，改完，再放回去，只能把全部数据都拿出来，然后修改，再放回去，就可以实现修改的功能

全部加载出来，修改，全部覆盖回去，所以有些txt文档打开时较慢，因为需要加载，修改某些地方，保存时较慢，是因为需要全部覆盖回去

使用输出流往一个文件里写东西的时候，将会替换原文件中的内容，除非在构造器里追加一个参数true

	      


