错误：1，编译：未初始化，类型错误。。。原因：没遵守语法要求，不修正就不会执行
      2，运行：NullPointerException , IndexOutOfBoundsException ...
	      运行又分两种：a、Exception(异常)
			   b、Error(错误)
try/catch/finally   里都有return,不管产没产生异常，执行的都是finally里的return
分析：在执行try/catch里的return之前，先执行finally里的代码，结果finally里也有return,这样执行完finally里的return之后，整个try/catch也就结束了

如果一个方法需要返回值，那么只在finally写return就可以，这样就可以保证return一定会被执行到

RuntimeException 不强制要求处理 ；其它Exception(兄弟类)强制要求处理

System.out(0); 0  返回程序打开者的一个装态

Exception(String message); 构造器参数被封装到了异常对象的message属性中  ， 可通过getMessage()获取

throw后不是RuntimeException，则必须在方法声明处用throws声明可能要抛出的异常，然后在方法调用处必须用try/catch进行捕获
也可只有throws,而方法内部没有throw,但必须进行try/catch，，也就是说只要声明抛出了，就必须进行try/catch处理

只有RuntimeException不是强制性的，可throw  不必throws  也不必try/catch
				 可throws  不必try/catch

异常把异常产生和异常处理分开
写了throw的支路不必写return，可以代替return的作用，但没有返回值
throw可当返回通道，但没有返回值的限制

断言：调试的一种手段，几乎不会用到