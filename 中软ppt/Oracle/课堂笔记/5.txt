主键不能当外键

一对一：子表中一条数据唯一对应主表中一条数据
一对多，多对一 都是单向的

站在部门立场，是一对多的关系
站在员工立场，是多对一的关系

如果两边都要维护，就说这是双向的多对一的关系

在有些框架中，由于多对一和一对多处理是一样的，会把多对一当成一对多

多对多，需要一个关系表来维护

第一范式：确保原子性，数据不可再分
第二范式：表中所有列都和主键有关系
第三范式：这个关系是直接的，而不是间接的，也就是所有的列都必须直接和主键有关系

事务是最小工作单元，要么都成功，要么都失败

自动提交不能回滚

事务提交了，就不能撤销，不能回滚了，所以回滚发生在提交前
提交事务前，数据库并没有真正被改变，只是在一个临时的表中

主键  由  1，使用者 2，程序 3，数据库    来维护

由数据库来维护：sqlserver：标识列
	       mysql:自增列
	       oracle：序列

通常用nextval来做主键

索引加在经常需要排序和比较大小的列，主键自带索引

视图所表示的表并不真实存在
从基表提取数据

create view 视图名 as 查询语句(根据其结果集建立视图)

drop view 视图名

可以把视图当成一个普通表来操作

视图：复杂查询结果集给一个名字存到数据库中

rownum >= 0 表示所有
rownum = 1 表示第一行    >=  =  它俩只能这么写

把一对多，多对一，多对多拆出来，再根据三大范式分别过滤一遍