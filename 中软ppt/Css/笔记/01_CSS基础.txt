CSS3是从h5新增八大模块之一
html css http 等完整名

CSS:层叠样式表(Casscading Style Sheet)
选择器{                        选择器确定了使用对象，对页面中哪些内容进行美化
      属性名:属性值;           属性值(样式声明)决定了美化的效果
	...
}          

选择器分为：标签选择器，类别选择器，ID选择器
CSS里可对html body设置样式，只要是合法标记都可以，，但head里设置标记没有作用

类别选择器，class后可跟多个选择器名，用空格间隔

CSS里的注释：/*   */

ID选择器：只为一个标记服务，为某个特定样式写规则
不能有两个标记拥有相同的id

ID选择器，私人定制 ，， 类别选择器，服务大众

举个例子：学生穿运动服，老师穿西装  是标签选择器
	 一班穿白色上衣，成年人穿皮鞋   是类别选择器
	 张三穿校服  是ID选择器

span的作用就是把一段代码包含起来

样式引用：行内样式 标记内 style="属性:属性值;..."
	  内嵌样式 写在<style type="text/css ></style>里
	  外部样式 写在head里，<link rel="stylesheet" type="text/css" href="1.css">

JS只对行内式有用

href和src的区别：
src：img iframe  代表一种替换  把src指向元素替换原有标记   它是阻塞的，加载完一个才能加载下一个
href：a link 代表一种指向  和页面加载不是同步的(同步加载：a加载完才能加载b)

外部样式，可能会丢样式(因为css加载和文档加载都是各干各的，互不影响)，而行内，内嵌不会

优先级：
	就近原则：两个类选择器，相同样式，谁写在后面，离标签越近，就用谁
	顺序原则：行内式两个color，谁写在后面，就用谁
	精细原则：ID>类别>标签

行内样式高于一切。。。。。

可以换样式的属性值，但不能换html中的内容

后代选择器： 先祖选择器(ID,class,标记)-->空格-->子孙(class，标记)
空格和>的区别：>是直接子孙，如果它的直接子孙不符合，则不执行；>只会往下找一层  
		空格是所有子孙  ,它会一直往下找下去

不要把ID选择器作为后代选择器，没有意义

交集选择器：AB B不能是标记选择器  例：.redp  无法分辨
	   A和B不能同为标记或ID

并集选择器：A,B  A和B没有任何影响

只有文字性的东西有继承性，例 文字颜色、字体   
<style type="text/css">
			/*103*/
			#myUL li a span{
				color: gold;
			}
			/*13*/
			ul .red a span{
				color: red;
			}
			/*4*/
			ul li a span{
				color: blue;
			}
			
			
			
		</style>
	</head>
	<body>
		<ul id="myUL">
			<li class="red">
				<a href="abcabc.html" class="outLink">hello<span>world</span></a>
			</li>
			<li>
				<span>span</span>
			</li>
		</ul>
	</body>
权重：ID=100  class=10  标记=1    优先比权重   在我们进行比较的时候，如果看不出来优先级，就可以用权重比

所有样式在行内样式面前都不管用

p标签不能相互嵌套

总结：选择器：
      引用方式
     复杂选择器
     选择器优先级

如果ul设置了宽度，那么里就不用设置了，会跟着ul走
          
1 红色 #D24D57 2 绿色 #26A65B 3 橙色 #EB7347
4 黑色 #2C3E50 5 暗绿色 #84AF9B 6 橙红色 #FC9D99
7 草绿色 #AEDD81 8 蓝色 #00CCFF 9 灰色 #D0D0D0

<link rel="stylesheet" href="1.css/>  没有这个rel还真不行

li中的width和padding的百分比都是相对于父元素也就是ul的
响应布局中：侧边的ul经过浏览器尺寸变小变成上边的标题：如何让li分成两排排列，假如，此时有10个li，每个li的宽度都是10%，我想要分成上下两排排列，解决办法是：给li增加一个padding-left:10%;这样每个li相当于是20%，，，或者直接给li写20%,,前者的巧妙在于：浏览器尺寸没变之前，li的padding-left是10%，变了之后依旧是10%

border-top:1px solid rgba(255,255,255,0.3);
border-bottom:1px solid rgba(0,0,0,0.1)