干股只能分红不能买卖，卸职以后就要收回
   
  <div title="hello"></div>  任何元素都可以加title属性，鼠标悬浮其上会显示额外信息
  
  var obj = {
	foo: 'bar'
  }

  Object.freeze(obj)   //阻止修改现有的属性
  obj.foo = 'hello'    //会报错
  
  <div v-bind:hello="a" >中国</div>  //如果a的值为null,undefined或false，那么该hello特性不会出现在div中
  <div :[attri]="a"></div>   //从 2.6.0 开始，可以用方括号括起来的 JavaScript 表达式作为一个指令的参数：动态参数
  
  js的全局变量本来就是同一页面上所有script脚本公用的，你要注意js文件的加载顺序
  ps： 只能同一页面，不能跨页面
  
  
  vue-resource是一个非常轻量的用于处理HTTP请求的插件
  vue2.0之后，就不再对vue-resource更新，而是推荐使用axios。基于 Promise 的 HTTP 请求客户端，可同时在浏览器和 Node.js 中使用
  
  
  cli:command line interface 命令行接口
  
  如何创建.babelrc文件   命令行中 echo  > .babelrc   //echo后是两个空格			 
  
  浅拷贝和深拷贝只针对于引用数据类型
  浅拷贝：只复制对象的引用地址，此时两个变量指向同一块内存
  深拷贝：申请一块新的内存，把对象中的所有值都复制过去，此时两个变量指向两块地址不同的内存
	1，slice()、concat、... 操作符：只能实现一维数组的深拷贝
						let arr1 = [1, [2, 3]];
						let arr2 = arr1.slice() / [...arr1] / [].concat(arr1)
						arr2[0] = 9;
						arr2[1][0] = 8;
						console.log(JSON.stringify(arr1))  //[1,[8,3]]
						console.log(JSON.stringify(arr2))  //[9,[8,3]]

	2，Object.assign()：只能实现一维对象的深拷贝
						let obj1 = {
							x: 'hello',
							y: {
								z: 'world'
							}
						}
						let obj2 = Object.assign({}, obj1);
						obj2.x = 'olleh'
						obj2.y.z = 'dlrow'
						console.log(JSON.stringify(obj1))  //{"x":"hello","y":{"z":"dlrow"}}
						console.log(JSON.stringify(obj2))  //{"x":"olleh","y":{"z":"dlrow"}}
	
	进行JSON.stringify()序列化的过程中，undefined、任意的函数以及 symbol 值，在序列化过程中会被忽略（出现在非数组对象的属性值中时）或者被转换成 null（出现在数组中时）。
		 let obj = {
            a: 123,
            b: undefined,
            c(){
                console.log(11)
            },
            d:Symbol("haha"),
            e: 'cyp'
        }
        console.log(JSON.stringify(obj))  //{"a":123,"e":"cyp"}
		
        let arr = [12, undefined, function(){}, Symbol('ha'), 'cyp'];
        console.log(arr);  //(5) [12, undefined, ƒ, Symbol(ha), "cyp"]
        console.log(JSON.stringify(arr));  //[12,null,null,null,"cyp"]

	3，JSON.parse(JSON.stringify(obj))：可实现多维对象的深拷贝，但会忽略undefined、任意的函数、symbol 值
		let obj = {
            a: 123,
            g: {
                m: '999'
            },
            b: undefined,
            c(){
                console.log(11)
            },
            d:Symbol("haha"),
            e: 'cyp'
        }
        let obj2 = JSON.parse(JSON.stringify(obj));
        obj2.g.m = 888;
        console.log(obj)  //{a: 123, g: {m: "999"}, b: undefined, d: Symbol(haha), c: ƒ, …}
        console.log(obj2); //{"a":123,"g":{"m":888},"e":"cyp"}
	
	
	
  es6之扩展运算符(...)
	扩展运算符(...)用于取出参数对象中的所有可遍历属性，拷贝到当前对象之中
		-对象的扩展运算符
			let bar = { a: 1, b: 2 };
			let baz = { ...bar }; // { a: 1, b: 2 }
		  上述方法实际上等价于:
			let bar = { a: 1, b: 2 };
			let baz = Object.assign({}, bar); // { a: 1, b: 2 }
			
			Object.assign方法用于对象的合并，将源对象（source）的所有可枚举属性，复制到目标对象（target）。
			Object.assign方法的第一个参数是目标对象，后面的参数都是源对象。(如果目标对象与源对象有同名属性，或多个源对象有同名属性，则后面的属性会覆盖前面的属性)
	
			同样，对于扩展运算符而言，如果有同名属性，后面也会覆盖前面的
				let bar = {a: 1, b: 2};
				let baz = {...bar, ...{a:2, b: 4}};  // {a: 2, b: 4}
	
		-数组的扩展运算符
			-可以将数组转换为参数序列
				function add(x, y) {
				  return x + y;
				}

				const numbers = [4, 38];
				add(...numbers) // 42
			-可以复制数组		
				const arr1 = [1, 2];
				const arr2 = [...arr1];
	
		//个人觉得，扩展运算符只是把对象中所有可遍历属性给取了出来，至于后续的复制等动作是我们来做的，而不是扩展运算符来做的
		//rest参数是把参数序列转为数组，把所有苹果放到一个篮子里
		//扩展运算符是把数组转为参数序列，当然它也可应用于对象，但说它是rest参数的逆运算并不算错误。把篮子里的苹果给取出来
		
		const [first, ...rest] = [1, 2, 3, 4, 5]  //此处为rest参数和解构赋值的结合使用，下标为0的元素赋给first变量，剩下的参数序列赋值给rest参数
        console.log(first)  //1
        console.log(Array.isArray(rest)) //true
		
		等同于：
		const arr = [1, 2, 3, 4, 5]  
        const first = arr[0];
        const rest = arr.slice(1);
        console.log(rest)
	
	
	then方法返回一个Promise，而它的行为与then中的回调函数的返回值有关
		-如果then中的回调函数返回一个值，那么then返回的Promise将会成为成功状态，
		 并且将返回的值作为新Promise对象的成功状态的回调函数的参数值
		-如果then中的回调函数抛出一个错误，那么then返回的Promise将会成为失败状态，
		 并且将抛出的错误作为新Promise对象的失败状态的回调函数的参数值
		-如果then中的回调函数返回一个已经是成功状态的Promise，那么then返回的Promise
		 也会是成功状态，并且将那个Promise传出的参数值作为新Promise的成功状态的回调函数
		 的参数值
		-如果then中的回调函数返回一个已经是失败状态的Promise，那么then返回的Promise
		 也会是失败状态，并且将那个Promise传出的参数值作为新Promise的失败状态的回调函数
		 的参数值
		-如果then中的回调函数返回一个初始状态的Promise，那么then返回的Promise也会是
		 初始状态，并且它的终态与那个Promise的终态相同；同时，那个Promise变为终态时传出
		 的参数值作为新Promise变为终态时调用的回调函数的参数值
	
		一，
			let promise = new Promise((resolve, reject) => {
				setTimeout(() => {
					reject()
				}, 1000)
			})
			promise.then(() => {
				return 123
			}, (val) => {
				return 456
			}).then((val) => {
				console.log("succ"+val)
			}, (val) => {
				console.log("err"+val)
			})
		    // succ456
			
		二，
			let promise = new Promise((resolve, reject) => {
				setTimeout(() => {
					reject()
				}, 1000)
			})
			promise.then(() => {
			   return 123
			}, (val) => {
				throw new Error('faild')
			}).then((val) => {
				console.log("succ"+val)
			}, (val) => {
				console.log("err"+val)
			})
			// errError: faild
			
		三，
			let promise = new Promise((resolve, reject) => {
				setTimeout(() => {
					reject()
				}, 1000)
			})
			promise.then(() => {
			   return 123
			}, (val) => {
				return new Promise((resolve, reject) => {
					resolve('cyp')
				})
			}).then((val) => {
				console.log("succ"+val)
			}, (val) => {
				console.log("err"+val)
			})
			// succcyp
			
		四，
			let promise = new Promise((resolve, reject) => {
				setTimeout(() => {
					reject()
				}, 1000)
			})
			promise.then(() => {
			   return 123
			}, (val) => {
				return new Promise((resolve, reject) => {
					reject('cyp')
				})
			}).then((val) => {
				console.log("succ"+val)
			}, (val) => {
				console.log("err"+val)
			})
			// errcyp
			
		五，
			let promise = new Promise((resolve, reject) => {
				setTimeout(() => {
					reject()
				}, 1000)
			})
			promise.then(() => {
			   return 123
			}, (val) => {
				return new Promise((resolve, reject) => {
					setTimeout(() => {
						reject('cyp')
					}, 3000)
					
				})
			}).then((val) => {
				console.log("succ"+val)
			}, (val) => {
				console.log("err"+val)
			})
			// errcyp
	
	
	
单选框radio和复选框checkbox
<form>
	a1:  <input type="checkbox" name="apple" value="a1" />
	a2:  <input type="checkbox" name="apple" value="a2" />
	<input type="submit" value="提交">
</form>	

	全都打勾，点击提交时：xxx?apple=a1&apple=a2，由此可以看到name和value的作用体现在提交表单时，radio也是如此。
	单选框和复选框不写value，则提交表单时value值默认为on
	文本框写不写value都是不影响的，但必须要写name
	
	至于你想控制对号的显示，则需要操作的是 checked 属性
	
	他们的value和文本框的value是不一样的，文本框的value不光会出现url后的参数中，还会显示在界面中
		
	有一点要注意，不管是文本框，单选框，复选框都必须要有name属性，否则提交表单时不会添加到参数中



onchange  要在input内容发生改变，并且失去焦点时才会触发，可用于<input>, <select>, 和 <textarea>
oninput   在用户输入时触发，它是在元素值发生变化时立即触发，可用于<input>, <textarea>
onblur    在元素失去焦点时触发
onfocus   在元素获得焦点时触发

对于单选框和复选框来说，onchange和oninput事件的效果是一样的

例：
    <input @change="cc($event.target.value)" />
    <input @blur="cc($event.target.value)" />
    <input @input="cc($event.target.value)" />
	
	
	
下拉框
	<select  id="sel">
        <option value="aaa">A</option>
        <option>B</option>
        <option>C</option>
    </select>
	option没有value属性，那么下拉框的value就是<option>包裹的内容
	option有value属性，那么下拉框的value就是这个option value属性的值，<option>包裹的内容仅是展示用
	
	也就是说，有value就用value，没有就用包裹的内容
	
	
let {name: name2, age="123"} = {name: "jack"}
console.log(name)  // 空串
console.log(name2) //jack
console.log(age)  //默认值123   可以用es6中的参数默认值来为解构对象中没有对应属性的变量提供默认值
这种形式可以使用另一个变量来接收name的值，但注意此时就不能再使用name了，它会是一个空串
此处为解构赋值两个知识点：1，重命名  2，默认值



Polyfill 是一块代码（通常是 Web 上的 JavaScript），用来为旧浏览器提供它没有原生支持的较新的功能。

比如说 polyfill 可以让 IE7 使用 Silverlight 插件来模拟 HTML Canvas 元素的功能，或模拟 CSS 实现 rem 单位的支持，或 text-shadow，或其他任何你想要的功能。


MVVM      M: model 模型   后端传来的数据   
		  V: view 视图    显示的页面
          VM: view model 视图模型
		  在MVVM的框架下view和model是不能直接通信的，需借助ViewModel进行通信
		  当model发生变化，ViewModel会监听到这种变化，然后通知view做相应的改变
		  当view发生变化，ViewModel会监听到这种变化，然后通知model做相应的改变
		  这实际上就实现了数据的双向绑定

浏览器的兼容性问题已经不再是前端的阻碍。前端的项目越来越大，项目的可维护性和扩展性、安全性等成了主要问题。  

Object.keys(obj) 方法会返回一个由给定对象自身可枚举属性组成的数组

Object.freeze()是ES5新增的特性，可以冻结一个对象，冻结指的是不能向这个对象添加新的属性，不能修改其已有属性的值，不能删除已有属性，以及不能修改该对象已有属性的可枚举性、可配置性、可写性。防止对象被修改。

var obj = {
  foo: '不会变'
}
Object.freeze(obj)
change () {
  this.obj.foo = '改变'  // 会报错
}

change () {  // Object.freeze()冻结的是值，你仍然可以将变量的引用替换掉
  this.obj = {
	foo: '会改变'
  }
}

vue 1.0.18+对其提供了支持，对于data或vuex里使用freeze冻结了的对象，vue不会做getter和setter的转换。
如果你有一个巨大的数组或Object，并且确信数据不会修改，使用Object.freeze()可以让性能大幅提升。
new Vue({
    data: {
        // vue不会对list里的object做getter、setter绑定
        list: Object.freeze([
            { value: 1 },
            { value: 2 }
        ])
    },
    created () {
        // 界面不会有响应
        this.list[0].value = 100;

        // 下面两种做法，界面都会响应
        this.list = [
            { value: 100 },
            { value: 200 }
        ];
        this.list = Object.freeze([
            { value: 100 },
            { value: 200 }
        ]);
    }
})
对于纯展示的大数据，都可以使用Object.freeze提升性能


return str.charAt(0).toUpperCase() + str.slice(1)

沿着作用域链找，没找到，会报错
沿着原型链找，没找到，会是undefined



使用 逻辑运算符(或、与) 返回的值都是你运算时用的值，逻辑运算符 运算后的结果不会自动转换成 布尔值。
注：非运算 除外 (非运算会自动转换成布尔值)
平常在if() 语句中, 只不过if括号中的值 会自动转换为布尔值




Array.forEach  就是很普通的遍历，什么都不返回

Array.filter 对数组每一项运行给定函数，把对返回true的项添加到新数组里，最后返回新数组
Array.map 	 对数组每一项运行给定函数，把每次函数返回的结果添加到新数组里，最后返回新数组

Array.some   对数组每一项运行给定函数，有任一项返回true，则结果就为true
Array.every  对数组每一项运行给定函数，每一次该函数都返回true，则结果才为true

[1,2,3].filter((item, index. arr) => {...})  ((item, index) => {...})  (item => {...})    item 必需  index, arr 可选 

Array.find  对数组每一项运行给定函数，当函数返回true时，返回该项值，函数结束运行。没有返回true的项，则返回undefined
			对于空数组则不会执行
			[1,2,3].find((item, index, arr) { return item > 2 })   item 必需  index, arr 可选 
			
array.findIndex(function(currentValue, index, arr), thisValue)   只有currentValue是必需的，其它三个参数可选
返回数组中第一个符合条件的元素的位置，然后停止执行。没有找到则返回-1
[12,14,90].findIndex(currentValue => currentValue > 18)



| （竖线） 用于括号或大括号里，只能选一个 
[ ] （方括号） 可选可不选  
{}（大括号） 选一个 
<> 必选
[ ,...n ] 表示前面的项可重复 n 次。每一项由逗号分隔。 
[ ...n ] 表示前面的项可重复 n 次。每一项由空格分隔


表单元素的 disabled 的值为true，表示禁用该元素；值为false，表示启用该元素

浏览器宿主环境中有window全局对象；node宿主环境中有global全局对象


array.includes(searchElement, fromIndex) 方法用来判断一个数组是否包含一个指定的值，如果是返回 true，否则false
	searchElement: 必需，查找的值
	fromIndex：可选，从哪里开始找  如果fromIndex 大于等于数组长度 ，则返回 false 。该数组不会被搜索
		var arr = ['a', 'b', 'c'];
 
		arr.includes('c', 3);   //false
		如果fromIndex小于 0，则整个数组都会被搜索。
		arr.includes('c', -3);   //true


localStorage和sessionStorage：
	localStorage 生命周期为永久，除非用户显式清除，否则信息一直存在。无论你重启多少次浏览器
	sessionStorage 生命周期为当前标签，当前标签关闭，信息也被清空
	
	localStorage.clear()  //清除全部信息
	localStorage.getItem() //获取指定key信息
	localStorage.setItem() //设置信息
    localStorage.removeItem() //移除指定key信息
	localStorage.length //获取信息个数
	常用方法(同样适用于sessionStorage)
	
localStorage.token = 'helloworld'    //也可以这样保存、读取
alert(localStorage.token)
	
Object.keys(obj)  返回一个表示给定对象的所有可枚举属性的字符串数组

	let person = {name:"张三",age:25,address:"深圳",getName:function(){}}
	Object.keys(person) // ["name", "age", "address","getName"]
	常用：
	Object.keys(person).map((key)=>{
	　　person[key] // 获取到属性对应的值，做一些处理

	}) 	

reduce 可以对数组进行遍历，但它会将每次遍历的结果传到下一轮回调中，最后一次回调的结果会被返回
arr.reduce(function(prev,cur,index,arr){
	...
}, init);
prev 表示上一次回调的返回值，或者初始值 init
cur 表示当前正在处理的数组元素
index 表示当前正在处理的数组元素的索引，若提供 init 值，则索引从0开始，否则从1开始
arr 表示原数组

	原始数组
	var arr = [3,9,4,3,6,0,9];
	
	1. 求数组项之和
		var sum = arr.reduce(function (prev, cur) {
			return prev + cur;
		},0);
		由于传入了初始值0，所以开始时prev的值为0，cur的值为数组第一项3，相加之后返回值为3作为下一轮回调的prev值，然后再继续与下一个数组项相加，以此类推，直至完成所有数组项的和并返回
		
	2. 求数组项最大值
		var max = arr.reduce((prev, cur) => {
			return Math.max(prev, cur)
		})
		由于未传入初始值，所以开始时prev的值为数组第一项3，cur的值为数组第二项9，取两值最大值后继续进入下一轮回调。
	
	3. 数组去重
		var newArr = arr.reduce(function (prev, cur) {
			prev.indexOf(cur) === -1 && prev.push(cur);
			return prev;
		},[]);
		初始化一个空数组
		在初始化数组里查找当前项，找不到，把当前项添加到初始化数组中
		然后初始化数组作为下一轮回调的prev值，继续查找
		最后返回初始化数组
		
$num指第num个匹配值
匹配值指正则中的pattern也就是括号部分	
	modulePath.replace(/^\.\/(.*)\.\w+$/, '$1')
	匹配到 ./app.js  使用第一个括号的匹配值进行替换  ./app.js  => app
	
String.fromCharCode()  将 Unicode 编码转为一个字符
	- 可接受一个指定的 Unicode 值，然后返回一个字符串
		var n = String.fromCharCode(65);  // A
		
stringObject.charCodeAt(index) 返回指定位置的字符的 Unicode 编码
	- 字符串中第一个字符的下标是 0。如果 index 是负数，或大于等于字符串的长度，则 charCodeAt() 返回 NaN
		var str="Hello world!";
		console.log(str.charCodeAt(1)); // 101


Unix时间戳(Unix timestamp)是一种时间表示方式，定义为从格林威治时间1970年01月01日00时00分00秒(北京时间1970年01月01日08时00分00秒)起至现在的总秒数。Unix时间戳不仅被使用在Unix系统、类Unix系统中(比如Linux系统)，也在许多其他操作系统中被广泛采用

通过路由的meta标签对需要做校验的路由页面进行标记
	{
	  path: '/userInfo',
	  name: 'userInfo',
	  meta: {
		requireAuth: true,  // 该路由项需要权限校验
	  }
	  component: userInfo
	}, {
	  path: '/userList',
	  name: 'userList',    // 该路由项不需要权限校验    
	  component: userInfo
	}
之后，我们可以定义一个路由守卫，每次路由跳转，都来做一下权限校验
	router.beforeEach((to, from, next) => {
	  if (to.meta.requireAuth) {  // 判断该路由是否需要登录权限
		if (localStorage.token) {  // 获取当前的token是否存在
		  console.log("token存在");
		  next();
		} else {
		  console.log("token不存在");
		  next({
			path: '/login', // 将跳转的路由path作为参数，登录成功后跳转到该路由
			query: {redirect: to.fullPath}
		  })
		}
	  }
	  else { // 如果不需要权限校验，直接进入路由界面
		next();
	  }
	});

location 对象包含有关当前 URL 的信息，location 对象是 window 对象的一部分
	-hash 返回一个URL的锚部分
		console.log(location.hash) // #/documentation/index
	-host 返回一个URL的主机名和端口
		console.log(location.host) // localhost:9527
	-hostname 返回URL的主机名
		console.log(location.hostname) // localhost
	-href 返回完整的URL
		console.log(location.href) // http://localhost:9527/#/documentation/index
	-port 返回一个URL服务器使用的端口号
		console.log(location.port) // 9527
	-protocol 返回一个URL协议
		console.log(location.protocol) // http:
	-search 返回一个URL的主机名和端口
	
	-assign() 载入一个新的文档
	-replace() 用新的文档替换当前文档
	-reload() 刷新当前页面。该方法只有一个参数，当值为 true 时，将强制浏览器从服务器加载页面资源，当值为 false 或者未传参时，浏览器则可能从缓存中读取页面。
		location.reload()
		
CORS 的基本思想就是使用自定义的 HTTP 头部让浏览器与服务器进行沟通，从而决定请求响应是应该成功还是应该失败
当Http请求发起会带着以下请求头信息
	Origin:http://www.csdnblog.com
返回头也会夹带着类似如下信息
	Access-Control-Allow-Credentials:true 
	Access-Control-Allow-Origin:http://www.csdnblog.com
如果返回头中没有这个头部，或者有头部但是源信息不匹配。那么浏览器就会帮我们驳回这次请求，同源策略在这里发挥了作用

+new Date()  注意 + 号，可以返回时间戳


觉得好看的背景色 #2c343c

npm run build -- --config webpack.config.my.js  使用 npm run 后面想指定配置文件，需要加上 --

如果你想某个请求基于不同的 baseURL，可以在请求内部设置 baseURL，它会覆盖创建实例时的 baseURL
export function getInfo(token) {
  return fetch({
    baseURL: https://api2-xxxx.com
    url: '/user/info',
    method: 'get',
    params: { token }
  });
}

webpack4 的 style-loader   insertAt 改为 insert
postcss.config.js 必须得设置支持的浏览器才会自动添加前缀
	module.exports = {
	  plugins: {
		  'autoprefixer': {overrideBrowserslist: ['> 1%', 'last 2 versions']}
	  }
	}
	
	
vue脚手架如何使用 echarts 和 百度地图
1, 安装 echarts
	npm i echarts
2, 在 public 下的 index.html 中声明秘钥
	<script type="text/javascript" src="http://api.map.baidu.com/api?v=3.0&ak=秘钥"></script>
3, 引入 echarts 和 百度地图扩展
	import echarts from 'echarts'
	import 'echarts/extension/bmap/bmap'



//取消百度地图左下角图片标识  App.vue
.BMap_cpyCtrl {
  display: none;
}
.anchorBL {
  display: none;
}
	
type: scatter
emphasis: {
	label: {
		show: false   //并没卵用
	}
}

label: {
	...样式  //普通状态下的样式
}
itemStyle: {
	...样式   
}
emphasis: {   //它俩的高亮样式统一在这里写
	label: {
		...样式
	},
	itemStyle: { 
		...样式   
	}
}

mounted 不会保证所有的子组件也都一起被挂载。如果你希望等到整个视图都渲染完毕，可以在 mounted 内部使用 vm.$nextTick
mounted: function () {
  this.$nextTick(function () {
    // Code that will run only after the
    // entire view has been rendered
  })
}

 
 
以前的多页面站点是在服务端渲染的，输出到浏览器时已经有了完整的骨架（ html ），这样爬虫抓到时可以分析页面标题，内容等等，做 seo 容易，那时的技术栈是 jsp，php 等等。现在流行的前端框架在这方面是开了倒车，一个空的骨架，一个很大的 js，抓到浏览器以后才开始渲染完整的页面，爬虫就很为难了，因为它没法执行 js 啊，此外，白屏时间也是由于前端渲染带来的问题。于是又有了服务端渲染，让渲染这一步再回到服务端，在服务端模拟浏览器环境，给 react 和 vue 等框架一个可执行的上下文，就是为了提前得到完整的 html


[1,2,3].concat(4,5)    // [1,2,3,4,5] 	参数序列
[1,2,3].concat([4,5])	// [1,2,3,4,5]	数组
[1,2,3].concat({name: 'Jack'})  //[1,2,3,{name: 'Jack'}]  对象    都是返回一个新的数组

[1,2,3].concat(4,5,[6,7],{name: 'Jack'})  //[1, 2, 3, 4, 5, 6, 7, {name: 'Jack'}]  //也可以混着放在一起


let a = 'aaa';
var b = 'bbb';
console.log(window.a,window.b)  // undefined "bbb" 

let 声明的变量不会跟 var 一样作为 window 对象的属性


<el-input v-model="formDataCopy.ProvidentFundDetails[index].Base" maxlength="12" @input="changeNumber(index)" />
changeNumber(index) {
  this.formDataCopy.ProvidentFundDetails[index].Base = (this.formDataCopy.ProvidentFundDetails[index].Base.match(/^\d*(\.?\d{0,2})/g)[0]) || null
},
12位数字，小数点后最多两位

<el-input oninput="value=value.replace(/[^\d]/g,'')" maxlength="12" /> 只能输入数字
<el-input oninput="value=value.replace(/[^A-Za-z0-9\u4e00-\u9fa5']/g,'')" /> 只能输入英文、数字、汉字
<el-input oninput="value=value.replace(/[^A-Za-z0-9-\/']/g,'')" /> 只能输入英文、数字、/、-
<el-input oninput="value=value.replace(/[^\)\(\uff08\uff09']/g,'')" ></el-input> 只能输入半全角括号

当你发现v-model不好使的时候，不妨考虑一下 this.$set()方法，很可能是由于你的字段不是响应式的

以上会有一个bug：文本框中，如果输入法的键盘是中文状态， 在使用shift+任意按键组合件激活该输入框后，再次输入纯数字时会提示，该输入框为空的情况
解决办法为：<el-input v-model="form.assetsNumber" :readonly="isEdit" @input="form.assetsNumber=form.assetsNumber.replace(/[^A-Za-z0-9-\/']/g,'')" maxlength="30"></el-input>
如果是原生input可以用oninput，elementui还是用这么用吧。不知道怎么回事


debounce 函数防抖。当用户不断点击页面，短时间内频繁地触发点击事件，只有最后一次点击的函数会被执行。
只有在用户触发事件后的ns时间内，没有再触发事件，真正的监听函数才会执行，如果在这段时间内再次触发了事件，就需要重新计算这个ns
	_.debounce(func, [wait=0], [options={}])

	func (Function): 要防抖动的函数。

	[wait=0] (number): 需要延迟的毫秒数。

	[options={}] (Object): 选项对象。

	[options.leading=false] (boolean): 指定在延迟开始前调用，默认false。

	[options.maxWait] (number): 设置 func 允许被延迟的最大值。

	[options.trailing=true] (boolean): 指定在延迟结束后调用，默认true。
	
	import _ from 'lodash'
	testDebounce: _.debounce(function() {
	  console.log("debounce");
	}, 2000, {
	  leading: true,
	  trailing: false
	})
	

如果父组件想在子组件mounted之后作出相关操作，可以按照下面这种方式来写。

<!-- parent -->
<parent-component>
  <child-component @mounted="handleChildMounted"></child-component>
</parent-component>

// child
export default {
  mounted() {
    this.$emit('mounted')
  }
}

其实还有更简单的做法。
<!-- parent -->
<parent-component>
  <child-component @hook:mounted="handleChildMounted"></child-component>
</parent-component>

直接使用@hook就可以在父组件中监听子组件中钩子函数，不需要在子组件中额外地$emit一次。
同理，使用@hook还可以监听vue中其它的钩子函数，如@hook:created，@hook:destroyed等。


<el-tabs v-model="activeName">
	<el-tab-pane label="用户管理" name="first"></el-tab-pane>
	<el-tab-pane label="配置管理" name="second"></el-tab-pane>
	<el-tab-pane label="角色管理" name="third"></el-tab-pane>
	<el-tab-pane label="定时任务补偿" name="fourth"></el-tab-pane>
</el-tabs>
<component :is="isComponent" ></component>
<script>
import first from './first'
export default {
	components: {
		first,
		...
	},
    data() {
       return {
　　　　　　activeName: "first",
			componentsList: {
                first: first,//需要引入具体的组件
                second: "Second",
　　　　　　　　third: "Third",
　　　　　　　　four: "Four"
            }
       }
    },
    computed: {
        isComponent() {
              return this.componentsList[this.activeName];
        }
    }
}
</script>

call() apply() bind()
	相同点：都是用来改变函数内this的指向
	不同点：
		从调用来说：call和apply都是直接调用，bind会返回一个新的函数
		从传参来说：call和bind都是传参数序列，apply传的是一个数组
		

offsetTop offsetLeft
	只读属性。距离该元素最近的position不为static的祖先元素，如果没有则指向body。与这个祖先元素左侧，顶部的距离就是offsetLeft offseTop 
offsetWidth offsetHeight
	只读属性。指的是元素的content + padding + border 的长度（这是标准盒子模型下，IE盒子模型width就是offsetWidth）
	

2πr 是圆的周长
π 是圆周长和直径的比例   所以 c = 2r * π


在实际应用中，有的变量只有几种可能取值。如人的性别只有两种可能取值，星期只有七种可能取值。在 C 语言中对这样取值比较特殊的变量可以定义为枚举类型。所谓枚举是指将变量的值一一列举出来，变量只限于列举出来的值的范围内取值。 

使用Int16Array或Uint16Array来存储ArrayBuffer，那么ArrayBuffer的长度必须得是2的倍数。同理对于Int32Array或Uint32Array来说，ArrayBuffer的长度得是4的倍数


<son ref="son"></son>
父组件中：this.$refs.son.search('params')  父组件调用子组件，除了使用props。还可以通过ref调用子组件方法，给这个方法传参，子组件是可以接收到的

latest：最后版本，npm install的就是这个
beta：测试版本，一般内测使用，需要指定版本号install，例如3.1.0-beta.0
next: 先行版本，npm install foo@next安装，例如3.0.2-alpha.0


Vue事件总线（eventBus）$on()会多次触发
main.js
	const Bus = new Vue();
	new Vue({
		el: '#app',
		data: { Bus }
	})
a.vue
	this.$root.Bus.$emit('事件名', 参数1, 参数2);
b.vue
	this.$root.Bus.$on('事件名', 回调函数)
	
	Bus.$on实际是向Bus容器中添加一个事件监听器，当页面跳转时，原来的vue组件被注销，但是向Bus容器中添加的事件监听器并不会被移除。因此，当下次再进入这个vue组件时，又会执行Bus.$on，又会向Bus容器中添加
	一个重复的事件监听器，以此类推，导致Bus容器中有很多个一模一样的事件监听器，从而导致事件只被触发一次，但是回调函数被执行多次的现象。
	
	解决办法就是在beforeDestroy或destroy周期中将事件进行销毁
	beforeDestroy () {
      bus.$off('事件名')
    },
	
	当经过我实测，发现不止需要进行销毁，你的$on代码若放在created生命周期中，否则依然会被触发多次，解决办法为 created 改为 mounted 生命周期
	
	
	
Lint 是检验代码格式工具的一个统称，具体的工具有 Jslint 、 Eslint 等等。我们可以形象地将 Lint 看成是电商行业，而电商行业具体表现有淘宝（Eslint）、京东（Jslint）等
npm init 指令会在项目根目录下生成 package.json 文件
"scripts": {
    "test": "react-scripts test --env=jsdom",
    "lint": "eslint src",
    "lint:create": "eslint --init"
}
"lint:create": "eslint --init" 这个脚本是为了生成 .eslintrc.js 文件
"lint": "eslint src"  让 Lint 检验 src 目录下所有的 .js 文件

给 "lint": "eslint src --fix", 加上 --fix 参数，是让 Eslint 提供的自动修复基础错误。 --fix 只能修复基础的不影响代码逻辑的错误

"extends": "eslint:recommended",  官方提供的默认规则
eslint-config-airbnb 就是别人自定义的编码规范。"extends": "airbnb"，eslint-config 这个前缀可以省略不写

ESLint 附带有大量的规则，修改规则应遵循如下要求：

"off" 或 0 - 关闭规则
"warn" 或 1 - 开启规则，使用警告级别的错误：warn (不会导致程序退出)
"error" 或 2 - 开启规则，使用错误级别的错误：error (当被触发的时候，程序会退出)

const apple = "apple";  // eslint-disable-line  跳过 eslint 校验

object-shorthand 设置该规则，表示对象属性要简写。
var foo = {x: x};    // 会报错
var bar = {a: function () {}};  // 会报错
var foo = {x};    // 不会报错
var bar = {a () {}};    // 不会报错

prefer-arrow-callback 要求回调函数使用箭头函数
// 回调函数，函数的参数是个函数，这个参数函数就是回调函数
funciton bar () {}      // 不是回调函数，不会报错
// setTimeout 的第一个参数就是回调函数，不用箭头函数会报错
setTimeout(() => {
    // .......
}, 1000)

no-param-reassign 禁止对函数的参数重新赋值
function bar ({ data = {} }) {
    data.num = 12;      // 会报错
}
/* 
虽然报错，又不想要将该校验关闭，如果代码中只有 data 这个属性有这种情形，
可以在 .eslintrc.js 中的 rules 属性中添加配置（可忽略 data 属性做此校验）：
'no-param-reassign': ['error', { 'props': true, 'ignorePropertyModificationsFor': ['data'] }],
'no-param-reassign': 0,  // 关闭该属性校验
*/

no-trailing-spaces 禁止行尾空格

no-shadow 禁止变量声明与外层作用域的变量同名
function sum (num) {
  let num = 2;    // 报错，因为 num 变量作为参数已经申明过了
}

常用的几个规则
"quotes": [1, "single"],            # 单引号
"quote-props":[2, "as-needed"],     # 双引号自动变单引号
"semi": [2, "never"],               # 一行结尾不要写分号
"comma-dangle": [1,"always-multiline"]  # 对象或数组多行写法时，最后一个值加逗号


css自定义属性
	--*来声明变量名，var(--*)来使用
	声明和使用必须放在{}代码块里
		body{
			--bg-color: lightblue;
			background-color: var(--bg-color);
		}
	在:root代码块里面声明的变量就是全局变量，并且局部变量会覆盖全局变量
		:root{
			--bg-color: red;
		}
		body{
			--bg-color: lightblue;
			background-color: var(--bg-color);
		}
		最后生效的是--bg-color: lightblue
	变量的缺省值
	完整的变量使用语法 var( [, ]? )，当变量没有定义的时候，会使用后面的值
		body{
			--1: red;
			color:var(--2, blue);
		}
		上面代码会在body的作用域里面查找--2变量，没有的话就会查找全局，都没有的话就会使用后面的值，所以最后生效的颜色就是blue
		变量名可以使用数字
	变量转换会带上空格
		:root{
			--1: lightblue;
			--文字颜色: white;
			--font-size: 30;
		}
		div{
			color: var(--文字颜色);
			font-size: var(--fong-size)px;
		}
		此时div里面的文字的大小是多少呢？是浏览器默认的大小，为什么不是咱们想象的30px呢，这是因为变量转换的时候末尾会带上空格，var(--fong-size)px会转换成30 px
		可以在声明变量的时候带上单位
			--fong-size: 30px;
		或者使用calc()计算属性
			font-size: calc(var(--fong-size) * 1px);
	js获取与赋值
		:root{
		 --bg-color: lightblue;
		}
		 // 获取
		getComputedStyle(document.documentElement).getPropertyValue('--bg-color')  // lightblue
		 // 赋值
		document.documentElement.style.setProperty('--bg-color', 'yellowgreen')
		
CSS object-position 属性
	一般与 object-fit一起使用，用来设置元素的位置，一般用于 img 和 video 标签
	默认值:	50% 50%
	继承:	是
	动画:	是
	版本:	CSS3
	JavaScript 语法: object.style.objectPosition="0 10%"
	语法
		object-position: position|initial|inherit;
		
		position 指定 image 或 video 在容器中的位置。第一个值为 x 坐标位置的值，第二个值为 y 坐标位置的值。表示的方式有：
			object-position: 50% 50%;
			object-position: right top;
			object-position: left bottom;
			object-position: 250px 125px;
		initial	设置为默认值
		inherit	从该元素的父元素继承属性
		
	object-fit 属性
		指定元素的内容应该如何去适应指定容器的高度与宽度。
		一般用于 img 和 video 标签，一般可以对这些元素进行保留原始比例的剪切、缩放或者直接进行拉伸等
		默认值:	fill
		继承:	无
		动画:	无
		版本:	CSS3
		JavaScript 语法: object.style.objectFit="cover"
		语法
			object-fit: fill|contain|cover|scale-down|none|initial|inherit;
			
			fill	默认，不保证保持原有的比例，内容拉伸填充整个内容容器
			contain	保持原有尺寸比例。内容被缩放，可能不会填充整个内容容器
			cover	保持原有尺寸比例。但部分内容可能被剪切，但内容一定会填充整个内容容器
			none	保留原有元素内容的长度和宽度，也就是说内容不会被重置，可能不会填充整个内容容器
			scale-down	保持原有尺寸比例。内容的尺寸与 none 或 contain 中的一个相同，取决于它们两个之间谁得到的对象尺寸会更小一些
			initial	设置为默认值
			inherit	从该元素的父元素继承属性
			
			具体请参考css下的objectFit.html






	var name = 'jack', age = 27
    let obj = {
      objName: 'selina',
      objAge: this.age,    //this  指向 window
      func(){
        console.log(this.objName +'   '+ this.age)  //this 指向 obj
      }
    }

    var apple = 'green'
    function getApple(){
      console.log(this.apple)   //this  指向 window
    }
    console.log(obj.objAge)  //27
    obj.func()   //selina undefined
    getApple()   // green
	
	注：let声明的变量不会成为window对象的属性，所以上面不要用let声明
	
	call()、apply()、bind() 都是用来重定义 this 这个对象的
		let obj = {
		  name: 'selina',
		  age: 11,
		  func(sex, addr){
			console.log(this.name +'   '+ this.age +'   '+ sex +'    '+ addr)
		  }
		}

		let obj2 = {
		  name: 'Jack',
		  age: 22
		}
		obj.func.call(obj2, 'man', 'new York')
		obj.func.apply(obj2, ['woman', 'china'])
		obj.func.bind(obj2, 'unknow', 'hongkong')()
	关于三者的区别主要从两个方面来说：
		1，执行时机
			call和apply都是立即执行
			bind会返回一个函数，必须手动调用
		2，传参
			他们的第一个参数都是要指向的this对象
			从第二个参数开始：
				call和bind 传的n个参数都是用逗号进行分隔的
				apply的第二个参数必须是一个数组，传给函数的n个参数必须放在数组里
                
                
                
property 和 attribute

	如下HTML code：
		<div id="" class=""></div>
			标签指的是 div，标签上有附加信息我们称之为 HTML 属性(attribute)，如 id，class。合起来，我们统称为HTML元素，
			而一个HTML文档就是多个HTML元素构成的。
			
	而HTML DOM是 HTML 的标准对象模型，DOM(Document Object Model)，直译就是文档对象模型
	HTML DOM 定义了所有 HTML 元素的对象和属性，以及访问它们的方法。
	而DOM对象上的属性我们称之为property。
	
	编写HTML源代码时，可以在HTML元素上定义属性(attribute) 。 然后，一旦浏览器解析了您的代码，就会创建一个对应的DOM节点。 该节点是一个对象，因此具有属性 (property)。
	
	<input id="inputID" type="text" value="name">
	input元素有两个属性(attribute)，type和value
	浏览器解析这段代码后，将创建一个HTMLInputElement对象，该对象将包含许多属性。例如：childNodes，classList，className...，这些属性叫做property
	通过 domObj.attibutes.attribute 可以访问html元素上定义的attribute

	因为是根据HTML元素创建的DOM节点对象，所以会有许多与attribute相关的property，但这并不是一对一的关系

	id property 是映射的 id attribute。获取id的property就是获取attribute值，设置也是一样。
		var inputDom = document.querySelector('#inputId')
		console.log(inputDom.getAttribute('id'))
		console.log(inputDom.id)
		// "inputId"
		// "inputId"

		inputDom.setAttribute('id','inputId2')     //设置attribute
		console.log(inputDom.getAttribute('id'))
		console.log(inputDom.id)
		// "inputId2"
		// "inputId2"

		inputDom.id = 'inputId'				//设置property
		console.log(inputDom.getAttribute('id'))
		console.log(inputDom.id)
		// "inputId"
		// "inputId"
		
	DOM节点对象上的type property是映射 type attribute
	type不是纯粹的映射属性，因为它的值只能为 已知值 （例如:text，submit，button，checkbox等等  设置type为未知值 时 property始终为text。
		var inputDom = document.querySelector('#inputId')
		console.log(inputDom.getAttribute('type'))
		console.log(inputDom.type)
		// text
		// text

		inputDom.setAttribute('type','007')        //设置attribute 为 未知值
		console.log(inputDom.getAttribute('type'))
		console.log(inputDom.type)
		// 007
		// text

		inputDom.type = '008'					//设置property  为 未知值
		console.log(inputDom.getAttribute('type'))
		console.log(inputDom.type)
		// 008
		// text

	value property 不是完全映射value attribute
		var inputDom = document.querySelector('#inputId')
		console.log(inputDom.getAttribute('value'))
		console.log(inputDom.value)
		// name
		// name

		inputDom.setAttribute('value','007')     //改变attribute值时，property也会跟着变
		console.log(inputDom.getAttribute('value'))
		console.log(inputDom.value)
		// 007
		// 007

		inputDom.value = '008'					//改变property值时，attribute不会跟着变
		console.log(inputDom.getAttribute('value'))
		console.log(inputDom.value)
		// 007
		// 008
	总结
		HTML属性 (attribute)和 DOM属性(property)，是相互关联的。多数情况attribute仅用作初始化DOM节点对象使用，而property更多用于页面交互，很多框架都是在与元素和指令的 property和事件打交道。
		
		
		
		
需求说明：手动上传特定格式的文件，展示所选文件名称，且能实现覆盖上传。
		1， 解决手动上传问题
			只需要在Upload组件添加 属性  :auto-upload="false" ，然后调用  this.$refs.upload.submit(); 方法即可。
		2，解决特定格式文件问题	
			Upload组件添加 属性 accept=".xxx"
		3，最麻烦的是上传限制问题	
			首先想到 Upload组件添加属性 :limit="1"，但是这样，无论怎么选择文件，页面上展示的始终是第一次选择的文件
			然后想通过on-change方法，改变file-list里选择的文件列表，只保留最后一项
				handleChange(file, fileList) {
					if (fileList.length > 0) {
						this.fileList = [fileList[fileList.length - 1]]
					}
				},
			但是有一个样式问题，用户选择第二个文件后，从第一个文件到第二个文件，有动态切换的效果
			可以通过css去掉这部分动画
				<style lang="scss" scoped>
					.upload-demo {
					  display: flex;
					}
					/deep/ .el-list-enter-active,
					/deep/ .el-list-leave-active {
					  transition: none;
					}
				 
					/deep/ .el-list-enter,
					/deep/ .el-list-leave-active {
					  opacity: 0;
					}
					/deep/ .el-upload-list {
					  height: 40px;
					}
				</style>
			
			
			
			
<el-form :model="orderData">
    <el-form-item prop="passengerInfo[0].ticketNos[0].ticketNo"></el-form-item>
</el-form>		

orderData: {
  passengerInfo: [{
    ticketNos: [{
      ticketNo: 'fddfg'
    }]
  }]
}	

Error: please transfer a valid prop path to form item!

el-form-item上的属性prop字段，必须是其父级组件el-form中绑定model字段中的一个直接子属性。在这个示例中必须保证不管何时orderData.passengerInfo[0].ticketNos[0].ticketNo可以访问到，访问链路中不能出错。

<el-form :model="orderData">
    <el-form-item prop="'passengerInfo.'+firstIndex+'.ticketNos.'+firstIndex+'.ticketNo'""></el-form-item>
</el-form>






开发要搞清楚什么是并发，并行，串行，同步，异步
	1.并发编程又叫多线程编程
		并发当有多个线程在操作时,如果系统只有一个CPU,则它根本不可能真正同时进行一个以上的线程，它只能把CPU运行时间划分成若干个时间段,再将时间 段分配给各个线程执行，在一个时间段的线程代码运行时，其它线程处于挂起状。.这种方式我们称之为并发
	2.并行
		当系统有一个以上CPU时,则线程的操作有可能非并发。当一个CPU执行一个线程时，另一个CPU可以执行另一个线程，两个线程互不抢占CPU资源，
		可以同时进行，这种方式我们称之为并行(Parallel)。	
	
		并发和并行 
			并发和并行是即相似又有区别的两个概念，并行是指两个或者多个事件在同一时刻发生；而并发是指两个或多个事件在同一时间间隔内发生。在多道程序环境下，并发性是指在一段时间内宏观上有多个程序在同时运行，但在单处理机系统中，每一时刻却仅能有一道程序执行，故微观上这些程序只能是分时地交替执行。倘若在计算机系统中有多个处理机，则这些可以并发执行的程序便可被分配到多个处理机上，实现并行执行，即利用每个处理机来处理一个可并发执行的程序，这样，多个程序便可以同时执行。
			
	3.串行、并行		
		  并行和串行指的是任务的执行方式。串行是指多个任务时，各个任务按顺序执行，完成一个之后才能进行下一个。并行指的是多个任务可以同时执行，异步是多个任务并行的前提条件	
			
	4.同步、异步		
		指的是能否开启新的线程。同步不能开启新的线程，异步可以。
        异步：异步和同步是相对的，同步就是顺序执行，执行完一个再执行下一个，需要等待、协调运行。异步就是彼此独立,在等待某事件的过程中继续做自己的事，不需要等待这一事件完成后再工作。线程就是实现异步的一个方式。异步是让调用方法的主线程不需要同步等待另一线程的完成，从而可以让主线程干其它的事情。
        异步和多线程并不是一个同等关系,异步是最终目的,多线程只是我们实现异步的一种手段。异步是当一个调用请求发送给被调用者,而调用者不用等待其结果的返回而可以做其它的事情。实现异步可以采用多线程技术或则交给另外的进程来处理	
			
	5.多线程：多线程是程序设计的逻辑层概念，它是进程中并发运行的一段代码。多线程可以实现线程间的切换执行。		
			
			
			
			
			
类型化数组是javascript操作(内存)二进制数据的一个接口。

类型化数组是建立在ArrayBuffer对象的基础上的。它的作用是，分配一段可以存放数据的连续内存区域。

var buf = new ArrayBuffer(32); //生成一段32字节的内存区域，即变量buf在内存中占了32字节大小

ArrayBuffer对象的byteLength属性，返回所分配的内存区域的字节长度。

buf.byteLength //32

如果要分配的内存区域很大，有可能分配失败（因为没有那么多的连续空余内存），所以有必要检查是否分配成功。
if (buffer.byteLength === n) {
  // 成功
} else {
  // 失败
}

ArrayBuffer作为内存区域，可以存放多种类型的数据。不同数据有不同的存储方式，这就叫做“视图”。目前，JavaScript提供以下类型的视图
Int8Array：8位有符号整数，长度1个字节。
Uint8Array：8位无符号整数，长度1个字节。
Int16Array：16位有符号整数，长度2个字节。
Uint16Array：16位无符号整数，长度2个字节。
Int32Array：32位有符号整数，长度4个字节。
Uint32Array：32位无符号整数，长度4个字节。
Float32Array：32位浮点数，长度4个字节。
Float64Array：64位浮点数，长度8个字节。

每一种视图都有一个BYTES_PER_ELEMENT常数，表示这种数据类型占据的字节数
int8Array.BYTES_PER_ELEMENT // 1
Int16Array.BYTES_PER_ELEMENT // 2

生成视图有两种方法:
1,在ArrayBuffer对象上生成
// 创建一个8字节的ArrayBuffer
var b = new ArrayBuffer(8);

// 创建一个指向b的Int32视图，开始于字节0，直到缓冲区的末尾
var v1 = new Int32Array(b);

// 创建一个指向b的Uint8视图，开始于字节2，直到缓冲区的末尾
var v2 = new Uint8Array(b, 2);

// 创建一个指向b的Int16视图，开始于字节2，长度为2
var v3 = new Int16Array(b, 2, 2);

2,直接生成
var v4 = new Int32Array(3); //创建一个数组长度为3的类型化数组
v4.length // 3;
v4.byteLength //12 变量v4占12字节的内存大小 ；一个32位数字占4个字节，该数组共有3个元素所以是4*3等于12			
			
			
			
			
			
Blob（Binary Large Object）对象代表了一段二进制数据，提供了一系列操作接口。（以二进制形式保存的较大的对象）比如通过new Blob()创建的对象就是Blob对象.又比如,在XMLHttpRequest里,如果指定responseType为blob,那么得到的返回值也是一个blob对象			
	1,生成Blob对象有两种方法：一种是使用Blob构造函数，另一种是对已有的Blob对象使用slice()方法切出一段		
		Blob构造函数	
			var blob = new Blob(data, type) 
			Blob构造函数接受两个参数
				参数data是一组数据，所以必须是数组，即使只有一个字符串也必须用数组装起来
				参数type是Blob对象的配置属性，目前只有一个type也就是mime需要设置
					‘text/csv,charset=UTF-8’ 设置为csv格式，并设置编码为UTF-8
					‘text/html’ 设置成html格式
					
			var blob = new Blob(['我是Blob'],{type: 'text/html'}); 
		属性	
			blob.size   //Blob大小（以字节为单位） 
			blob.type   //Blob的MIME类型，如果是未知，则是“ ”（空字符串）
	2，slice()
		slice()返回一个新的Blob对象，包含了源Blob对象中指定范围内的数据
			blob.slice( start, end, contentType)
			start 可选，开始索引,可以为负数,语法类似于数组的slice方法.默认值为0.
			end 可选，结束索引,可以为负数,语法类似于数组的slice方法.默认值为最后一个索引.
			contentType可选 ，新的Blob对象的MIME类型,这个值将会成为新的Blob对象的type属性的值,默认为一个空字符串
			
	3,使用Blob最简单的方法就是创建一个URL来指向Blob		
		var data= 'Hello world!'; 
		var blob = new Blob([data], { 
		  type: 'text/html,charset=UTF-8' 

		}); 
		window.URL = window.URL || window.webkitURL;  
		document.createElement("a").href = URL.createObjectURL(blob); 	
			
		使用URL.createObjectURL()函数可以创建一个Blob URL，参数blob是用来创建URL的File对象或者Blob对象，返回值格式是：blob://URL	
			
		注意：在每次调用 createObjectURL() 方法时，都会创建一个新的 URL 对象，即使你已经用相同的对象作为参数创建过。当不再需要这些 URL 对象时，每个对象必须通过调用 URL.revokeObjectURL() 方法传入创建的URL为参数，用来释放它。浏览器会在文档退出的时候自动释放它们，但是为了获得最佳性能和内存使用状况，你应该在安全的时机主动释放掉它们。	
	
	当数据中包含汉字时，导出的文件可能会出现乱码，不过我们可以这样解决
		var data = "\ufeff" + "汉字"; 
		
		
		
offsetTop, offsetLeft：只读属性，距离offsetParent的偏移距离。offsetParent指的是距该元素最近的position不为static的祖先元素		
offsetWidth, offsetHeight：只读属性，  width + padding + border
scrollWidth, scrollHeight: 只读属性, 在内容没有溢出的情况下等于 content + padding
									在内容溢出的情况下等于元素中内容的宽度加上内边距  也就是  width - 17px滚动条的宽度  + padding 
scrollTop, scrollLeft 滚动条 滚动的距离		
		
window.innerWidth, window.innerHeight：window对象的只读属性,声明了窗口的文档显示区的高度和宽度，以像素(px)为计量单位。 
(注意：这里的宽度和高度不包括浏览器的标签栏、搜索栏等还有操作系统的任务栏等高度
屏幕分辨率为：1920x1080		
alert(window.innerWidth); 		//窗口的宽度 1920px
alert(window.innerHeight); 　　//窗口的高度 950px
innerWidth因为浏览器两旁没有遮挡物,所以完美的得到了屏幕的宽度1920,而innerHeight因为浏览器上面有工具栏,显示屏又有任务栏,所以被挤掉了130px		
		
clientWidth, clientHeight: 	content + padding   (注：我这里所指的content指的是width-滚动条的内容宽度，如果没有滚动条，那么content等于width)     
在chrome里滚动条的宽度为16.8，也就是 clientWidth = 四舍五入(width - 16.8) + padding 
		
Element.getBoundingClientRect()：只读，返回浮点值，常用于确定元素相对于视口的位置。该方法会返回一个DOMRect对象，包含left, top, width, height, bottom, right六个属性
top，left 和css中的理解一样，元素上边界距窗口顶部的距离
right，bottom有点不一样，它是元素下边界距窗口顶部的距离、元素右边界距窗口左侧的距离

width和height  和offsetWidth, offsetHeight一样，都是 width + padding + border



/* ::after表示法是在CSS 3中引入的，:after 是表示法是在css2中引入的  
 css3为了区分伪类和伪元素，伪元素采用双冒号写法 例如 ::before ::after。伪类采用单冒号写法 例如 :hover :link :focus :not()
element:after  { style properties }  /* CSS2 语法 */
element::after { style properties }  /* CSS3 语法 */


::before 是某标签前的兄弟元素
::after 是某标签后的兄弟元素
	p::before {
	  content: '我是在p标签前的兄弟元素'
	}
	p::after {
	  content: '我是在p标签前的兄弟元素'
	}
	
	
	
vue-cli 项目下生成二维码	
	使用 qrcodejs2
		npm install --save qrcodejs2
	然后在需要生成的相关页面
		<template>
		  <div>
		   <div id="qrcode"></div>
		  </div>
		</template>
	
		import QRCode from 'qrcodejs2' 
 
		methods:{
			// 动态生成二维码
		    qrcode () {  
				let qrcode = new QRCode('qrcode', {
					width: 200, // 设置宽度，单位像素
					height: 200, // 设置高度，单位像素
					text: 'https://www.baidu.com'   // 设置二维码内容或跳转地址
				})
			}  
		},
		created () {
			this.$nextTick(() => {
				this.qrcode()
			})
		}

	
VUE使用 print-js 打印指定区域页面	
	npm安装
		npm install print-js --save
	然后在相关页面
		<template>
		  <div>
			<el-button type="primary" @click="print"></el-button>
			<div id="print-div">
			  <p class="red">世上本没有路，走的人多了，便有了路 ---- 鲁迅</p>
			  <p class="green">世上本没有路，走的人多了，便有了路 ---- 鲁迅</p>
			  <p style="display:none">世上本没有路，走的人多了，便有了路 ---- 鲁迅</p>  //不需要打印内容可以通过css，js两种方法控制
			  <p class="hello">世上本没有路，走的人多了，便有了路 ---- 鲁迅</p>
			</div>
		  </div>
		</template>
	
		import print from "print-js";
		
		methods: {
			print() {
			  const style = `   //可以通过css控制打印内容样式，不过需写在 @media print{...}中
				@media print {
				  .red{
					color:#f00
				  } 
				  .green{
					color:green
				}
			  `;
			  let hello = document.querySelector('#print-div .hello')   //不需要打印内容可以通过css，js两种方法控制
			  hello.style.display = 'none'
			  
			  printJS({
				printable: "print-div", // 标签元素id
				type: "html",
				header: "这是标题",
				style: style,
			  });
			},
		  },
	




