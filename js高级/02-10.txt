02，数据类型
	1，分类
		基本(值)类型
			String: 任意字符串
			Number: 任意的数字
			Boolean: true/false
			Undefined: undefined
			Null: null
		对象(引用)类型
			Object: 任意对象
			Function: 一种特别的对象(可以执行)
			Array: 一种特别的对象(内部数据是有序的，通过数值下标访问)
	2，判断
		typeof
			可以判断: undefined , 数值, 字符串, 布尔值, function
			不能区别: null和object   object与array
		instanceof
			判断对象的具体类型
		===
			可以判断: undefined, null
			
		你得先知道你得到的是什么类型的数据，你才能确定下一步要怎么操作	
		<script>
			//1,基本
			//typeof 返回数据类型的字符串表达
			var a;
			console.log(a, typeof a, typeof a==='undefined', a===undefined);   //undefined 'undefined', true, true
			console.log(undefined==='undefined'); //false
			
			a = 3;
			console.log(typeof a === 'number');  //true  不能使用a===3判断a的类型，因为a的值也有可能为其他数字
			
			a = "hello";
			console.log(typeof a === 'string'); //true
			
			a = true;
			console.log(typeof a === 'boolean');
			
			a = null;
			console.log(typeof a, a===null);   //'object' 无法使用typeof 判断null
			
			//2,对象
			var b1 = {
				b2: [1, 'abc', console.log],
				b3: function(){
					console.log('b3');
					return function(){
						return "hello"
					}
				}
			}
			console.log(b1 instanceof Object, b1 instanceof Array); //true false
			console.log(b1.b2 instanceof Array, b1.b2 instanceof Object); //true true
			console.log(b1.b3 instanceof Function, b1.b3 instanceof Object); //true true
			
			console.log(typeof b1.b2); //'object'
			
			console.log(typeof b1.b3 === 'function'); //true
			
			console.log(typeof b1.b2[2] === 'function'); //true
			b1.b2[2](4)  //4
			console.log(b1.b3()()); //hello   
			
		</script>
		
		
03, 高级问题
	1,undefined与null的区别
		undefined代表定义未赋值
		null定义并赋值了，只是值为null
	2,什么时候给变量赋值为null呢？
		初始赋值，表明将要赋值为对象
		结束前，让对象成为垃圾对象(被垃圾回收器回收)
	3,严格区分变量类型与数据类型
		数据的类型
			基本类型
			对象类型
		变量的类型(变量内存值的类型)
			基本类型：保存的是基本类型的值
			引用类型：保存的是地址值
	
	
	
	<script>
		//实例：实例对象
		//类型：类型对象
		function Person(name, age){  //构造函数  类型
			this.name = name;
			this.age = age;
		}
		var p = new Person('tom', 12); //根据类型创建的实例对象
		
		
		//1,undefined与null的区别
		var a;
		console.log(a); //undefined
		a = null;
		console.log(a); //null
		
		//起始
		var b = null; //初始赋值为null，表明将要赋值为对象(编程需要严谨，不设为null当然可以，但不推荐)
		//确定对象并赋值
		b = [1,4];
		//最后
		b = null; //让b指向的对象成为垃圾对象(被垃圾回收器回收)
		//b = 2; 这么做也可以进行回收，但不推荐
		
		var c = function(){};
		console.log(typeof c); //'function' 只检查c的值是无法判断的，需要检查堆内存中的值才能给出结果
	</script>
	
	
04，数据-变量-内存
	1，什么是数据？
		存储在内存中代表特定信息的'东东'，本质上是0101...
		数据的特点：可传递，可运算
		一切皆数据
		内存中所有操作的目标：数据
			算术运算
			逻辑运算
			赋值
			运行函数
	2，什么是内存？
		内存条通电后产生的可储存数据的空间(临时的)
		内存产生和死亡：内存条(电路板)=>通电=>产生内存空间=>存储数据=>处理数据=>断电=>内存空间和数据都消失
		一块小内存的2个数据
			内部存储的数据
			地址值
		内存分类
			栈：全局变量/局部变量
			堆：对象
	3，什么是变量？
		可变化的量，由变量名和变量值组成
		每个变量都对应一块小内存，变量名用来查找对应的内存，变量值就是内存中保存的数据
	4，内存，数据，变量三者之间的关系
		内存用来存储数据的空间
		变量是内存的标识
		
05，06，相关问题
	关于赋值和内存的问题
		问题：var a = xxx;   a内存中到底保存的是什么
			xxx是基本数据，保存的就是这个数据
			xxx是对象，保存的是对象的地址值
			xxx是一个变量，保存的xxx的内存内容(可能是基本数据，也可能上地址值)
			
	关于引用变量赋值问题
		2个引用变量指向同一个对象，通过一个变量修改对象内部数据，另一个变量看到的是修改之后的数据
		2个引用变量指向同一个对象，让其中一个引用变量指向另一个对象，另一个引用变量依然指向前一个对象
			var a = {age: 12};
			function fn(obj){
				obj = {age: 15};
			}
			fn(a);
			console.log(a.age); //12
	关于数据传递问题
		问题：在js调用函数时传递变量参数时，是值传递还是引用传递
			理解1：都是值(基本值，地址值)传递
			理解2：可能是值传递，也可能是引用传递(地址值)
			
	内存管理
		问题：js引擎如何管理内存
			1，内存生命周期
				分配小内存空间，得到他的使用权
				存储数据，可以反复进行操作
				释放小内存空间
			2，释放内存
				局部变量：函数执行完自动释放
				对象：成为垃圾对象=>垃圾回收器回收
			
			function fn(){
				var b = {};
			}
			fn(); //b是自动释放，b所指向的对象是在后面的某个时刻由垃圾回收器回收
			
		
07，对象
	1，什么是对象
		多个数据的封装体
		用来保存多个数据的容器
		一个对象代表现实中的一个事物
	2，为什么要用对象
		统一管理多个数据
	3，对象的组成
		属性：属性名(字符串)和属性值(任意)组成
		方法：一种特别的属性(属性值是函数)
	4，如何访问对象内部数据
		.属性名：编码简单，有时不能用
		['属性名']：编码复杂，能通用
			什么时候必须使用['属性名']的方式？
				1，属性名包含特殊字符： - 空格
				2，属性名不确定
				
				
				var p = {};
				//1，给p对象添加一个属性：content-type:text/json
				//p.content-type = 'text/json'; //不能用
				p['content-type'] = 'text/json';
				console.log(p['content-type']); //text/json
				
				//2，属性名不确定
				var propName = "myAge";
				var value = 18;
				//p.propName = value;
				p[propName] = value;
				console.log(p[propName]); // 18
		
	<script>
		var p = {
			name: 'Tom',
			age: 12,
			setName: function(name){
				this.name = name;
			},
			setAge(age){
				this.age = age;
			}
		}
		p.setName('Jack');
		p['setAge'](23);
		console.log(p.name, p['age']);
	</script>
	
	
08，函数
	1，什么是函数？
		实现特定功能的n条语句的封装体
		只有函数是可以执行的，其他类型的数据不能执行
	2，为什么要用函数？
		提高代码复用
		便于阅读交流
	3，如何定义函数？
		函数声明
		表达式
	4，如何调用(执行)函数？
		test() :直接调用
		obj.test() :通过对象调用
		new Test() :new调用
		test.call/apply(obj) :临时让test成为obj的方法进行调用
	
	
	function fn(){ //函数声明
	
	}
	var fn2 = function(){ //表达式
	
	}
	fn();
	fn2();
	
	var obj = {};
	function test2(){
		this.xxx = "hello";
	}
	//obj.test2(); 不能直接调用，根本就没有
	test2.call(obj); //obj.test2()  //可以让一个函数成为指定任意对象的方法进行调用
	console.log(obj.xxx); //hello
	
09，回调函数
	1，什么函数才是回调函数
		1)，你定义的
		2)，你没有调
		3)，但最终它执行了(在某个时刻或某个条件下)
	2，常见的回调函数
		dom事件回调函数  ==> 发生事件的dom元素
		定时器回调函数  ==> window
		
		ajax请求回调函数(后面讲)
		生命周期回调函数(后面讲)
	
	
	document.getElementById('btn').onclick = function(){  //dom事件回调函数
		alert(this.innerHTML);
	}
	
	setTimeout(function(){  //定时器回调函数
		alert('hello');
	},1000)
	
10，IIFE
	1，理解
		全称：Immediately-Invoked Function Expression  立即调用函数表达式
	2，作用
		隐藏实现
		不会污染外部(全局)命名空间
		用它来编写js模块
	
	(function(){  //匿名函数自调用
		var a = 123;
		console.log(a);
	})()
	
	
	(function(){
		var a = 1;
		function test(){
			console.log(++a);
		}
		window.$ = function(){  //向外暴露一个全局函数
			return {
				test: test
			}
		}
	})()
	$().test() //2  $是一个函数   $执行后返回的是一个对象
	
	
	
	