37，对象创建模式
	方式一：Object构造函数模式
		套路：先创建空Object对象，再动态添加属性/方法
		适用场景：起始时不确定对象内部数据
		问题：语句太多
			var p =new Object()  //大写O
			p.name = 'jack'
			p.setName = function(){
				this.name = '123'
			}
			
	方式二：对象字面量模式
		套路：使用{}创建对象，同时指定属性/方法
		适用场景：起始时对象内部数据是确定的
		问题：如果创建多个对象，有重复代码
			var p = {
				name: 'jack',
				setName: function(){
					this.name = '123'
				}
			}
	方式三：工厂模式
		套路：通过工厂函数动态创建对象并返回
		适用场景：需要创建多个对象
		问题：对象没有一个具体的类型，都是Object类型
			function createPerson(name, age){
				var obj = {
					name: name,
					age: age,
					setName: function(){
						this.name = name;
					}
					
				}
				return obj;
			}
			var p1 = createPerson('jack', 12);
			var p2 = createPerson('tom', 33);
			
	方式四：自定义构造函数模式
		套路：自定义构造函数，通过new创建对象
		适用场景：需要创建多个类型确定的对象
		问题：每个对象都有相同的数据，浪费内存
			function Person(name, age){
				this.name = name;
				this.age = age;
				this.setName = function(name){
					this.name = name;
				}
			}
			var p1 = new Person('jack', 33)
			var p2 = new Person('tom', 22)
			
	方式五：构造函数+原型的组合模式
		套路：自定义构造函数，属性在函数中初始化，方法添加到原型上
		适用场景：需要创建多个类型确定的对象
			function Person(name, age){
				this.name = name;
				this.age = age;
				
			}
			Person.prototype.setName = function(name){
				this.name = name;
			}
			var p1 = new Person('jack', 33)
			var p2 = new Person('tom', 22)
			
			
38，原型链继承
	1，套路
		1，定义父类型构造函数
		2，给父类型的原型添加方法
		3，定义子类型的构造函数
		4，创建父类型的对象赋值给子类型的原型
		5，将子类型原型的构造属性设置为子类型
		6，给子类型原型添加方法
		7，创建子类型的对象：可以调用父类型的方法
	2，关键
		1，子类型的原型为父类型的一个实例对象
			//子类型
			function Supper(){
				this.subProp = "supper property"
			}
			Supper.prototype.showSubProp = function(){
				console.log(this.subProp)
			}
			//父类型
			function Sub(){
				this.subProp = "sub property"
			}
			//子类型的原型为父类型的一个实例对象
			Sub.prototype = new Supper()
			//让子类型的原型的constructor指向子类型
			Sub.prototype.constructor = Sub
			var sub = new Sub()
			sub.showSubProp()
			
			console.log(sub.constructor) 
			
39,组合继承
	方式2：借用构造函数继承(假的)
		1，套路：
			1，定义父类型构造函数
			2，定义子类型构造函数
			3，在子类型构造函数中调用父类型构造
		2，关键
			1，在子类型构造函数中通过super()调用父类型的构造函数
				function Person(name, age){
					this.name = name;
					this.age = age;
				}
				function Student(name, age, price){
					Person.call(this, name, age) //相当于：this.Person(name, age)
					this.price = price
				}
				
				
	方式3：组合继承：原型链+借用构造函数的组合继承
		1，利用原型链实现对父类型对象的方法继承
		2，利用super()借用父类型构造函数初始化相同属性
			function Person(name, age){
				this.name = name;
				this.age = age;
			}
			Person.prototype.setName = function(name){
				this.name = name
			}
			function Student(name, age, price){
				Person.call(this, name, age)  //为了得到属性
				this.price = price
			}
			Student.prototype = new Person() //为了能看到父类型的方法
			Student.prototype.constructor = Student //修正constructor属性
			Student.prototype.setPrice = function(price){
				this.price = price
			}
			
			var s = new Student('tom', 12 , 14000);
			s.setName('bob')
			s.setPrice(1200)
			console.log(s.name, s.age, s.price)  //bob 12 1200
			
40

41

42,进程与线程
	进程：程序的一次执行，它占有一片独有的内存空间。可以通过windows任务管理器查看进程
	线程：是进程内的一个独立执行单元，是程序执行的一个完整流程，是cpu的最小的调度单元
	
	单线程程序：指的是一个进程内只有一个线程，如果他有多个进程，但每个进程内只有一个线程，也是单线程程序
	
	相关知识：
		应用程序必须运行在某个进程的某个线程上
		一个进程至少有一个运行的线程：主线程，进程启动后自动创建
		一个进程中也可以同时运行多个线程，我们会说程序是多线程运行的
		一个进程内的数据可以供其中的多个线程直接共享
		多个进程之间的数据是不能直接共享的
		线程池(thread pool)：保存多个线程对象的容器，实现线程对象的反复利用
		
	问题：
		1，何为多进程与多线程
			多进程运行：一个应用程序可以同时启动多个实例运行
			多线程：在一个进程内，同时有多个线程运行
		2，比较单线程与多线程
			多线程：
				优点：能有效提升cpu利用率
				缺点：创建多线程开销
					  线程间切换开销
					  死锁与状态同步问题
					  
			单线程：
				优点：顺序编程简单易懂
				缺点：效率低
		3，js是单线程还是多线程
			js是单线程运行的
			但使用h5中的Web Workers可以多线程运行
		4，浏览器运行是单线程还是多线程
				都是多线程运行的
		5，浏览器运行时单进程还是多进程
			有的是单进程
				firefox
				老版IE
			有的是多进程
				chrome
				新版IE
			如何查看浏览器是否是多进程运行的呢
			
43，浏览器内核
	支撑浏览器运行的最核心的程序
	不同的浏览器可能不一样
		chrome，safari: webkit
		firefox: gecko
		IE: trident
		360,搜狗等国内浏览器：trident + webkit
	内核有很多模块组成
		js引擎模块：负责js程序的编译与运行
		html，css文档解析模块：负责页面文本的解析
		DOM/css模块：负责dom/css在内存中的相关处理
		布局和渲染模块：负责页面的布局和效果的绘制(内存中的对象)     (这四个   主线程)
		...
		定时器模块：负责定时器的管理
		事件响应模块：负责事件的管理
		网络请求模块：负责ajax请求     (这三个  分线程)
		
44，定时器的一些思考
	1，定时器真是定时执行的吗
		定时器并不能保证真的定时执行
		一般会延迟一丁点(可以接受)，也有可能延迟很长时间(不能接受)
	2，定时器回调函数是在分线程执行的吗
		在主线程执行的，js是单线程的
	3，定时器是如何实现的
		事件循环模型(后面讲)
		
45，js是单线程执行的
	1，如何证明js执行时单线程的
		setTimeout()的回调函数是在主线程执行的
		定时器回调函数只有在运行栈中的代码全部执行完后才有可能执行
	2，为什么js要用单线程模式，而不用多线程模式
		js的单线程，与它的用途有关
		作为浏览器脚本语言，js的主要用途是与用户互动，以及操作DOM
		这决定了它只能是单线程，否则会带来很复杂的同步问题
	3，代码的分类
		初始化代码
		回调代码
	4，js引擎执行代码的基本流程
		先执行初始化代码：包含一些特别的代码
			设置定时器
			绑定事件监听
			发送ajax请求
		后面在某个时刻才会执行回调函数
		
46，事件循环模型
	1，所有代码分类
		初始化执行代码(同步代码)：包含绑定dom事件监听，设置定时器，发送ajax请求的代码
		回调执行代码(异步代码)：处理回调逻辑
	2，js引擎执行代码的基本流程
		初始化代码 => 回调代码
	3，模型的2个重要组成部分：
		事件管理模块
		回调队列
	4，模型的运转流程
		执行初始化代码，将事件回调函数交给对应模块管理
		当事件发生时，管理模块会将回调函数及其数据添加到回调队列中
		只有当初始化代码执行完后(可能要一定时间)，才会遍历读取回调队列中的回调函数执行
		
	相关重要概念：
		1，执行栈  execution stack  所有的代码都是在此空间中执行的
		2，浏览器内核
			browser core
			js引擎模块(在主线程处理)
			其他模块(在主/分线程处理)
		3，任务队列  task queue		 	
		4，消息队列  message queue
		5，事件队列  event queue    (3,4,5 同一个callback queue)
		6，事件轮询
			event loop
			从任务队列中循环取出回调函数放入执行栈中处理(一个接一个)
		7，事件驱动模型  event-drivent interaction model
		8，请求响应模型  request-response model
		
47,web workers
	1，h5规范提供了js分线程的实现，取名为：Web Workers
	2，相关api
		Worker: 构造函数，加载分线程执行的js文件
		Worker.prototype.onmessage：用于接受另一个线程的回调函数
		Worker.prototype.postMessage：向另一个线程发送消息
	3，不足
		worker内代码不能操作dom(更新ui)
		不能跨域加载js
		不是每个浏览器都支持这个新特性
		
		
		
		