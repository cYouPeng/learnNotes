一，简介
	有的时候，仍然需要对普通DOM元素进行底层操作，这个时候就会用到自定义指令
		//全局注册自定义指令
		Vue.directive('hello', {
			inserted(el){
				el.focus()
			}
		})
		
		//局部注册自定义指令
		let vm = new Vue({
			el: '#app',
			directives: {
				hello: {
					inserted(el){
						el.value = '123';
						el.focus()
					}
				}
			}         
		})
		
		<input v-hello />
	
二，钩子函数
	bind：只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置。
	inserted：被绑定元素插入父节点时调用
		directives: {
            hello: {
                bind(){
                    console.log(123)
                },
                inserted(el){
                    console.log(456)
                }
            }
        }
	
	
	update：所在组件的 VNode 更新时调用，但是可能发生在其子 VNode 更新之前
	componentUpdated：指令所在组件的 VNode 及其子 VNode 全部更新后调用。	
	unbind：只调用一次，指令与元素解绑时调用。	
		
三，钩子函数参数
	即 el、binding、vnode 和 oldVnode
		el：指令所绑定的元素，可以用来直接操作 DOM 。
		binding：一个对象，包含以下属性：
			name：指令名，不包括 v- 前缀。
			value：指令的表达式值，例如：v-hello="1 + 1" 中，值为 2。
			expression：字符串形式的指令表达式。例如 v-hello="1 + 1" 中，expression为 "1 + 1"。
			arg：传给指令的参数，可选。例如 v-hello:foo 中，参数为 "foo"。
			modifiers：修饰符拼成的对象。 例如：v-hello.foo.bar 中，修饰符对象为 { foo: true, bar: true }。
			
			oldValue：指令绑定的前一个值，仅在 update 和 componentUpdated 钩子中可用。无论值是否改变都可用。
		
		vnode：Vue 编译生成的虚拟节点
		oldVnode：上一个虚拟节点，仅在 update 和 componentUpdated 钩子中可用。
			
			directives: {
				hello: {
					bind(el, binding, vnode){
						let s = JSON.stringify;
						el.innerHTML = `
							name:  ${s(binding.name)},<br/>
							value:  ${s(binding.value)},<br/>
							expression:  ${s(binding.expression)},<br/>
							arg:  ${s(binding.arg)},<br/>
							modifiers:  ${s(binding.modifiers)},<br/>
							vnode:  ${Object.keys(vnode).join(', ')}
						`
							
					}
				}
			}
			<div v-hello:apple.foo.bar="2 + 2"></div>
		
	1，动态指令参数
		指令的参数可以是动态的，这使得自定义指令可以在应用中被灵活使用。
		
		创建一个自定义指令，对绑定元素进行固定布局，可以根据指令的值决定距离多少，根据动态参数的值决定这个距离是
		距离左边还是距离上边
			let vm = new Vue({
				el: '#app',
				directives: {
					hello: {
						bind(el, binding){
							el.style.position = 'fixed'
							let s = binding.arg == 'left' ? 'left' : 'top'
							el.style[s] = binding.value + 'px'
						}
					}
				},
				data(){
					return{
						direction: 'top'
					}
				}      
			})
		
			<div v-hello:[direction]="300">welcome to china</div>
		
四，函数简写
	如果你在 bind 和 update 时触发相同行为，而不关心其它的钩子，可以这样简写
		Vue.directive('hello', function(el, binding){
			el.style.backgroundColor = binding.value
		})
		
五，对象字面量
	如果指令需要多个值，可以传入一个 js 对象字面量
		<div v-hello="{color: 'red', size: '25'}">welcome to china</div>
		
		Vue.directive('hello', function(el, binding){
			console.log(binding.value.color)
			console.log(binding.value.size)
		})
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		