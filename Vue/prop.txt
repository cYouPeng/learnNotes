一，prop 的大小写
	HTML是不区分大小写的，浏览器会把大写字符解释为小写字符
	JS中如果你使用camelCase命名，那么在HTML中用到该prop的时候，就需要换成和其等价的kebab-case命名
	例：
        <ex-component  first-name="Jack"></ex-component>	
		Vue.component('ex-component', {
			props: [ 'firstName' ]
		})
二，prop 类型
	以往我们都是以字符串数组形式列出的 prop
		props: ['title', 'likes', 'isPublished', 'commentIds', 'author']
		
	现在我们可以为每个prop指定值类型，当提供的值不符合类型时，会进行提示，但不会影响程序执行		
        props: {
			title: String,
	        likes: Number,
	        isPublished: Boolean,  
	        commentIds: Array,
	        author: Object,
	        callback: Function,
	        contactsPromise: Promise 
        }
		
三，传递静态或动态 prop
	传递一个静态的值
		<ex-component first-name="Jack"></ex-component>
	通过 v-bind 动态赋值
		<ex-component :first-name="info.firstname"></ex-component>
	也可以
		<ex-component :first-name="info.firstname +' and '+ info.lastname"></ex-component>
		
	上述中，我们传的值都是字符串类型的，实际上任何类型的值都可以传给一个prop
	利用v-bind告诉vue传入的是一个JavaScript表达式，而不是一个字符串

	传入一个数字
	    <ex-component v-bind:likes="42"></ex-component>  
	传入一个布尔值
	    <ex-component isPublished></ex-component>  //不给赋值，默认为true
	    <ex-component :isPublished="false"></ex-component>
	传入一个数组
	     <ex-component :commentIds="[123, 456, 789]"></ex-component>
	传入一个对象
	     <ex-component :author="{name: 'Jack', age: 34}"></ex-component>
		 
	传入一个对象的所有属性
	如果想要将一个对象的所有属性都作为特性传入，可以使用不带参数的v-bind
	    post: {
			name: 'Jack',
			age: 24
	    }
	    <ex-component v-bind="post"></ex-component>   //v-bind等只有带参数时才能缩写，此时不能写做 :="post"  
	    //相当于
	    <ex-component :name="post.name" :age="post.age"></ex-component>
		
		其实就是看你是否使用了v-bind，没有使用，那你传的就是一个字符串，是死值；使用 了 v-bind，那你传的就是一个表达式，表达式的结果可能是数字，布尔，对象等类型

四，单向数据流
	数据总是从父组件传到子组件，子组件没有权利修改父组件传过来的数据，只能请求父组件对原始数据进行修改。

	由于单向数据流的限制，我们不能直接在子组件中修改 props 的值，当我们修改的时候会报错

	但是，很多时候我们又确实要在子组件中操作这个从父组件传过来的数据，那么应该怎么办呢？

	有两种方法：

		定义一个局部变量，并用 prop 的值初始化它
			props: ['initialCounter'],
			data: function () {
		       return {
					counter: this.initialCounter
		       }
			}
		定义一个计算属性，处理 prop 的值并返回
			props: ['size'],
			computed: {
		       normalizedSize: function () {
		           return this.size.trim().toLowerCase()
		       }
	        }
	利用了data和computed来间接地操作这个数据，这样就不会报错了

五，prop 验证
	null 和 undefined 会通过任何类型验证，以下面代码中的propA举例，你给他传null或undefined，控制台是不会有任何报错的，这样是允许的

	Vue.component('my-component', {
	    props: {
			// 基础的类型检查 
		    propA: Number,
			// 多个可能的类型
			propB: [String, Number],
			// 必填的字符串或数字
			propC: {
				type: [String, Number],
				required: true
			},
			// 带有默认值的数字
			propD: {
				type: Number,
				default: 100
			},
			// 带有默认值的对象
			propE: {
				type: Object,
				// 对象或数组的默认值必须从一个函数获取，这么写会报错
				// default: { message: 'hello' }
				default: function () {
					return { message: 'hello' }
				}
			},
			// 自定义验证函数
			propF: {
				validator: function (value) {
					// 这个值必须匹配下列字符串中的一个
					return ['success', 'warning', 'danger'].indexOf(value) !== -1
		       }
	        }
	    }
    })
	
	1，类型检查
        type 可以是下列原生构造函数中的一个：
	        String
	        Number
	        Boolean
	        Array
	        Object
	        Date
	        Function
	        Symbol	
	    还可以是一个自定义的构造函数	
		    function Person (firstName, lastName) {
		        this.firstName = firstName
		        this.lastName = lastName
		    }
		    Vue.component('blog-post', {
		        props: {
					author: Person
		        }
		    })
			
六，非 prop 的特性
	一个非prop特性是指给组件传了一个特性，但是该特性并没有在这个组件的props中定义
	或者这么说，一个没有在 props 选项中定义的特性就叫做非prop特性
		
		一个人天生就是黑色眼睛、黄皮肤 这是prop特性，预定就定义好的
		可能因为意外少了一个指头，这是非prop特性，预定没有料到的
	
	1，替换/合并已有的特性
		组件的内部模板是这样的
	       <div name="Jack" class="main"></div>
		调用该组件时
	       <ex-component name="Selina" class="con"></ex-component>
		最后渲染出来
	       <div name="Selina" class="main con"></div>
		   
		对于非prop特性来说，调用组件时传入的值会代替组件内部定义好的值， Selina会替换Jack，
		但是class和style会有些不一样，不会进行替换而是把两边的值合并起来，最后得到的值：class="main con"
		
		替换/合并只针对根元素上的非prop特性
		
	2，禁用特性继承
		非prop特性会被子组件继承下来，添加到根元素上或替换根元素上已有的特性，使用 inheritAttrs:false 会阻止这种继承
		class和style除外，没有什么会影响他们的合并
		
		vm.$attrs 该实例对象保存着从父组件传过来的非prop特性(class和style除外)
		
		从父组件传过来的非prop特性会被渲染在组件的根元素上，利用 inheritAttrs:false 和 $attrs 可以决定把这些特性
		渲染哪个子元素上，而不是渲染在根元素上
			Vue.component('ex-component', {
				template: `
					<div>
						<h1>tittle</h1>
						<p v-bind="$attrs"></p>
					</div>
				`,
				inheritAttrs: false
			})
		首先利用inheritAttrs: false阻止非prop特性继承，这样根元素上就不会渲染这些特性了。再利用 v-bind="$attrs"
		把这些非prop特性渲染在你想要渲染的元素上



		再来说说非prop和prop特性的区别：
		
		1，prop特性可以使用插值的形式获取父组件传递的值，而非prop特性不能

		2，prop特性在页面渲染的时候不会显示出来，非prop特性是以属性的方式显示在渲染出来的html根元素上