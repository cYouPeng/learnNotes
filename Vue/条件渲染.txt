一，v-if
	v-if 指令可以根据  表达式  的值是true还是false来决定是否渲染这块内容
	
	1，在 <template> 元素上使用 v-if 条件渲染分组
		<template>是一个不可见的包裹元素，如果想同时切换多个元素，可以在template上应用v-if
			<template v-if="ok">
			  <h1>Title</h1>
			  <p>Paragraph 1</p>
			  <p>Paragraph 2</p>
			</template>
		最后的渲染结果将不会包含<template>
		
	2，v-else
		你可以使用 v-else 指令来表示 v-if 的“else 块”：
			<span v-if="seen">123</span>
            <span v-else>456</span>
			
		v-else必须紧跟在v-if或v-else-if后

	3，v-else-if
		v-else-if，顾名思义，充当 v-if 的“else-if 块”，可以连续使用：
			<span v-if="seen == 1">1</span>
            <span v-else-if="seen == 2">2</span>
            <span v-else-if="seen == 3">3</span>
            <span v-else>4</span>
		
		v-else-if必须紧跟在v-if或v-else-if后
		
	4，用 key 管理可复用的元素
		vue会尽可能复用已有的元素，这么做会提升性能
			<template v-if="loginType === 'username'">
				<label>Username</label>
				<input placeholder="Enter your username">
			</template>
			<template v-else>
				<label>Email</label>
				<input placeholder="Enter your email address">
			</template>
			<button @click="loginType = 'xx'">change</button>
		点击按钮，你会发现文本框中输入的内容依旧存在，因为label和input都是复用已有的元素，只有文字被换掉了
		
		Vue 为你提供了一种方式来表达“这两个元素是完全独立的，不要复用它们”。只需添加一个具有唯一值的 key 属性即可	
			<input placeholder="Enter your username" key="username-input">
			<input placeholder="Enter your email address" key="email-input">
		现在，每次切换时，输入框都将被重新渲染	
			
二，v-show
	另一个用于根据条件展示元素的选项是 v-show 指令
		<h1 v-show="ok">Hello!</h1>
	不同的是带有 v-show 的元素始终会被渲染并保留在 DOM 中。v-show 只是简单地切换元素的 CSS 属性 display。
	
	注意，v-show 不支持 <template> 元素，也不支持 v-else。
	
三，v-if vs v-show
	v-if会根据表达式的值来重建和销毁元素，它是惰性的，如果初始时条件为假则什么也不做，直到为真才开始渲染
	v-show不管初始时条件是什么，始终会被渲染出来，只是简单地切换css
	
	所以v-if有更高的切换开销，v-show有更高的初始渲染开销
	因此需要频繁地切换，则使用v-show更好
	如果运行时条件很少改变、不需要频繁地切换，则使用v-if更好，因为可以减少初始渲染开销
	
四，v-if 与 v-for 一起使用
	当 v-if 与 v-for 一起使用时，v-for 具有比 v-if 更高的优先级
























			
			
			
			