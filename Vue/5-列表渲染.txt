一，用 v-for 把一个数组对应为一组元素
	可以使用v-for来遍历一个数组，可以提供第二个参数代表索引，没有第三个参数
	只有一个参数item，此时它代表遍历的每个元素，不需要加小括号
	null,undefined是遍历不到的
		<ul>
		  <li v-for="(item, index) in items">
			{{ parentMessage }} - {{ index }} - {{ item.message }}
		  </li>
		</ul>
		data: {
			parentMessage: 'Parent',
			items: [
			  { message: 'Foo' },
			  { message: 'Bar' }
			]
		}
		
	可以使用of替换in
		<div v-for="item of items"></div>
		
二，在 v-for 里使用对象
	可以使用v-for来遍历一个对象
		<ul>
		  <li v-for="value in object">
			{{ value }}
		  </li>
		</ul>
		data: {
			object: {
			  title: 'How to do lists in Vue',
			  author: 'Jane Doe',
			  publishedAt: '2016-04-10'
			}
		}
		
	这个value代表的是属性值	
	
	可以提供第二个参数代表属性名，第三个参数代表索引(从0开始)
		<li v-for="(value, key, index)">
			{{index}}--{{key}}--{{value}}
		</li>
		
三，维护状态
	
四，数组更新检测
	1，变异方法
		会影响到原数组的vue中管它叫做变异方法，包括：
			push()  pop()   unshift()   shift()    splice()  sort()  reverse()
		
		调用这些方法都会触发视图更新
		
	2，替换数组
		不会影响到原数组，而总是返回一个新数组的vue中管它叫做非变异方法，比如：
			filter()、concat() 和 slice()
		当使用非变异方法时，要想触发视图更新，可以用新数组替换旧数组
			this.items = this.items.concat([{text: 123}])
			
		你可能认为这将导致 Vue 丢弃现有 DOM 并重新渲染整个列表，幸运的是，事实并非如此，vue做了一些骚操作使得相同的
		元素得到了尽可能的复用，所以用一个含有相同元素的数组去替换原来的数组是非常高效的操作。
		
	3，注意事项
		由于js的限制，对于以下操作vue检测不到变动，从而导致视图无法更新
			vm.items[1] = 'x' // 不是响应性的
			vm.items.length = 2 // 不是响应性的
		为了解决第一类问题
			Vue.set(this.items, 1, 'x')
			你也可以使用 vm.$set 实例方法，该方法是全局方法 Vue.set 的一个别名
			this.$set(this.items, 1, 'x')
			或者
			this.itmes.splice(1, 1, 'x')
		为了解决第二类问题
			this.items.splice(2)   //length=2 保留前2个元素    splice(2)从下标为2的元素开始删除，保留0和1，也是2个元素
		
五，对象变更检测注意事项
	Vue 无法检测 property 的添加或移除
	<span v-for="value in params">{{ value }}
	var vm = new Vue({
  	     data:{
    		params: {
		   name: 'Jason'
		}
  	     }
         })
	 //vm.params.age = 25
	 //delete vm.params.name    vue检测不到，不会触发视图更新 
         vm.name = 'Selina'            //检测得到，会触发视图更新
         
		
	但可以使用 Vue.set(object, propertyName, value) 方法向嵌套对象添加响应式属性
	Vue.set(this.params, age: 25)   //Vue可以检测到，会触发视图更新
	还可以使用 vm.$set 实例方法，这也是全局 Vue.set 方法的别名：	
	
	
	 有时你可能需要为已有对象赋值多个新属性，
	 你应该这样：this.params = Object.assign({},this.params, {addr: 'new York'})
	 而不是这样：Object.assign(this.params, {addr: 'new York'}) 或 this.items = Object.assign(this.params, {addr: 'new York'})
				
		
	
六，显示过滤/排序后的结果	

七，在 v-for 里使用值范围	
		v-for也可以接受整数，他会重复对应次数
			<div>
			  <span v-for="n in 10">{{ n }} </span>
			</div>
		1 2 3 4...
		
八，在 <template> 上使用 v-for
		类似于 v-if，在 <template> 上使用 v-for 来循环渲染一段包含多个元素的内容。比如
			<template v-for="item in items">
				<li>{{item}}</li>
				<li>game over</li>
			</template>
		
九，v-for 与 v-if 一同使用
	当他们位于同一节点时，v-for的优先级比v-if高，v-if将分别运行于每次循环中	
	说白了，就是for循环里用if进行判断，放在vue里就是这种写法：
		<li v-for="item in items" v-if="typeof item == 'string'">
			{{item}}
		</li>
	遍历items，如果键值的类型是字符串，则渲染，否则不渲染

	也可以在外边写if，来决定是否执行里边的for循环
	<ul v-if="items.length">
		<li v-for="item in items"></li>
	</ul>
		
十，在组件上使用 v-for		
	在自定义组件上，你可以像在任何普通元素上一样使用 v-for 。key 现在是必须的	
		<ul>
            <li 
                is="my-component" 
                v-for="(item, index) in items"
                :key="item.id"
                :title="item.text"
                @remove="items.splice(index, 1)">
            </li>
        </ul>
	is="my-component" 因为在 <ul> 元素内只有 <li> 元素会被看作有效内容。这样做实现的效果与 <my-component> </my-component>相同，但是可以避开一些潜在的浏览器解析错误	
		
		
		
		
		
		
		
		
		
		
		
