
2，初始化一个webpack项目
	一：创建一个新的文件夹，终端下运行命令 yarn init/npm init 即可初始化一个项目	
			package.json 文件，这个文件记录项目的基本信息，同时会记录之后我们安装的第三方包，还可以在里面定义一些脚本，帮助我们管理项目
	二：安装webpack 和 webpack-cli ，这两个包就是用来打包编译项目的  yarn add webpack webpack-cli -D /npm install ...
	三：在项目目录中创建一个 src 目录，用来存放项目代码。在该目录下创建一个 index.js 文件，注意一定是这个名字，这是webpack默认配置的要求
	四：使用webpack进行打包编译，直接在终端中运行命令 npx webpack
	五：多出一个文件夹 dist ，点进去之后可以看到打包后的文件 main.js 。如果这个时候在 dist 文件夹下创建一个 html 文件，通过 script标签 引入main.js文件便可以在浏览器的控制台中看到打印出的 Allen Feng
	
	
	在项目的主目录下（即和package.json同级）新建一个 webpack.config.js 文件，这是webpack的配置文件
	let path = require("path");
	
	module.exports = {
		mode: "production",
		entry: "./src/index.js",
		output: { 
			filename: "main.js",  
			path: path.resolve(__dirname, "dist")  
		}
	}
	mode: webpack的配置模式  production（生产模式，代码会被压缩） 和 development（开发模式代码不会被压缩）。默认采用的是 生产模式
	entry： webpack的入口文件  webpack进行打包编译，肯定要有一个指定的入口文件  默认的入口文件是 ./src/index.js 文件 可以指定为其它文件，使用相对路径
	output： webpack的出口文件  webpack打包编译后的代码放在哪里 在配置该属性的时候，要指定出口文件的 文件名 和 路径 。默认的路径是 dist 文件夹下的 main.js 文件   使用绝对路径
	
	
3，自定义脚本，帮助项目管理
	指定webpack配置文件	
		在打包编译项目的时候，我们需要运行 npx webpack 命令，然后webpack就会根据webpack.config.js文件来进行打包编译
		npx webpack 命令是可以指定一些参数的，比如如果我们想要指定webpack的配置文件为 webpack.config.allen.js 
		npx webpack --config webpack.config.allen.js

	自定义脚本命令
		在 package.json 文件中新建 scripts 属性，该属性为一个对象，给这个对象添加属性键值对即可新建脚本
		{
		  "name": "webpack-learning",
		  "version": "1.0.0",
		  "main": "index.js",
		  "license": "MIT",
		  "scripts": {
			"build": "webpack --config webpack.config.allen.js"  //npx 不加也行
		  },
		  "devDependencies": {
			"webpack": "^4.32.2",
			"webpack-cli": "^3.3.2"
		  }
		我们便可以通过 npm run build 或者 yarn build 来执行webpack的打包编译命令了



4，安装和配置webpack开发服务器
	在进行开发的过程中，我们可以使用webpack启动一个开发服务器，来实时查看自己的项目，很方便进行调试。
	1，安装webpack的开发服务器
		yarn add webpack-dev-server -D
		安装完成之后，我们就可以通过 npx webpack-dev-server 命令启动开发服务器，或者在 package.json 文件中新建一条脚本，后续就可以很方便地使用 npm run 或 yarn 来启动开发服务器
		{
		  "name": "webpack-learning",
		  "version": "1.0.0",
		  "main": "index.js",
		  "license": "MIT",
		  "scripts": {
			"build": "webpack --config webpack.config.cyp.js",
			"dev": "webpack-dev-server"
		  },
		  "devDependencies": {
			"webpack": "^4.32.2",
			"webpack-cli": "^3.3.2",
			"webpack-dev-server": "^3.5.1"
		  }
		}
		之后可以在浏览器中通过 http://localhost:8080 来访问项目

	2，初步配置webpack的开发服务器
		在 webpack.config.json 文件中新增 devServer 属性
		let path = require("path");

		module.exports = {
			devServer: {
				port: 3000,             // 指定开发服务器的端口号  默认是8080
				progress: true,         // 显示开启本地服务器的进度(指的是你修改代码后，浏览器是否显示编译进度) 默认是false
				contentBase: "./build", // 指定本地服务器默认打开的目录  默认是项目根目录
				compress: true          // 是否对代码进行压缩
			},
			mode: "development",    
			entry: "./src/index.js",    
			output: {       
				filename: "index.js",   
				path: path.resolve(__dirname, "build")  
			}
		}
		可以通过 http://localhost:3000 访问到项目的 build 目录了，默认寻找该目录下的 index.html 文件进行渲染，如果没有则展示该目录下的所有文件。

	3，深入配置webpack的开发服务器
		上述配置中，如果要看到项目的页面，一个前提是build目录下必须存在index.html文件。但是这个文件是打包编译后才生成的，所以在开发服务器环境下可能不会存在，而且也不会实时刷新

		正常情况下，我们希望看到的场景是：使用 npm run 或 yarn 来启动开发服务器之后，就可以实时看到项目的页面，如果项目有代码的更新，页面也要实时更新。要做到这一点，我们需要完成以下步骤：
		
		上面这两句话我认为有些错误，在开发服务环境下，在不借助插件的情况下，index.html的存在与否取决于我们是否手动创建，而且他会实时刷新。这一点不是我们使用html-webpack-plugin的目的，使用该插件的目的在于我们不想手动创建index.html
		
		HtmlWebpackPlugin：1，帮助我们自动生成html文件；2打包速度更快
		
		1安装 html-webpack-plugin 插件
			yarn add html-webpack-plugin -D

		2配置 html-webpack-plugin 插件
			首先在 webpack.config.js 文件中引入安装的 html-webpack-plugin 插件，然后新建一个 plugins 属性，该属性是一个数组，webpack使用到的插件，都要在这个数组中进行配置
			let path = require("path");
			let HtmlWebpackPlugin = require("html-webpack-plugin")      // 引入安装的插件

			module.exports = {
				devServer: {
					port: 3000,             // 指定开发服务器的端口号
					progress: true,         // 显示开启本地服务器的进度
					contentBase: "./src", // 指定本地服务器默认打开的目录
					compress: true          // 是否对代码进行压缩
				},
				mode: "development",    
				entry: "./src/index.js",    
				output: {       
					filename: "index.js",   
					path: path.resolve(__dirname, "build")   
				},
				plugins: [
					new HtmlWebpackPlugin({
						template: './src/index.html',       // 模板文件   默认是一个空的html
						filename: 'index.html',             // 开发服务器中生成的临时文件   默认是 index.html 
						//使用webpack，该插件生成的html会被放在出口目录中
						//使用webpack-dev-server，该插件生成的html会被放在内存中
						//注意使用webpack-dev-server，filename的值必须为  index.html，否则wds找不到该文件
						minify: {
							removeAttributeQuotes: true,    // 是否去除文件中的双引号
							collapseWhitespace: true        // 是否去除文件中的空行
						},
						hash: true      // 引入文件的时候添加哈希值，防止缓存的问题
					}),
				]
			}
			template： 模板文件。webpack开发服务器启动的时候，会将项目的代码打包编译成一个或多个 .js 文件，但是这些文件不能直接在浏览器中打开，需要在一个 **.html **文件中引入，才能正常被浏览器渲染。模板文件就是这个 .html 。webpack打包编译后的 .js 脚本文件会自动地被引入到该模板文件中

			filename： 开发服务器中打包编译后生成的 临时文件 的文件名，默认是 index.html 。生成的这个文件是一个临时文件，存放在内存中，在项目中是看不到的。但是这个文件非常重要，当我们在浏览器中访问 http://localhost:3000 ，看到的页面，就是这个文件渲染出来的。同时这个文件也是模板文件和webpack打包后的 .js 文件结合生成的。

			minify： 表示是否对打包编译生成的代码进行处理，比如去除空行、去除双引号等。

			hash：哈希值。如果在模板文件中，直接引入打包编译后的 .js 文件，那么有的时候会受到缓存的影响，但是加上哈希值，就不会存在这个问题。如果不加hash值，在临时文件中引入 .js 文件可能是这个情况：<script src="index.js"></script> ；如果加上了hash值，在临时文件中引入 .js 文件可能是这个情况：<script src="index.js?fb39b867e8a90e7cc9ec"></script> 。有效解决了缓存带来的影响。

		3创建模板文件
			根据上面的配置要求，该文件是位于 src 文件夹下的 index.html 文件
			<!DOCTYPE html>
			<html lang="en">
			<head>
				<meta charset="UTF-8">
				<meta name="viewport" content="width=device-width, initial-scale=1.0">
				<meta http-equiv="X-UA-Compatible" content="ie=edge">
				<title>Document</title>
			</head>
			<body>

				<h1>这是一个模板文件</h1>
				
			</body>
			</html>

		总的来说，开发服务器就是对当前项目进行打包编译，将生成的文件存放在内存中，然后起一个本地服务。我们在浏览器中访问这个本地服务（如 http://localhost:3000 ）来访问内存的 index.html 文件，进而看到我们的项目。

		而且，这个过程是实时热更新的，一旦项目代码有变化，开发服务器会自动进行打包编译，这样我们看到的项目就是最新的。




webpack和webpack-dev-server的区别
一个把打包文件放进物理磁盘
一个把打包文件放进内存
他俩的相同点是都需要你提供一个index.html

而html-webpack-plugin的作用是帮助你生成index.html并自动引入打包好的js文件，不用你再手动提供了
npx webpack在磁盘中生成编译好的文件
npx webpack-dev-server在内存中生成编译好的文件
热更新是webpack-dev-server的功能，不是html-webpack-plugin


webpack在index.html中引入编译好的js文件必须要注意引入路径的问题 <script src="./main.js"></script>  
webpack-dev-server在index.html中引入编译好的js文件不用注意引入路径的问题，因为js文件存在内存中，只要你引入就行，而不必在乎路径问题，无论你的index.html放在多深的目录里，<script src="./../../../../main.js"></script>

webpack和webpack-dev-server都可以用来打包编译项目，只不过存放的地方不同，但是都需要我们提供一个index.html来进行渲染，但是每次都要写一个html并且引入js，很麻烦，所以就有了html-webpack-plugin插件，此时你使用webpack打包编译hwp会在磁盘中帮你生成index.html；你使用webpack-dev-server打包编译hwp会在内存中帮你生成index.html，所以你明明没有看到js和html，但浏览器为啥能渲染的原因


还有mini-css-extract-plugin  使用了webpack-dev-server也会把最终的css文件放到内存中，使用webpack就会放到物理磁盘中



















