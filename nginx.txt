proxy_pass：代理你请求的url
例：
location /test {
	proxy_pass https://www.cnblogs.com
}   
假如此时匹配的location长这样，需要注意的是紧跟域名或端口后是否有"/"，也就是上边"com"后有没有"/"，当然此时是没有的。
假如你前端发来请求的url为 http://www.youp.club/test/abc/123/a.html
那么经过nginx代理过后的url就是 https://www.cnblogs.com/test/abc/123/a.html 。。把匹配的路径部分全都拿过来了


location /test/abc {      
	proxy_pass https://www.cnblogs.com/
	#proxy_pass https://www.cnblogs.com/aaa      
	#proxy_pass https://www.cnblogs.com/aaa/  和上边aaa没有区别   有没有"/"只看紧跟com后边的
} 
http://www.youp.club/test/abc/haha/123/a.html
代理过后变成了 https://www.cnblogs.com/abc/haha/123/a.html   此时和 /test/abc 匹配的/test/abc没有了，只剩下了abc后边的

总结：url带/，只带上绝对根路径(上述/test/abc/后边的为绝对根路径)；不带/，匹配路径全都带上(上述以/test/abc开头的/test/abc/haha/123/a.html)，，location 后如果是abc/  ，那么也会把这个/加上proxy_pass的url中，加啥放啥


Hosts文件：
	hosts是一个没有扩展名的系统文件，可以用记事本等工具打开，其作用就是将一些常用的网址域名与其对应的ip地址建立一个关联“数据库”,当用户在浏览器中输入一个需要登录的网址时，系统会首先自动从hosts文件中寻找对应的ip地址，一旦找到，系统会立即打开对应网页，如果没有找到，则系统会将网址提交DNS服务器进行域名的解析
	
C:\WINDOWS\system32\drivers\etc\hosts     windows
/etc/hosts								  linux

一台nginx代理服务器处理两个不同域名的请求，你可以把这两个域名都解析到这台nginx服务器的ip上，如果只是做测试用，可以修改hosts文件，让这两个域名都指向同一个ip，然后指定两个server(虚拟主机)，分别处理来自不同域名的请求