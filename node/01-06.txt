1，命令行窗口（小黑屏）、CMD窗口、终端、shell
	- 开始菜单 --> 运行 --> CMD --> 回车
	- 常用的指令：
		dir 列出当前目录下的所有文件
		cd 目录名 进入到指定的目录
		md 目录名 创建一个文件夹
		rd 目录名 删除一个文件夹
		
	- 目录
		. 表示当前目录
		.. 表示上一级目录
		
	- 环境变量（windows系统中变量）
		path
			C:\Users\cYouPeng\AppData\Roaming\npm;
			C:\Users\cYouPeng\AppData\Local\Programs\Microsoft VS Code\bin;
			C:\Users\cYouPeng\AppData\Local\Yarn\bin;
			C:\Users\cYouPeng\Desktop\hello
			
		- 当我们在命令行窗口打开一个文件，或调用一个程序时，
			系统会首先在当前目录下寻找文件程序，如果找到了则直接打开
			如果没有找到则会依次到环境变量path的路径中寻找，直到找到为止
			如果没找到则报错
			
		- 所以我们可以将一些需要经常访问的程序和文件的路径添加到path中，
			这样我们就可以在任意位置来访问这些文件和程序了
	
2，进程和线程
	进程
		- 进程负责为程序的运行提供必备的环境
		- 进程就相当于工厂中的车间
		
	线程
		- 线程计算机中最小的计算单位，线程负责执行进程中的程序
		- 线程就相当于工厂中的工人
	
	单线程
		- JS是单线程的
	多线程

3，Node简介
	I/O(Input/Output)
		- I/O操作指的是对磁盘的读写操作
		
	node.js
		- node是一款实现了ES标准的JS引擎
		- 通过node可以使JS在服务器中运行
		- node底层是使用c++编写的
		- node中的JS引擎使用的是chrome的v8引擎
		- Node仅仅是对ES标准进行了实现，所以在Node中不包含DOM 和 BOM
		- Node中可以使用所有的内置对象
			String Number Boolean Math Date RegExp Function Object Array
			而BOM和DOM都不能使用
				但是可以使用 console 也可以使用定时器（setTimeout() setInterval()）					
					
		- 传统的服务器都是多线程的
			- 每进来一个请求，就创建一个线程去处理请求
			
		- Node的服务器是单线程的
			- Node处理请求时是单线程，但是在后台拥有一个I/O线程池
			
		- Node的特点
			1，非阻塞、异步I/O
			2，事件和回调函数
			3，单线程（主线程单线程，后台I/O线程池）
			4，跨平台

4，使用node执行js文件
	地址栏 --> cmd --> 回车 --> node hello.js

6，模块化简介
	- ES5中没有原生支持模块化，我们只能通过script标签引入js文件来实现模块化
	- 在node中为了对模块管理，引入了CommonJS规范
	
		- 模块的引用
			- 使用 require() 函数来引入一个模块，该函数会返回一个对象，这个对象代表的是引入的模块
			- 例子：
				var 变量 = require('模块的标识');
			
		- 模块的定义
			- 在node中一个js文件就是一个模块
			- 默认情况下在js文件中编写的内容，都是运行在一个独立的函数中，外部的模块无法访问
			- 导出变量和函数
				- 使用 exports
					- 例子：
						exports.属性 = 属性值;
						exports.方法 = 函数;
						
				- 使用module.exports
					- 例子：
						module.exports.属性 = 属性值;
						module.exports.方法 = 函数;
						module.exports = {};
						
				console.log(module.exports == exports)  //true	
				
		- 模块的标识
			- 模块的标识就是模块的名字或路径
				node通过模块的标识来寻找模块的
				对于核心模块（npm中下载的模块），直接使用模块的名字对其进行引入
					var fs = require('fs');
					var express = require('express');
					
				对于自定义的文件模块，需要通过文件的路径来对模块进行引入
					路径可以使绝对路径，如果是相对路径必须以 ./ 或 ../ 开头
					var router = require('./router');



	- 在node中有一个全局对象 global，它的作用和网页中window类似
		在全局中创建的变量都会作为global的属性保存
		在全局中创建的函数都会作为global的方法保存
			
	- 当node在执行模块中的代码时，它会首先在代码的最顶部，添加如下代码
		function (exports, require, module, __filename, __dirname) {
	
		在代码的最底部，添加如下代码
		}
		
		实际上模块中的代码都是包装在一个函数中执行的，并且在函数执行时，同时传递进了5个实参	
			exports
				- 该对象用来将变量或函数暴露到外部
			require
				- 函数，用来引入外部的模块
			module
				- module代表的是当前模块本身
				- exports就是module的属性
				- 既可以使用 exports 导出，也可以使用 module.exports导出
			__filename
				C:\Users\WebstormProjects\class0705\01.node\04.module.js
				- 当前模块的完整路径
			__dirname
				C:\Users\WebstormProjects\class0705\01.node
				- 当前模块所在文件夹的完整路径
		
		
		arguments.callee  这个属性保存的是当前执行的函数对象				
		console.log(arguments.callee + "");  //输出包装函数
		
	
	
		
	























