13，Buffer缓冲区
	- Buffer的结构和数组很像，操作的方法也和数组类似
	- 数组中不能存储二进制的文件，而buffer就是专门用来存储二进制数据
	- 使用buffer不需要引入模块，直接使用即可
	- 在buffer中存储的都是二进制数据，但是在显示时都是以16进制的形式显示
		buffer中每一个元素的范围是从 00 - ff      0 - 255    00000000 - 11111111
		计算机 一个0 或 一个1 我们称为1位（bit）
		8bit = 1byte（字节）
		1024byte = 1kb
		1024kb = 1mb
		1024mb = 1gb
		1024gb = 1tb
		
		buffer中的一个元素，占用内存的一个字节
	
	- Buffer的大小一旦确定，则不能修改，Buffer实际上是对底层内存的直接操作
	
	/*
		Buffer.from(str) 将一个字符串转换为buffer
		Buffer.alloc(size) 创建一个指定大小的Buffer
		Buffer.allocUnsafe(size) 创建一个指定大小的Buffer，但是可能包含敏感数据
		buf.toString() 将缓冲区中的数据转换为字符串
	*/
	
	var str = 'hello Atguigu';
	
	//将一个字符串保存到buffer中
	var buf = Buffer.from(str);
	
	console.log(buf.length);  //占用内存的大小
	console.log(str.length);  //字符串的长度
	console.log(buf);
	
	//创建一个指定大小的buffer
	//buffer构造函数都是不推荐使用的
	//var buf2 = new Buffer(10); //10个字节的buffer
	//console.log(buf2.length);
	
	//创建一个10个字节的buffer
	var buf2 = Buffer.alloc(10);
	buf2[0] = 88;
	buf2[1] = 255;
	buf2[2] = 0xaa;
	buf2[10] = 556;  //2c  超过一个字节大小的部分会被舍掉
	
	//只要数字在控制台或页面中输出一定是10进制
	console.log(buf2[2]);
	//利用toString()传不同参数可以输出不同进制字符串
	console.log(buf2[2].toString(2))
	
	for(var i=0; i<buf2.length; i++){
		console.log(buf2[i])
	}
	
	//Buffer.allocUnsafe(size) 创建一个指定大小的buffer，但是buffer中可能含有敏感数据
	var buf3 = Buffer.allocUnsafe(10);
	console.log(buf3);
	//alloc()在内存中开辟一块空间的同时会清除掉原来的数据
	//allocUnsafe()不会清除掉，所以它的性能要比alloc高，但是不安全，所以还是推荐alloc
	
	
	var buf4 = Buffer.from('我是一段文本数据');
	console.log(buf4.toString());  
	
	
14，同步文件写入
	文件系统（File System）
		- 文件系统简单来说就是通过Node来操作系统中的文件
		- 使用文件系统，需要先引入fs模块，fs是核心模块，直接引入不需要下载
		
	同步文件写入
		- 手动操作的步骤
			1，打开文件
				fs.openSync(path, flag[, mode])
					- path 要打开文件的路径
					- flags 打开文件要做的操作的类型
						r 只读的
						w 可写的
					- mode 设置文件的操作权限，一般不传
				返回值：
					- 该方法会返回一个文件的描述符作为结果，我们可以通过该描述符来对文件进行各种操作
			2，向文件中写入内容
				fs.writeSync(fd, string[, position[, encoding]])
					- fd 文件的描述符，需要传递要写入的文件的描述符
					- string 要写入的内容
					- position 写入的起始位置
					- encoding 写入的编码，默认utf-8
			3，保存并关闭文件
				fs.closeSync(fd)
					- 要关闭的文件的描述符
	
	
		var fs = require('fs');
		//打开文件
		var fd = fs.openSync('hello.txt', "w");
		//向文件中写入内容
		fs.writeSync(fd, "今天天气不错~~~")
		//关闭文件
		fs.closeSync(fd);
	
15，异步文件写入
	fs.open(path, flags[, mode], callback)
		- 用来打开一个文件
		- 异步调用的方法，结果都是通过回调函数的参数返回的
		- 回调函数有两个参数：
			err 错误对象，如果没有错误则为null
			fd 文件的描述符
	fs.write(fd, string[, position[, encoding]], callback)
		- 用来异步写入一个文件
	fs.close(fd, callback)
		- 用来关闭文件
	
	//引入fs模块
	var fs = require('fs');
	//打开文件
	fs.open("hello2.txt", "w", function(err, fd) {
		//判断是否出错
		if(!err){
			//如果没有出错，则对文件进行写入操作
			fs.write(fd, '这是异步写入的内容', function(err) {
				if(!err){
					console.log('写入成功~~')
				}
				//关闭文件
				fs.close(fd, function(err) {
					if(!err) {
						console.log('文件已关闭~~~');
					}
				})
			})
		}else {
			console.log(err);
		}
	})
	
16，简单文件写入
	fs.writeFile(file, data[, options], callback)
	fs.writeFileSync(file, data[, options])
		- file 要操作的文件的路径
			"hello.txt"
			"C:\\Users\\cyp\\Desktop\\hello.txt"
			"C:/Users/cyp/Desktop/hello.txt"
		- data 要写入的数据
		- options 选项，可以对写入进行一些设置
			- flag
				r 只读
				w 可写
				a 追加
		- callback 当写入完成以后执行的函数
	
	
	
	var fs = require('fs');
	
	fs.writeFile('hello.txt', '这是通过writeFile写入的内容', function(err) {
		if(!err) {
			console.log('写入成功~~~');
		}
	})
	
17，流式文件写入
	- 同步、异步、简单文件的写入都不适合大文件的写入，性能较差，容易导致内存溢出
	fs.createWriteStream(path[, options])
		- 可以用来创建一个可写流
		- path 文件路径
		- options 配置的参数
	
	
	var ws = fs.createWriteStream('hello.txt');
	
	//通过ws向文件中输出内容
	ws.write('自古多情空余恨');
	ws.write('此恨绵绵无绝期');
	
	
	/*
	 *	可以通过监听流的open和close事件来监听流的打开和关闭
		on(事件字符串, 回调函数)
			- 可以为对象绑定一个事件
		once(事件字符串, 回调函数)
			- 可以为对象绑定一个一次性的事件，该事件将会在触发一次以后自动失效
	*/
	ws.once('open', function() {
		console.log('流打开了~~~');
	})
	ws.once('close', function() {
		console.log('流关闭了~~~');
	})
	
	//关闭流
	ws.close();
	
	
18，简单文件读取
	文件读取：
		1，同步文件读取
			fs.readSync(fd, buffer, offset, length, position)
		2，异步文件读取
			fs.read(fd, buffer, length, position, callback)
		3，简单文件读取
			fs.readFile(path[, options], callback)
			fs.readFileSync(path[, options])
			 - path 要读取的文件的路径
			 - options 读取的选项
			 - callback 回调函数，通过回调函数将读取到的内容返回(err, data)
				err 错误对象
				data 读取到的数据，会返回一个Buffer
				同步读取通过返回值将读取内容返回
				
			var path = 'C://Users/cyp/Desktop/笔记.mp3'
			fs.readFile(path, function(err, data) {
				if(!err) {
					//console.log(data.toString())
					//将data写入到文件中
					fs.writeFile('hello.jpg', data, function(err) {
						if(!err) {
							console.log('文件写入成功~~~');
						}
					})
				}
			})
		4，流式文件读取
			
			//创建一个可读流
			var rs = fs.createReadStream(path);
			//创建一个可写流
			var ws = createWriteStream('a.mp3');
			//监听流的开启和关闭
			rs.once('open', function() {
				console.log('可读流打开了~~~');
			})			
			rs.once('close', function() {
				console.log('可读流关闭了~~~');
				//数据读取完毕，关闭可写流
				ws.end();
			})
			
			ws.once('open', function() {
				console.log('可写流打开了~~~');
			})			
			ws.once('close', function() {
				console.log('可写流关闭了~~~');
			})
	
			//如果要读取一个可读流中的数据，必须要为可读流绑定一个data事件，data事件绑定完毕，它会自动开始读取数据
			//读取完毕自动关闭可读流
			rs.on('data', function(data) {
				//console.log(data);
				ws.write(data);
			})
	
	
	
			//上述ws.end()和data事件注释掉
			//pipe()可以将可读流中的内容，直接输出到可写流中
			rs.pipe(ws);
	
	
			去掉事件监听后：
				var fs = require('fs');
				var rs = fs.createReadStream(path);
				var ws = createWriteStream('a.mp3');
				rs.pipe(ws);
	

20，fs模块的其他方法
	fs.existsSync(path)
		- 检查一个文件是否存在
		
		var isExists = fs.existsSync('1.mp3');
		console.log(isExists); //false
	
	fs.stat(path, callback)
	fs.statSync(path)
		- 获取文件的状态
		- 它会给我们返回一个对象，这个对象中保存了当前对象状态的相关信息
		
		fs.stat('a.mp3', function(err, stat) {
			/*
			 * size 文件的大小
			   isFile() 是否是一个文件
			   isDirectory() 是否是一个文件夹（目录）
			*/
			console.log(stat.isFile());  //true
		})

	fs.unlink(path, callback)
	fs.unlinkSync(path)
		- 删除文件
		
		fs.unlinkSync('hello.txt');
		
	fs.readdir(path[, options], callback)
	fs.readdirSync(path[, options])
		- 读取一个目录的目录结构，也就是目录下有哪些文件
			files是一个字符串数组，每一个元素就是一个文件夹或文件的名字
		
		fs.readdir('.', function(err, files) {
			if(!err) {
				console.log(files);
			}
		})

	fs.truncate(path, len, callback)
	fs.truncateSync(path, len)
		- 截断文件，将文件修改为指定的大小
		
		fs.truncateSync('hello.txt', 10);

	fs.mkdir(path[, model], callback)
	fs.mkdirSync(path[, mode])
		- 创建一个目录
		
		fs.mkdirSync('hello');
		
	fs.rmdir(path, callback)
	fs.rmdirSync(path)
		- 删除一个目录
		
		fs.rmdirSync('hello');

	fs.rename(oldPath, newPath, callback)
	fs.renameSync(oldPath, newPath)
		- 对文件进行重命名
		- 参数：
			oldPath 旧的路径
			newPath 新的路径
			callback 回调函数

		fs.rename('a.mp3', '笔记.mp3', function(err) {
			if(!err) {
				console.log('修改成功~~~');
			}
		})

		
		fs.rename('a.mp3', 'D:/user/笔记.mp3', function(err) {   //移动并重命名
			if(!err) {
				console.log('修改成功~~~');
			}
		})


	fs.watchFile(filename[, options], listener)
		- 监视文件的修改
		- 参数：
			filename 要监视的文件的名字
			options 配置选项
			listener 回调函数 当文件发生变化时，回调函数会执行
				在回调函数中会有两个参数：
					curr 当前文件的状态
					prev 修改前文件的状态
						- 这两个对象都是stats对象
			
			fs.watchFile('hello.txt', {interval: 1000} function(curr, prev) {
				console.log('修改前文件大小：'+prev.size);
				console.log('修改后文件大小：'+curr.size);
			})

			//watchFile每隔一秒检查一次文件的变化，默认为5秒，事件越短对性能耗费越大





	