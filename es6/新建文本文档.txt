1，ECMAScript入门介绍
	1，它是一种由ECMA组织(前身为欧洲计算机制造商协会)制定和发布的脚本语言规范
	2，而我们学的JavaScript是ECMA的实现，但术语ECMAScript和JavaScript平时表达同一个意思
	3，JS包含三个部分
		1)，ECMAScript(核心)
		2)，扩展==>浏览器端
			* BOM （浏览器对象模型）
			* DOM （文档对象模型）
		3)，扩展==>服务器端
			* Node
	4，ES的几个重要版本
		* ES6：09年发布
		* ES6(ES2015): 15年发布，也称为ECMA2015
		* ES7(ES2016): 16年发布，也称为ECMA2016 （变化不大）
		
2,es5-严格模式
	1，理解：
		* 除了正常运行模式(混杂模式)，es5添加了第二种运行模式："严格模式"(strict mode)。
		* 顾名思义，这种模式使得JavaScript在更严格的语法条件下运行
	2，目的/作用
		* 消除JavaScript语法的一些不合理、不严谨之处，减少一些怪异行为
		* 消除代码运行的一些不安全之处，为代码的安全运行保驾护航
		* 为未来新版本的JavaScript做好铺垫
	3，使用
		* 在全局或函数的第一条语句定义为 'use strict';
		* 如果浏览器不支持，只解析为一条简单的语句，没有任何副作用
	4，语法和行为改变
		* 必须用var声明变量
		* 禁止自定义的函数中的this指向window
		* 创建eval作用域
		* 对象不能有重名的属性
		
		"use strict"
		
		name = "jack"; //error
		var name = "jack";
		
		function Person(name, age){
			this.name = na;
			this.age = age;
		}
		Person("jack",12); //报错
		new Person("jack",12); //正确
		
		var str = "NBA";
		eval("var str = 'CBA'; alert(str);");   //eval()会解析调用时传进来的字符串
		alert(str); //不加严格，弹出CBA(eval()作用域污染全局), 加了严格，弹出NBA(eval()内部数据变成私有)
		
		var obj = {
			name: "xx",
			name: "ee"  //error
		}
		
3，json对象
	JSON.stringify(obj/arr)
		*将js对象(数组)转换为json对象(数组)
	JSON.parse(json)
		* json对象(数组)转换为js对象(数组)
		
	var obj = {username: "jack"};
	obj = JSON.stringify(obj);
	console.log(typeof obj); //string
	obj = JSON.parse(obj);
	console.log(typeof obj); //object
		
		